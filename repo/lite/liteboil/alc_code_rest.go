// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package liteboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AlcCodeRest is an object representing the database table.
type AlcCodeRest struct {
	AlcCode   string  `boil:"alc_code" json:"alc_code" toml:"alc_code" yaml:"alc_code"`
	AlcVolume string  `boil:"alc_volume" json:"alc_volume" toml:"alc_volume" yaml:"alc_volume"`
	DateRest  string  `boil:"date_rest" json:"date_rest" toml:"date_rest" yaml:"date_rest"`
	Volume    float64 `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`

	R *alcCodeRestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L alcCodeRestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlcCodeRestColumns = struct {
	AlcCode   string
	AlcVolume string
	DateRest  string
	Volume    string
}{
	AlcCode:   "alc_code",
	AlcVolume: "alc_volume",
	DateRest:  "date_rest",
	Volume:    "volume",
}

var AlcCodeRestTableColumns = struct {
	AlcCode   string
	AlcVolume string
	DateRest  string
	Volume    string
}{
	AlcCode:   "alc_code_rest.alc_code",
	AlcVolume: "alc_code_rest.alc_volume",
	DateRest:  "alc_code_rest.date_rest",
	Volume:    "alc_code_rest.volume",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AlcCodeRestWhere = struct {
	AlcCode   whereHelperstring
	AlcVolume whereHelperstring
	DateRest  whereHelperstring
	Volume    whereHelperfloat64
}{
	AlcCode:   whereHelperstring{field: "\"alc_code_rest\".\"alc_code\""},
	AlcVolume: whereHelperstring{field: "\"alc_code_rest\".\"alc_volume\""},
	DateRest:  whereHelperstring{field: "\"alc_code_rest\".\"date_rest\""},
	Volume:    whereHelperfloat64{field: "\"alc_code_rest\".\"volume\""},
}

// AlcCodeRestRels is where relationship names are stored.
var AlcCodeRestRels = struct {
}{}

// alcCodeRestR is where relationships are stored.
type alcCodeRestR struct {
}

// NewStruct creates a new relationship struct
func (*alcCodeRestR) NewStruct() *alcCodeRestR {
	return &alcCodeRestR{}
}

// alcCodeRestL is where Load methods for each relationship are stored.
type alcCodeRestL struct{}

var (
	alcCodeRestAllColumns            = []string{"alc_code", "alc_volume", "date_rest", "volume"}
	alcCodeRestColumnsWithoutDefault = []string{}
	alcCodeRestColumnsWithDefault    = []string{"alc_code", "alc_volume", "date_rest", "volume"}
	alcCodeRestPrimaryKeyColumns     = []string{"alc_code", "alc_volume", "date_rest"}
	alcCodeRestGeneratedColumns      = []string{}
)

type (
	// AlcCodeRestSlice is an alias for a slice of pointers to AlcCodeRest.
	// This should almost always be used instead of []AlcCodeRest.
	AlcCodeRestSlice []*AlcCodeRest
	// AlcCodeRestHook is the signature for custom AlcCodeRest hook methods
	AlcCodeRestHook func(context.Context, boil.ContextExecutor, *AlcCodeRest) error

	alcCodeRestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	alcCodeRestType                 = reflect.TypeOf(&AlcCodeRest{})
	alcCodeRestMapping              = queries.MakeStructMapping(alcCodeRestType)
	alcCodeRestPrimaryKeyMapping, _ = queries.BindMapping(alcCodeRestType, alcCodeRestMapping, alcCodeRestPrimaryKeyColumns)
	alcCodeRestInsertCacheMut       sync.RWMutex
	alcCodeRestInsertCache          = make(map[string]insertCache)
	alcCodeRestUpdateCacheMut       sync.RWMutex
	alcCodeRestUpdateCache          = make(map[string]updateCache)
	alcCodeRestUpsertCacheMut       sync.RWMutex
	alcCodeRestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var alcCodeRestAfterSelectMu sync.Mutex
var alcCodeRestAfterSelectHooks []AlcCodeRestHook

var alcCodeRestBeforeInsertMu sync.Mutex
var alcCodeRestBeforeInsertHooks []AlcCodeRestHook
var alcCodeRestAfterInsertMu sync.Mutex
var alcCodeRestAfterInsertHooks []AlcCodeRestHook

var alcCodeRestBeforeUpdateMu sync.Mutex
var alcCodeRestBeforeUpdateHooks []AlcCodeRestHook
var alcCodeRestAfterUpdateMu sync.Mutex
var alcCodeRestAfterUpdateHooks []AlcCodeRestHook

var alcCodeRestBeforeDeleteMu sync.Mutex
var alcCodeRestBeforeDeleteHooks []AlcCodeRestHook
var alcCodeRestAfterDeleteMu sync.Mutex
var alcCodeRestAfterDeleteHooks []AlcCodeRestHook

var alcCodeRestBeforeUpsertMu sync.Mutex
var alcCodeRestBeforeUpsertHooks []AlcCodeRestHook
var alcCodeRestAfterUpsertMu sync.Mutex
var alcCodeRestAfterUpsertHooks []AlcCodeRestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AlcCodeRest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AlcCodeRest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AlcCodeRest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AlcCodeRest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AlcCodeRest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AlcCodeRest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AlcCodeRest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AlcCodeRest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AlcCodeRest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alcCodeRestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAlcCodeRestHook registers your hook function for all future operations.
func AddAlcCodeRestHook(hookPoint boil.HookPoint, alcCodeRestHook AlcCodeRestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		alcCodeRestAfterSelectMu.Lock()
		alcCodeRestAfterSelectHooks = append(alcCodeRestAfterSelectHooks, alcCodeRestHook)
		alcCodeRestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		alcCodeRestBeforeInsertMu.Lock()
		alcCodeRestBeforeInsertHooks = append(alcCodeRestBeforeInsertHooks, alcCodeRestHook)
		alcCodeRestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		alcCodeRestAfterInsertMu.Lock()
		alcCodeRestAfterInsertHooks = append(alcCodeRestAfterInsertHooks, alcCodeRestHook)
		alcCodeRestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		alcCodeRestBeforeUpdateMu.Lock()
		alcCodeRestBeforeUpdateHooks = append(alcCodeRestBeforeUpdateHooks, alcCodeRestHook)
		alcCodeRestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		alcCodeRestAfterUpdateMu.Lock()
		alcCodeRestAfterUpdateHooks = append(alcCodeRestAfterUpdateHooks, alcCodeRestHook)
		alcCodeRestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		alcCodeRestBeforeDeleteMu.Lock()
		alcCodeRestBeforeDeleteHooks = append(alcCodeRestBeforeDeleteHooks, alcCodeRestHook)
		alcCodeRestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		alcCodeRestAfterDeleteMu.Lock()
		alcCodeRestAfterDeleteHooks = append(alcCodeRestAfterDeleteHooks, alcCodeRestHook)
		alcCodeRestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		alcCodeRestBeforeUpsertMu.Lock()
		alcCodeRestBeforeUpsertHooks = append(alcCodeRestBeforeUpsertHooks, alcCodeRestHook)
		alcCodeRestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		alcCodeRestAfterUpsertMu.Lock()
		alcCodeRestAfterUpsertHooks = append(alcCodeRestAfterUpsertHooks, alcCodeRestHook)
		alcCodeRestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single alcCodeRest record from the query using the global executor.
func (q alcCodeRestQuery) OneG(ctx context.Context) (*AlcCodeRest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single alcCodeRest record from the query.
func (q alcCodeRestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AlcCodeRest, error) {
	o := &AlcCodeRest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "liteboil: failed to execute a one query for alc_code_rest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AlcCodeRest records from the query using the global executor.
func (q alcCodeRestQuery) AllG(ctx context.Context) (AlcCodeRestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AlcCodeRest records from the query.
func (q alcCodeRestQuery) All(ctx context.Context, exec boil.ContextExecutor) (AlcCodeRestSlice, error) {
	var o []*AlcCodeRest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "liteboil: failed to assign all query results to AlcCodeRest slice")
	}

	if len(alcCodeRestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AlcCodeRest records in the query using the global executor
func (q alcCodeRestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AlcCodeRest records in the query.
func (q alcCodeRestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to count alc_code_rest rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q alcCodeRestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q alcCodeRestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "liteboil: failed to check if alc_code_rest exists")
	}

	return count > 0, nil
}

// AlcCodeRests retrieves all the records using an executor.
func AlcCodeRests(mods ...qm.QueryMod) alcCodeRestQuery {
	mods = append(mods, qm.From("\"alc_code_rest\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alc_code_rest\".*"})
	}

	return alcCodeRestQuery{q}
}

// FindAlcCodeRestG retrieves a single record by ID.
func FindAlcCodeRestG(ctx context.Context, alcCode string, alcVolume string, dateRest string, selectCols ...string) (*AlcCodeRest, error) {
	return FindAlcCodeRest(ctx, boil.GetContextDB(), alcCode, alcVolume, dateRest, selectCols...)
}

// FindAlcCodeRest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlcCodeRest(ctx context.Context, exec boil.ContextExecutor, alcCode string, alcVolume string, dateRest string, selectCols ...string) (*AlcCodeRest, error) {
	alcCodeRestObj := &AlcCodeRest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alc_code_rest\" where \"alc_code\"=? AND \"alc_volume\"=? AND \"date_rest\"=?", sel,
	)

	q := queries.Raw(query, alcCode, alcVolume, dateRest)

	err := q.Bind(ctx, exec, alcCodeRestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "liteboil: unable to select from alc_code_rest")
	}

	if err = alcCodeRestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return alcCodeRestObj, err
	}

	return alcCodeRestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AlcCodeRest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AlcCodeRest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("liteboil: no alc_code_rest provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(alcCodeRestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	alcCodeRestInsertCacheMut.RLock()
	cache, cached := alcCodeRestInsertCache[key]
	alcCodeRestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			alcCodeRestAllColumns,
			alcCodeRestColumnsWithDefault,
			alcCodeRestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(alcCodeRestType, alcCodeRestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(alcCodeRestType, alcCodeRestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alc_code_rest\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alc_code_rest\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "liteboil: unable to insert into alc_code_rest")
	}

	if !cached {
		alcCodeRestInsertCacheMut.Lock()
		alcCodeRestInsertCache[key] = cache
		alcCodeRestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AlcCodeRest record using the global executor.
// See Update for more documentation.
func (o *AlcCodeRest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AlcCodeRest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AlcCodeRest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	alcCodeRestUpdateCacheMut.RLock()
	cache, cached := alcCodeRestUpdateCache[key]
	alcCodeRestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			alcCodeRestAllColumns,
			alcCodeRestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("liteboil: unable to update alc_code_rest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alc_code_rest\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, alcCodeRestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(alcCodeRestType, alcCodeRestMapping, append(wl, alcCodeRestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update alc_code_rest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by update for alc_code_rest")
	}

	if !cached {
		alcCodeRestUpdateCacheMut.Lock()
		alcCodeRestUpdateCache[key] = cache
		alcCodeRestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q alcCodeRestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q alcCodeRestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update all for alc_code_rest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to retrieve rows affected for alc_code_rest")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AlcCodeRestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlcCodeRestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("liteboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alcCodeRestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alc_code_rest\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, alcCodeRestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update all in alcCodeRest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to retrieve rows affected all in update all alcCodeRest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AlcCodeRest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AlcCodeRest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("liteboil: no alc_code_rest provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(alcCodeRestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	alcCodeRestUpsertCacheMut.RLock()
	cache, cached := alcCodeRestUpsertCache[key]
	alcCodeRestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			alcCodeRestAllColumns,
			alcCodeRestColumnsWithDefault,
			alcCodeRestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			alcCodeRestAllColumns,
			alcCodeRestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("liteboil: unable to upsert alc_code_rest, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(alcCodeRestPrimaryKeyColumns))
			copy(conflict, alcCodeRestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"alc_code_rest\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(alcCodeRestType, alcCodeRestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(alcCodeRestType, alcCodeRestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "liteboil: unable to upsert alc_code_rest")
	}

	if !cached {
		alcCodeRestUpsertCacheMut.Lock()
		alcCodeRestUpsertCache[key] = cache
		alcCodeRestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AlcCodeRest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AlcCodeRest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AlcCodeRest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AlcCodeRest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("liteboil: no AlcCodeRest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), alcCodeRestPrimaryKeyMapping)
	sql := "DELETE FROM \"alc_code_rest\" WHERE \"alc_code\"=? AND \"alc_volume\"=? AND \"date_rest\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete from alc_code_rest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by delete for alc_code_rest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q alcCodeRestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q alcCodeRestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("liteboil: no alcCodeRestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete all from alc_code_rest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by deleteall for alc_code_rest")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AlcCodeRestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlcCodeRestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(alcCodeRestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alcCodeRestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alc_code_rest\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, alcCodeRestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete all from alcCodeRest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by deleteall for alc_code_rest")
	}

	if len(alcCodeRestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AlcCodeRest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("liteboil: no AlcCodeRest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AlcCodeRest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAlcCodeRest(ctx, exec, o.AlcCode, o.AlcVolume, o.DateRest)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlcCodeRestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("liteboil: empty AlcCodeRestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlcCodeRestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlcCodeRestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alcCodeRestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alc_code_rest\".* FROM \"alc_code_rest\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, alcCodeRestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "liteboil: unable to reload all in AlcCodeRestSlice")
	}

	*o = slice

	return nil
}

// AlcCodeRestExistsG checks if the AlcCodeRest row exists.
func AlcCodeRestExistsG(ctx context.Context, alcCode string, alcVolume string, dateRest string) (bool, error) {
	return AlcCodeRestExists(ctx, boil.GetContextDB(), alcCode, alcVolume, dateRest)
}

// AlcCodeRestExists checks if the AlcCodeRest row exists.
func AlcCodeRestExists(ctx context.Context, exec boil.ContextExecutor, alcCode string, alcVolume string, dateRest string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alc_code_rest\" where \"alc_code\"=? AND \"alc_volume\"=? AND \"date_rest\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, alcCode, alcVolume, dateRest)
	}
	row := exec.QueryRowContext(ctx, sql, alcCode, alcVolume, dateRest)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "liteboil: unable to check if alc_code_rest exists")
	}

	return exists, nil
}

// Exists checks if the AlcCodeRest row exists.
func (o *AlcCodeRest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AlcCodeRestExists(ctx, exec, o.AlcCode, o.AlcVolume, o.DateRest)
}
