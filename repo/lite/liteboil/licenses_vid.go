// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package liteboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LicensesVid is an object representing the database table.
type LicensesVid struct {
	ID          string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description string `boil:"description" json:"description" toml:"description" yaml:"description"`

	R *licensesVidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L licensesVidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LicensesVidColumns = struct {
	ID          string
	Description string
}{
	ID:          "id",
	Description: "description",
}

var LicensesVidTableColumns = struct {
	ID          string
	Description string
}{
	ID:          "licenses_vid.id",
	Description: "licenses_vid.description",
}

// Generated where

var LicensesVidWhere = struct {
	ID          whereHelperstring
	Description whereHelperstring
}{
	ID:          whereHelperstring{field: "\"licenses_vid\".\"id\""},
	Description: whereHelperstring{field: "\"licenses_vid\".\"description\""},
}

// LicensesVidRels is where relationship names are stored.
var LicensesVidRels = struct {
}{}

// licensesVidR is where relationships are stored.
type licensesVidR struct {
}

// NewStruct creates a new relationship struct
func (*licensesVidR) NewStruct() *licensesVidR {
	return &licensesVidR{}
}

// licensesVidL is where Load methods for each relationship are stored.
type licensesVidL struct{}

var (
	licensesVidAllColumns            = []string{"id", "description"}
	licensesVidColumnsWithoutDefault = []string{"id"}
	licensesVidColumnsWithDefault    = []string{"description"}
	licensesVidPrimaryKeyColumns     = []string{"id"}
	licensesVidGeneratedColumns      = []string{}
)

type (
	// LicensesVidSlice is an alias for a slice of pointers to LicensesVid.
	// This should almost always be used instead of []LicensesVid.
	LicensesVidSlice []*LicensesVid
	// LicensesVidHook is the signature for custom LicensesVid hook methods
	LicensesVidHook func(context.Context, boil.ContextExecutor, *LicensesVid) error

	licensesVidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	licensesVidType                 = reflect.TypeOf(&LicensesVid{})
	licensesVidMapping              = queries.MakeStructMapping(licensesVidType)
	licensesVidPrimaryKeyMapping, _ = queries.BindMapping(licensesVidType, licensesVidMapping, licensesVidPrimaryKeyColumns)
	licensesVidInsertCacheMut       sync.RWMutex
	licensesVidInsertCache          = make(map[string]insertCache)
	licensesVidUpdateCacheMut       sync.RWMutex
	licensesVidUpdateCache          = make(map[string]updateCache)
	licensesVidUpsertCacheMut       sync.RWMutex
	licensesVidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var licensesVidAfterSelectMu sync.Mutex
var licensesVidAfterSelectHooks []LicensesVidHook

var licensesVidBeforeInsertMu sync.Mutex
var licensesVidBeforeInsertHooks []LicensesVidHook
var licensesVidAfterInsertMu sync.Mutex
var licensesVidAfterInsertHooks []LicensesVidHook

var licensesVidBeforeUpdateMu sync.Mutex
var licensesVidBeforeUpdateHooks []LicensesVidHook
var licensesVidAfterUpdateMu sync.Mutex
var licensesVidAfterUpdateHooks []LicensesVidHook

var licensesVidBeforeDeleteMu sync.Mutex
var licensesVidBeforeDeleteHooks []LicensesVidHook
var licensesVidAfterDeleteMu sync.Mutex
var licensesVidAfterDeleteHooks []LicensesVidHook

var licensesVidBeforeUpsertMu sync.Mutex
var licensesVidBeforeUpsertHooks []LicensesVidHook
var licensesVidAfterUpsertMu sync.Mutex
var licensesVidAfterUpsertHooks []LicensesVidHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LicensesVid) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LicensesVid) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LicensesVid) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LicensesVid) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LicensesVid) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LicensesVid) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LicensesVid) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LicensesVid) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LicensesVid) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licensesVidAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLicensesVidHook registers your hook function for all future operations.
func AddLicensesVidHook(hookPoint boil.HookPoint, licensesVidHook LicensesVidHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		licensesVidAfterSelectMu.Lock()
		licensesVidAfterSelectHooks = append(licensesVidAfterSelectHooks, licensesVidHook)
		licensesVidAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		licensesVidBeforeInsertMu.Lock()
		licensesVidBeforeInsertHooks = append(licensesVidBeforeInsertHooks, licensesVidHook)
		licensesVidBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		licensesVidAfterInsertMu.Lock()
		licensesVidAfterInsertHooks = append(licensesVidAfterInsertHooks, licensesVidHook)
		licensesVidAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		licensesVidBeforeUpdateMu.Lock()
		licensesVidBeforeUpdateHooks = append(licensesVidBeforeUpdateHooks, licensesVidHook)
		licensesVidBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		licensesVidAfterUpdateMu.Lock()
		licensesVidAfterUpdateHooks = append(licensesVidAfterUpdateHooks, licensesVidHook)
		licensesVidAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		licensesVidBeforeDeleteMu.Lock()
		licensesVidBeforeDeleteHooks = append(licensesVidBeforeDeleteHooks, licensesVidHook)
		licensesVidBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		licensesVidAfterDeleteMu.Lock()
		licensesVidAfterDeleteHooks = append(licensesVidAfterDeleteHooks, licensesVidHook)
		licensesVidAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		licensesVidBeforeUpsertMu.Lock()
		licensesVidBeforeUpsertHooks = append(licensesVidBeforeUpsertHooks, licensesVidHook)
		licensesVidBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		licensesVidAfterUpsertMu.Lock()
		licensesVidAfterUpsertHooks = append(licensesVidAfterUpsertHooks, licensesVidHook)
		licensesVidAfterUpsertMu.Unlock()
	}
}

// OneG returns a single licensesVid record from the query using the global executor.
func (q licensesVidQuery) OneG(ctx context.Context) (*LicensesVid, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single licensesVid record from the query.
func (q licensesVidQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LicensesVid, error) {
	o := &LicensesVid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "liteboil: failed to execute a one query for licenses_vid")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all LicensesVid records from the query using the global executor.
func (q licensesVidQuery) AllG(ctx context.Context) (LicensesVidSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all LicensesVid records from the query.
func (q licensesVidQuery) All(ctx context.Context, exec boil.ContextExecutor) (LicensesVidSlice, error) {
	var o []*LicensesVid

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "liteboil: failed to assign all query results to LicensesVid slice")
	}

	if len(licensesVidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all LicensesVid records in the query using the global executor
func (q licensesVidQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all LicensesVid records in the query.
func (q licensesVidQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to count licenses_vid rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q licensesVidQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q licensesVidQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "liteboil: failed to check if licenses_vid exists")
	}

	return count > 0, nil
}

// LicensesVids retrieves all the records using an executor.
func LicensesVids(mods ...qm.QueryMod) licensesVidQuery {
	mods = append(mods, qm.From("\"licenses_vid\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"licenses_vid\".*"})
	}

	return licensesVidQuery{q}
}

// FindLicensesVidG retrieves a single record by ID.
func FindLicensesVidG(ctx context.Context, iD string, selectCols ...string) (*LicensesVid, error) {
	return FindLicensesVid(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindLicensesVid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLicensesVid(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LicensesVid, error) {
	licensesVidObj := &LicensesVid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"licenses_vid\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, licensesVidObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "liteboil: unable to select from licenses_vid")
	}

	if err = licensesVidObj.doAfterSelectHooks(ctx, exec); err != nil {
		return licensesVidObj, err
	}

	return licensesVidObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *LicensesVid) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LicensesVid) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("liteboil: no licenses_vid provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(licensesVidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	licensesVidInsertCacheMut.RLock()
	cache, cached := licensesVidInsertCache[key]
	licensesVidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			licensesVidAllColumns,
			licensesVidColumnsWithDefault,
			licensesVidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(licensesVidType, licensesVidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(licensesVidType, licensesVidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"licenses_vid\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"licenses_vid\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "liteboil: unable to insert into licenses_vid")
	}

	if !cached {
		licensesVidInsertCacheMut.Lock()
		licensesVidInsertCache[key] = cache
		licensesVidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single LicensesVid record using the global executor.
// See Update for more documentation.
func (o *LicensesVid) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the LicensesVid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LicensesVid) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	licensesVidUpdateCacheMut.RLock()
	cache, cached := licensesVidUpdateCache[key]
	licensesVidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			licensesVidAllColumns,
			licensesVidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("liteboil: unable to update licenses_vid, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"licenses_vid\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, licensesVidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(licensesVidType, licensesVidMapping, append(wl, licensesVidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update licenses_vid row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by update for licenses_vid")
	}

	if !cached {
		licensesVidUpdateCacheMut.Lock()
		licensesVidUpdateCache[key] = cache
		licensesVidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q licensesVidQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q licensesVidQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update all for licenses_vid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to retrieve rows affected for licenses_vid")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LicensesVidSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LicensesVidSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("liteboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), licensesVidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"licenses_vid\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, licensesVidPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update all in licensesVid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to retrieve rows affected all in update all licensesVid")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *LicensesVid) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LicensesVid) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("liteboil: no licenses_vid provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(licensesVidColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	licensesVidUpsertCacheMut.RLock()
	cache, cached := licensesVidUpsertCache[key]
	licensesVidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			licensesVidAllColumns,
			licensesVidColumnsWithDefault,
			licensesVidColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			licensesVidAllColumns,
			licensesVidPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("liteboil: unable to upsert licenses_vid, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(licensesVidPrimaryKeyColumns))
			copy(conflict, licensesVidPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"licenses_vid\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(licensesVidType, licensesVidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(licensesVidType, licensesVidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "liteboil: unable to upsert licenses_vid")
	}

	if !cached {
		licensesVidUpsertCacheMut.Lock()
		licensesVidUpsertCache[key] = cache
		licensesVidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single LicensesVid record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *LicensesVid) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single LicensesVid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LicensesVid) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("liteboil: no LicensesVid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), licensesVidPrimaryKeyMapping)
	sql := "DELETE FROM \"licenses_vid\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete from licenses_vid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by delete for licenses_vid")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q licensesVidQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q licensesVidQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("liteboil: no licensesVidQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete all from licenses_vid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by deleteall for licenses_vid")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LicensesVidSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LicensesVidSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(licensesVidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), licensesVidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"licenses_vid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, licensesVidPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete all from licensesVid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by deleteall for licenses_vid")
	}

	if len(licensesVidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *LicensesVid) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("liteboil: no LicensesVid provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LicensesVid) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLicensesVid(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LicensesVidSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("liteboil: empty LicensesVidSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LicensesVidSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LicensesVidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), licensesVidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"licenses_vid\".* FROM \"licenses_vid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, licensesVidPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "liteboil: unable to reload all in LicensesVidSlice")
	}

	*o = slice

	return nil
}

// LicensesVidExistsG checks if the LicensesVid row exists.
func LicensesVidExistsG(ctx context.Context, iD string) (bool, error) {
	return LicensesVidExists(ctx, boil.GetContextDB(), iD)
}

// LicensesVidExists checks if the LicensesVid row exists.
func LicensesVidExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"licenses_vid\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "liteboil: unable to check if licenses_vid exists")
	}

	return exists, nil
}

// Exists checks if the LicensesVid row exists.
func (o *LicensesVid) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LicensesVidExists(ctx, exec, o.ID)
}
