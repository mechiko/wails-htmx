// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkUtilisation is an object representing the database table.
type OrderMarkUtilisation struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDOrderMarkCodes null.Int64  `boil:"id_order_mark_codes" json:"id_order_mark_codes,omitempty" toml:"id_order_mark_codes" yaml:"id_order_mark_codes,omitempty"`
	CreateDate       null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	ProductionDate   null.String `boil:"production_date" json:"production_date,omitempty" toml:"production_date" yaml:"production_date,omitempty"`
	ExpirationDate   null.String `boil:"expiration_date" json:"expiration_date,omitempty" toml:"expiration_date" yaml:"expiration_date,omitempty"`
	UsageType        null.String `boil:"usage_type" json:"usage_type,omitempty" toml:"usage_type" yaml:"usage_type,omitempty"`
	Inn              null.String `boil:"inn" json:"inn,omitempty" toml:"inn" yaml:"inn,omitempty"`
	KPP              null.String `boil:"kpp" json:"kpp,omitempty" toml:"kpp" yaml:"kpp,omitempty"`
	Version          null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State            null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status           null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReportID         null.String `boil:"report_id" json:"report_id,omitempty" toml:"report_id" yaml:"report_id,omitempty"`
	Archive          null.Int64  `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	JSON             null.String `boil:"json" json:"json,omitempty" toml:"json" yaml:"json,omitempty"`
	Quantity         null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`

	R *orderMarkUtilisationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkUtilisationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkUtilisationColumns = struct {
	ID               string
	IDOrderMarkCodes string
	CreateDate       string
	ProductionDate   string
	ExpirationDate   string
	UsageType        string
	Inn              string
	KPP              string
	Version          string
	State            string
	Status           string
	ReportID         string
	Archive          string
	JSON             string
	Quantity         string
}{
	ID:               "id",
	IDOrderMarkCodes: "id_order_mark_codes",
	CreateDate:       "create_date",
	ProductionDate:   "production_date",
	ExpirationDate:   "expiration_date",
	UsageType:        "usage_type",
	Inn:              "inn",
	KPP:              "kpp",
	Version:          "version",
	State:            "state",
	Status:           "status",
	ReportID:         "report_id",
	Archive:          "archive",
	JSON:             "json",
	Quantity:         "quantity",
}

var OrderMarkUtilisationTableColumns = struct {
	ID               string
	IDOrderMarkCodes string
	CreateDate       string
	ProductionDate   string
	ExpirationDate   string
	UsageType        string
	Inn              string
	KPP              string
	Version          string
	State            string
	Status           string
	ReportID         string
	Archive          string
	JSON             string
	Quantity         string
}{
	ID:               "order_mark_utilisation.id",
	IDOrderMarkCodes: "order_mark_utilisation.id_order_mark_codes",
	CreateDate:       "order_mark_utilisation.create_date",
	ProductionDate:   "order_mark_utilisation.production_date",
	ExpirationDate:   "order_mark_utilisation.expiration_date",
	UsageType:        "order_mark_utilisation.usage_type",
	Inn:              "order_mark_utilisation.inn",
	KPP:              "order_mark_utilisation.kpp",
	Version:          "order_mark_utilisation.version",
	State:            "order_mark_utilisation.state",
	Status:           "order_mark_utilisation.status",
	ReportID:         "order_mark_utilisation.report_id",
	Archive:          "order_mark_utilisation.archive",
	JSON:             "order_mark_utilisation.json",
	Quantity:         "order_mark_utilisation.quantity",
}

// Generated where

var OrderMarkUtilisationWhere = struct {
	ID               whereHelperint64
	IDOrderMarkCodes whereHelpernull_Int64
	CreateDate       whereHelpernull_String
	ProductionDate   whereHelpernull_String
	ExpirationDate   whereHelpernull_String
	UsageType        whereHelpernull_String
	Inn              whereHelpernull_String
	KPP              whereHelpernull_String
	Version          whereHelpernull_String
	State            whereHelpernull_String
	Status           whereHelpernull_String
	ReportID         whereHelpernull_String
	Archive          whereHelpernull_Int64
	JSON             whereHelpernull_String
	Quantity         whereHelpernull_String
}{
	ID:               whereHelperint64{field: "\"order_mark_utilisation\".\"id\""},
	IDOrderMarkCodes: whereHelpernull_Int64{field: "\"order_mark_utilisation\".\"id_order_mark_codes\""},
	CreateDate:       whereHelpernull_String{field: "\"order_mark_utilisation\".\"create_date\""},
	ProductionDate:   whereHelpernull_String{field: "\"order_mark_utilisation\".\"production_date\""},
	ExpirationDate:   whereHelpernull_String{field: "\"order_mark_utilisation\".\"expiration_date\""},
	UsageType:        whereHelpernull_String{field: "\"order_mark_utilisation\".\"usage_type\""},
	Inn:              whereHelpernull_String{field: "\"order_mark_utilisation\".\"inn\""},
	KPP:              whereHelpernull_String{field: "\"order_mark_utilisation\".\"kpp\""},
	Version:          whereHelpernull_String{field: "\"order_mark_utilisation\".\"version\""},
	State:            whereHelpernull_String{field: "\"order_mark_utilisation\".\"state\""},
	Status:           whereHelpernull_String{field: "\"order_mark_utilisation\".\"status\""},
	ReportID:         whereHelpernull_String{field: "\"order_mark_utilisation\".\"report_id\""},
	Archive:          whereHelpernull_Int64{field: "\"order_mark_utilisation\".\"archive\""},
	JSON:             whereHelpernull_String{field: "\"order_mark_utilisation\".\"json\""},
	Quantity:         whereHelpernull_String{field: "\"order_mark_utilisation\".\"quantity\""},
}

// OrderMarkUtilisationRels is where relationship names are stored.
var OrderMarkUtilisationRels = struct {
}{}

// orderMarkUtilisationR is where relationships are stored.
type orderMarkUtilisationR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkUtilisationR) NewStruct() *orderMarkUtilisationR {
	return &orderMarkUtilisationR{}
}

// orderMarkUtilisationL is where Load methods for each relationship are stored.
type orderMarkUtilisationL struct{}

var (
	orderMarkUtilisationAllColumns            = []string{"id", "id_order_mark_codes", "create_date", "production_date", "expiration_date", "usage_type", "inn", "kpp", "version", "state", "status", "report_id", "archive", "json", "quantity"}
	orderMarkUtilisationColumnsWithoutDefault = []string{}
	orderMarkUtilisationColumnsWithDefault    = []string{"id", "id_order_mark_codes", "create_date", "production_date", "expiration_date", "usage_type", "inn", "kpp", "version", "state", "status", "report_id", "archive", "json", "quantity"}
	orderMarkUtilisationPrimaryKeyColumns     = []string{"id"}
	orderMarkUtilisationGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkUtilisationSlice is an alias for a slice of pointers to OrderMarkUtilisation.
	// This should almost always be used instead of []OrderMarkUtilisation.
	OrderMarkUtilisationSlice []*OrderMarkUtilisation
	// OrderMarkUtilisationHook is the signature for custom OrderMarkUtilisation hook methods
	OrderMarkUtilisationHook func(context.Context, boil.ContextExecutor, *OrderMarkUtilisation) error

	orderMarkUtilisationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkUtilisationType                 = reflect.TypeOf(&OrderMarkUtilisation{})
	orderMarkUtilisationMapping              = queries.MakeStructMapping(orderMarkUtilisationType)
	orderMarkUtilisationPrimaryKeyMapping, _ = queries.BindMapping(orderMarkUtilisationType, orderMarkUtilisationMapping, orderMarkUtilisationPrimaryKeyColumns)
	orderMarkUtilisationInsertCacheMut       sync.RWMutex
	orderMarkUtilisationInsertCache          = make(map[string]insertCache)
	orderMarkUtilisationUpdateCacheMut       sync.RWMutex
	orderMarkUtilisationUpdateCache          = make(map[string]updateCache)
	orderMarkUtilisationUpsertCacheMut       sync.RWMutex
	orderMarkUtilisationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkUtilisationAfterSelectMu sync.Mutex
var orderMarkUtilisationAfterSelectHooks []OrderMarkUtilisationHook

var orderMarkUtilisationBeforeInsertMu sync.Mutex
var orderMarkUtilisationBeforeInsertHooks []OrderMarkUtilisationHook
var orderMarkUtilisationAfterInsertMu sync.Mutex
var orderMarkUtilisationAfterInsertHooks []OrderMarkUtilisationHook

var orderMarkUtilisationBeforeUpdateMu sync.Mutex
var orderMarkUtilisationBeforeUpdateHooks []OrderMarkUtilisationHook
var orderMarkUtilisationAfterUpdateMu sync.Mutex
var orderMarkUtilisationAfterUpdateHooks []OrderMarkUtilisationHook

var orderMarkUtilisationBeforeDeleteMu sync.Mutex
var orderMarkUtilisationBeforeDeleteHooks []OrderMarkUtilisationHook
var orderMarkUtilisationAfterDeleteMu sync.Mutex
var orderMarkUtilisationAfterDeleteHooks []OrderMarkUtilisationHook

var orderMarkUtilisationBeforeUpsertMu sync.Mutex
var orderMarkUtilisationBeforeUpsertHooks []OrderMarkUtilisationHook
var orderMarkUtilisationAfterUpsertMu sync.Mutex
var orderMarkUtilisationAfterUpsertHooks []OrderMarkUtilisationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkUtilisation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkUtilisation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkUtilisation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkUtilisation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkUtilisation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkUtilisation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkUtilisation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkUtilisation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkUtilisation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkUtilisationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkUtilisationHook registers your hook function for all future operations.
func AddOrderMarkUtilisationHook(hookPoint boil.HookPoint, orderMarkUtilisationHook OrderMarkUtilisationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkUtilisationAfterSelectMu.Lock()
		orderMarkUtilisationAfterSelectHooks = append(orderMarkUtilisationAfterSelectHooks, orderMarkUtilisationHook)
		orderMarkUtilisationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkUtilisationBeforeInsertMu.Lock()
		orderMarkUtilisationBeforeInsertHooks = append(orderMarkUtilisationBeforeInsertHooks, orderMarkUtilisationHook)
		orderMarkUtilisationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkUtilisationAfterInsertMu.Lock()
		orderMarkUtilisationAfterInsertHooks = append(orderMarkUtilisationAfterInsertHooks, orderMarkUtilisationHook)
		orderMarkUtilisationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkUtilisationBeforeUpdateMu.Lock()
		orderMarkUtilisationBeforeUpdateHooks = append(orderMarkUtilisationBeforeUpdateHooks, orderMarkUtilisationHook)
		orderMarkUtilisationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkUtilisationAfterUpdateMu.Lock()
		orderMarkUtilisationAfterUpdateHooks = append(orderMarkUtilisationAfterUpdateHooks, orderMarkUtilisationHook)
		orderMarkUtilisationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkUtilisationBeforeDeleteMu.Lock()
		orderMarkUtilisationBeforeDeleteHooks = append(orderMarkUtilisationBeforeDeleteHooks, orderMarkUtilisationHook)
		orderMarkUtilisationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkUtilisationAfterDeleteMu.Lock()
		orderMarkUtilisationAfterDeleteHooks = append(orderMarkUtilisationAfterDeleteHooks, orderMarkUtilisationHook)
		orderMarkUtilisationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkUtilisationBeforeUpsertMu.Lock()
		orderMarkUtilisationBeforeUpsertHooks = append(orderMarkUtilisationBeforeUpsertHooks, orderMarkUtilisationHook)
		orderMarkUtilisationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkUtilisationAfterUpsertMu.Lock()
		orderMarkUtilisationAfterUpsertHooks = append(orderMarkUtilisationAfterUpsertHooks, orderMarkUtilisationHook)
		orderMarkUtilisationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkUtilisation record from the query using the global executor.
func (q orderMarkUtilisationQuery) OneG(ctx context.Context) (*OrderMarkUtilisation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkUtilisation record from the query.
func (q orderMarkUtilisationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkUtilisation, error) {
	o := &OrderMarkUtilisation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_utilisation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkUtilisation records from the query using the global executor.
func (q orderMarkUtilisationQuery) AllG(ctx context.Context) (OrderMarkUtilisationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkUtilisation records from the query.
func (q orderMarkUtilisationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkUtilisationSlice, error) {
	var o []*OrderMarkUtilisation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkUtilisation slice")
	}

	if len(orderMarkUtilisationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkUtilisation records in the query using the global executor
func (q orderMarkUtilisationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkUtilisation records in the query.
func (q orderMarkUtilisationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_utilisation rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkUtilisationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkUtilisationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_utilisation exists")
	}

	return count > 0, nil
}

// OrderMarkUtilisations retrieves all the records using an executor.
func OrderMarkUtilisations(mods ...qm.QueryMod) orderMarkUtilisationQuery {
	mods = append(mods, qm.From("\"order_mark_utilisation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_mark_utilisation\".*"})
	}

	return orderMarkUtilisationQuery{q}
}

// FindOrderMarkUtilisationG retrieves a single record by ID.
func FindOrderMarkUtilisationG(ctx context.Context, iD int64, selectCols ...string) (*OrderMarkUtilisation, error) {
	return FindOrderMarkUtilisation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkUtilisation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkUtilisation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderMarkUtilisation, error) {
	orderMarkUtilisationObj := &OrderMarkUtilisation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_mark_utilisation\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkUtilisationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_utilisation")
	}

	if err = orderMarkUtilisationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkUtilisationObj, err
	}

	return orderMarkUtilisationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkUtilisation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkUtilisation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_utilisation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkUtilisationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkUtilisationInsertCacheMut.RLock()
	cache, cached := orderMarkUtilisationInsertCache[key]
	orderMarkUtilisationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkUtilisationAllColumns,
			orderMarkUtilisationColumnsWithDefault,
			orderMarkUtilisationColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkUtilisationGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkUtilisationType, orderMarkUtilisationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkUtilisationType, orderMarkUtilisationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_mark_utilisation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_mark_utilisation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_utilisation")
	}

	if !cached {
		orderMarkUtilisationInsertCacheMut.Lock()
		orderMarkUtilisationInsertCache[key] = cache
		orderMarkUtilisationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkUtilisation record using the global executor.
// See Update for more documentation.
func (o *OrderMarkUtilisation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkUtilisation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkUtilisation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkUtilisationUpdateCacheMut.RLock()
	cache, cached := orderMarkUtilisationUpdateCache[key]
	orderMarkUtilisationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkUtilisationAllColumns,
			orderMarkUtilisationPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkUtilisationGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_utilisation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_mark_utilisation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderMarkUtilisationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkUtilisationType, orderMarkUtilisationMapping, append(wl, orderMarkUtilisationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_utilisation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_utilisation")
	}

	if !cached {
		orderMarkUtilisationUpdateCacheMut.Lock()
		orderMarkUtilisationUpdateCache[key] = cache
		orderMarkUtilisationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkUtilisationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkUtilisationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_utilisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_utilisation")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkUtilisationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkUtilisationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkUtilisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_mark_utilisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkUtilisationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkUtilisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkUtilisation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkUtilisation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderMarkUtilisation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_utilisation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkUtilisationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkUtilisationUpsertCacheMut.RLock()
	cache, cached := orderMarkUtilisationUpsertCache[key]
	orderMarkUtilisationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderMarkUtilisationAllColumns,
			orderMarkUtilisationColumnsWithDefault,
			orderMarkUtilisationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderMarkUtilisationAllColumns,
			orderMarkUtilisationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_utilisation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderMarkUtilisationPrimaryKeyColumns))
			copy(conflict, orderMarkUtilisationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_mark_utilisation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderMarkUtilisationType, orderMarkUtilisationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkUtilisationType, orderMarkUtilisationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_utilisation")
	}

	if !cached {
		orderMarkUtilisationUpsertCacheMut.Lock()
		orderMarkUtilisationUpsertCache[key] = cache
		orderMarkUtilisationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkUtilisation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkUtilisation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkUtilisation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkUtilisation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkUtilisation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkUtilisationPrimaryKeyMapping)
	sql := "DELETE FROM \"order_mark_utilisation\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_utilisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_utilisation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkUtilisationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkUtilisationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkUtilisationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_utilisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_utilisation")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkUtilisationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkUtilisationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkUtilisationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkUtilisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_mark_utilisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkUtilisationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkUtilisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_utilisation")
	}

	if len(orderMarkUtilisationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkUtilisation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkUtilisation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkUtilisation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkUtilisation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkUtilisationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkUtilisationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkUtilisationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkUtilisationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkUtilisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_mark_utilisation\".* FROM \"order_mark_utilisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkUtilisationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkUtilisationSlice")
	}

	*o = slice

	return nil
}

// OrderMarkUtilisationExistsG checks if the OrderMarkUtilisation row exists.
func OrderMarkUtilisationExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrderMarkUtilisationExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkUtilisationExists checks if the OrderMarkUtilisation row exists.
func OrderMarkUtilisationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_mark_utilisation\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_utilisation exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkUtilisation row exists.
func (o *OrderMarkUtilisation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkUtilisationExists(ctx, exec, o.ID)
}
