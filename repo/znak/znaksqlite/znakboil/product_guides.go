// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductGuide is an object representing the database table.
type ProductGuide struct {
	ID                 int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductName        null.String `boil:"product_name" json:"product_name,omitempty" toml:"product_name" yaml:"product_name,omitempty"`
	ProductCapacity    null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcCode     null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductGtin        null.String `boil:"product_gtin" json:"product_gtin,omitempty" toml:"product_gtin" yaml:"product_gtin,omitempty"`
	ProductTemplate    null.String `boil:"product_template" json:"product_template,omitempty" toml:"product_template" yaml:"product_template,omitempty"`
	ProductShelfLife   null.String `boil:"product_shelf_life" json:"product_shelf_life,omitempty" toml:"product_shelf_life" yaml:"product_shelf_life,omitempty"`
	DeclarationNumber  null.String `boil:"declaration_number" json:"declaration_number,omitempty" toml:"declaration_number" yaml:"declaration_number,omitempty"`
	DeclarationDate    null.String `boil:"declaration_date" json:"declaration_date,omitempty" toml:"declaration_date" yaml:"declaration_date,omitempty"`
	ProductRegID       null.String `boil:"product_reg_id" json:"product_reg_id,omitempty" toml:"product_reg_id" yaml:"product_reg_id,omitempty"`
	CertificateNumber  null.String `boil:"certificate_number" json:"certificate_number,omitempty" toml:"certificate_number" yaml:"certificate_number,omitempty"`
	CertificateDate    null.String `boil:"certificate_date" json:"certificate_date,omitempty" toml:"certificate_date" yaml:"certificate_date,omitempty"`
	StateNumber        null.String `boil:"state_number" json:"state_number,omitempty" toml:"state_number" yaml:"state_number,omitempty"`
	StateDate          null.String `boil:"state_date" json:"state_date,omitempty" toml:"state_date" yaml:"state_date,omitempty"`
	TNVed              null.String `boil:"tn_ved" json:"tn_ved,omitempty" toml:"tn_ved" yaml:"tn_ved,omitempty"`
	WaterLicenseNumber null.String `boil:"water_license_number" json:"water_license_number,omitempty" toml:"water_license_number" yaml:"water_license_number,omitempty"`
	WaterLicenseDate   null.String `boil:"water_license_date" json:"water_license_date,omitempty" toml:"water_license_date" yaml:"water_license_date,omitempty"`

	R *productGuideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productGuideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductGuideColumns = struct {
	ID                 string
	ProductName        string
	ProductCapacity    string
	ProductAlcCode     string
	ProductGtin        string
	ProductTemplate    string
	ProductShelfLife   string
	DeclarationNumber  string
	DeclarationDate    string
	ProductRegID       string
	CertificateNumber  string
	CertificateDate    string
	StateNumber        string
	StateDate          string
	TNVed              string
	WaterLicenseNumber string
	WaterLicenseDate   string
}{
	ID:                 "id",
	ProductName:        "product_name",
	ProductCapacity:    "product_capacity",
	ProductAlcCode:     "product_alc_code",
	ProductGtin:        "product_gtin",
	ProductTemplate:    "product_template",
	ProductShelfLife:   "product_shelf_life",
	DeclarationNumber:  "declaration_number",
	DeclarationDate:    "declaration_date",
	ProductRegID:       "product_reg_id",
	CertificateNumber:  "certificate_number",
	CertificateDate:    "certificate_date",
	StateNumber:        "state_number",
	StateDate:          "state_date",
	TNVed:              "tn_ved",
	WaterLicenseNumber: "water_license_number",
	WaterLicenseDate:   "water_license_date",
}

var ProductGuideTableColumns = struct {
	ID                 string
	ProductName        string
	ProductCapacity    string
	ProductAlcCode     string
	ProductGtin        string
	ProductTemplate    string
	ProductShelfLife   string
	DeclarationNumber  string
	DeclarationDate    string
	ProductRegID       string
	CertificateNumber  string
	CertificateDate    string
	StateNumber        string
	StateDate          string
	TNVed              string
	WaterLicenseNumber string
	WaterLicenseDate   string
}{
	ID:                 "product_guides.id",
	ProductName:        "product_guides.product_name",
	ProductCapacity:    "product_guides.product_capacity",
	ProductAlcCode:     "product_guides.product_alc_code",
	ProductGtin:        "product_guides.product_gtin",
	ProductTemplate:    "product_guides.product_template",
	ProductShelfLife:   "product_guides.product_shelf_life",
	DeclarationNumber:  "product_guides.declaration_number",
	DeclarationDate:    "product_guides.declaration_date",
	ProductRegID:       "product_guides.product_reg_id",
	CertificateNumber:  "product_guides.certificate_number",
	CertificateDate:    "product_guides.certificate_date",
	StateNumber:        "product_guides.state_number",
	StateDate:          "product_guides.state_date",
	TNVed:              "product_guides.tn_ved",
	WaterLicenseNumber: "product_guides.water_license_number",
	WaterLicenseDate:   "product_guides.water_license_date",
}

// Generated where

var ProductGuideWhere = struct {
	ID                 whereHelperint64
	ProductName        whereHelpernull_String
	ProductCapacity    whereHelpernull_String
	ProductAlcCode     whereHelpernull_String
	ProductGtin        whereHelpernull_String
	ProductTemplate    whereHelpernull_String
	ProductShelfLife   whereHelpernull_String
	DeclarationNumber  whereHelpernull_String
	DeclarationDate    whereHelpernull_String
	ProductRegID       whereHelpernull_String
	CertificateNumber  whereHelpernull_String
	CertificateDate    whereHelpernull_String
	StateNumber        whereHelpernull_String
	StateDate          whereHelpernull_String
	TNVed              whereHelpernull_String
	WaterLicenseNumber whereHelpernull_String
	WaterLicenseDate   whereHelpernull_String
}{
	ID:                 whereHelperint64{field: "\"product_guides\".\"id\""},
	ProductName:        whereHelpernull_String{field: "\"product_guides\".\"product_name\""},
	ProductCapacity:    whereHelpernull_String{field: "\"product_guides\".\"product_capacity\""},
	ProductAlcCode:     whereHelpernull_String{field: "\"product_guides\".\"product_alc_code\""},
	ProductGtin:        whereHelpernull_String{field: "\"product_guides\".\"product_gtin\""},
	ProductTemplate:    whereHelpernull_String{field: "\"product_guides\".\"product_template\""},
	ProductShelfLife:   whereHelpernull_String{field: "\"product_guides\".\"product_shelf_life\""},
	DeclarationNumber:  whereHelpernull_String{field: "\"product_guides\".\"declaration_number\""},
	DeclarationDate:    whereHelpernull_String{field: "\"product_guides\".\"declaration_date\""},
	ProductRegID:       whereHelpernull_String{field: "\"product_guides\".\"product_reg_id\""},
	CertificateNumber:  whereHelpernull_String{field: "\"product_guides\".\"certificate_number\""},
	CertificateDate:    whereHelpernull_String{field: "\"product_guides\".\"certificate_date\""},
	StateNumber:        whereHelpernull_String{field: "\"product_guides\".\"state_number\""},
	StateDate:          whereHelpernull_String{field: "\"product_guides\".\"state_date\""},
	TNVed:              whereHelpernull_String{field: "\"product_guides\".\"tn_ved\""},
	WaterLicenseNumber: whereHelpernull_String{field: "\"product_guides\".\"water_license_number\""},
	WaterLicenseDate:   whereHelpernull_String{field: "\"product_guides\".\"water_license_date\""},
}

// ProductGuideRels is where relationship names are stored.
var ProductGuideRels = struct {
}{}

// productGuideR is where relationships are stored.
type productGuideR struct {
}

// NewStruct creates a new relationship struct
func (*productGuideR) NewStruct() *productGuideR {
	return &productGuideR{}
}

// productGuideL is where Load methods for each relationship are stored.
type productGuideL struct{}

var (
	productGuideAllColumns            = []string{"id", "product_name", "product_capacity", "product_alc_code", "product_gtin", "product_template", "product_shelf_life", "declaration_number", "declaration_date", "product_reg_id", "certificate_number", "certificate_date", "state_number", "state_date", "tn_ved", "water_license_number", "water_license_date"}
	productGuideColumnsWithoutDefault = []string{}
	productGuideColumnsWithDefault    = []string{"id", "product_name", "product_capacity", "product_alc_code", "product_gtin", "product_template", "product_shelf_life", "declaration_number", "declaration_date", "product_reg_id", "certificate_number", "certificate_date", "state_number", "state_date", "tn_ved", "water_license_number", "water_license_date"}
	productGuidePrimaryKeyColumns     = []string{"id"}
	productGuideGeneratedColumns      = []string{"id"}
)

type (
	// ProductGuideSlice is an alias for a slice of pointers to ProductGuide.
	// This should almost always be used instead of []ProductGuide.
	ProductGuideSlice []*ProductGuide
	// ProductGuideHook is the signature for custom ProductGuide hook methods
	ProductGuideHook func(context.Context, boil.ContextExecutor, *ProductGuide) error

	productGuideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productGuideType                 = reflect.TypeOf(&ProductGuide{})
	productGuideMapping              = queries.MakeStructMapping(productGuideType)
	productGuidePrimaryKeyMapping, _ = queries.BindMapping(productGuideType, productGuideMapping, productGuidePrimaryKeyColumns)
	productGuideInsertCacheMut       sync.RWMutex
	productGuideInsertCache          = make(map[string]insertCache)
	productGuideUpdateCacheMut       sync.RWMutex
	productGuideUpdateCache          = make(map[string]updateCache)
	productGuideUpsertCacheMut       sync.RWMutex
	productGuideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productGuideAfterSelectMu sync.Mutex
var productGuideAfterSelectHooks []ProductGuideHook

var productGuideBeforeInsertMu sync.Mutex
var productGuideBeforeInsertHooks []ProductGuideHook
var productGuideAfterInsertMu sync.Mutex
var productGuideAfterInsertHooks []ProductGuideHook

var productGuideBeforeUpdateMu sync.Mutex
var productGuideBeforeUpdateHooks []ProductGuideHook
var productGuideAfterUpdateMu sync.Mutex
var productGuideAfterUpdateHooks []ProductGuideHook

var productGuideBeforeDeleteMu sync.Mutex
var productGuideBeforeDeleteHooks []ProductGuideHook
var productGuideAfterDeleteMu sync.Mutex
var productGuideAfterDeleteHooks []ProductGuideHook

var productGuideBeforeUpsertMu sync.Mutex
var productGuideBeforeUpsertHooks []ProductGuideHook
var productGuideAfterUpsertMu sync.Mutex
var productGuideAfterUpsertHooks []ProductGuideHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductGuide) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductGuide) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductGuide) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductGuide) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductGuide) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductGuide) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductGuide) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductGuide) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductGuide) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productGuideAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductGuideHook registers your hook function for all future operations.
func AddProductGuideHook(hookPoint boil.HookPoint, productGuideHook ProductGuideHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productGuideAfterSelectMu.Lock()
		productGuideAfterSelectHooks = append(productGuideAfterSelectHooks, productGuideHook)
		productGuideAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productGuideBeforeInsertMu.Lock()
		productGuideBeforeInsertHooks = append(productGuideBeforeInsertHooks, productGuideHook)
		productGuideBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productGuideAfterInsertMu.Lock()
		productGuideAfterInsertHooks = append(productGuideAfterInsertHooks, productGuideHook)
		productGuideAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productGuideBeforeUpdateMu.Lock()
		productGuideBeforeUpdateHooks = append(productGuideBeforeUpdateHooks, productGuideHook)
		productGuideBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productGuideAfterUpdateMu.Lock()
		productGuideAfterUpdateHooks = append(productGuideAfterUpdateHooks, productGuideHook)
		productGuideAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productGuideBeforeDeleteMu.Lock()
		productGuideBeforeDeleteHooks = append(productGuideBeforeDeleteHooks, productGuideHook)
		productGuideBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productGuideAfterDeleteMu.Lock()
		productGuideAfterDeleteHooks = append(productGuideAfterDeleteHooks, productGuideHook)
		productGuideAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productGuideBeforeUpsertMu.Lock()
		productGuideBeforeUpsertHooks = append(productGuideBeforeUpsertHooks, productGuideHook)
		productGuideBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productGuideAfterUpsertMu.Lock()
		productGuideAfterUpsertHooks = append(productGuideAfterUpsertHooks, productGuideHook)
		productGuideAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productGuide record from the query using the global executor.
func (q productGuideQuery) OneG(ctx context.Context) (*ProductGuide, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productGuide record from the query.
func (q productGuideQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductGuide, error) {
	o := &ProductGuide{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for product_guides")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductGuide records from the query using the global executor.
func (q productGuideQuery) AllG(ctx context.Context) (ProductGuideSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductGuide records from the query.
func (q productGuideQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductGuideSlice, error) {
	var o []*ProductGuide

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to ProductGuide slice")
	}

	if len(productGuideAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductGuide records in the query using the global executor
func (q productGuideQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductGuide records in the query.
func (q productGuideQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count product_guides rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productGuideQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productGuideQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if product_guides exists")
	}

	return count > 0, nil
}

// ProductGuides retrieves all the records using an executor.
func ProductGuides(mods ...qm.QueryMod) productGuideQuery {
	mods = append(mods, qm.From("\"product_guides\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_guides\".*"})
	}

	return productGuideQuery{q}
}

// FindProductGuideG retrieves a single record by ID.
func FindProductGuideG(ctx context.Context, iD int64, selectCols ...string) (*ProductGuide, error) {
	return FindProductGuide(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductGuide retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductGuide(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductGuide, error) {
	productGuideObj := &ProductGuide{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_guides\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productGuideObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from product_guides")
	}

	if err = productGuideObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productGuideObj, err
	}

	return productGuideObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductGuide) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductGuide) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_guides provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productGuideColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productGuideInsertCacheMut.RLock()
	cache, cached := productGuideInsertCache[key]
	productGuideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productGuideAllColumns,
			productGuideColumnsWithDefault,
			productGuideColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productGuideGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productGuideType, productGuideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productGuideType, productGuideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_guides\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_guides\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into product_guides")
	}

	if !cached {
		productGuideInsertCacheMut.Lock()
		productGuideInsertCache[key] = cache
		productGuideInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductGuide record using the global executor.
// See Update for more documentation.
func (o *ProductGuide) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductGuide.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductGuide) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productGuideUpdateCacheMut.RLock()
	cache, cached := productGuideUpdateCache[key]
	productGuideUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productGuideAllColumns,
			productGuidePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productGuideGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update product_guides, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_guides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productGuidePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productGuideType, productGuideMapping, append(wl, productGuidePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update product_guides row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for product_guides")
	}

	if !cached {
		productGuideUpdateCacheMut.Lock()
		productGuideUpdateCache[key] = cache
		productGuideUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productGuideQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productGuideQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for product_guides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for product_guides")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductGuideSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductGuideSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productGuidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_guides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productGuidePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in productGuide slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all productGuide")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductGuide) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductGuide) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_guides provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productGuideColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productGuideUpsertCacheMut.RLock()
	cache, cached := productGuideUpsertCache[key]
	productGuideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productGuideAllColumns,
			productGuideColumnsWithDefault,
			productGuideColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productGuideAllColumns,
			productGuidePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert product_guides, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productGuidePrimaryKeyColumns))
			copy(conflict, productGuidePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"product_guides\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productGuideType, productGuideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productGuideType, productGuideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert product_guides")
	}

	if !cached {
		productGuideUpsertCacheMut.Lock()
		productGuideUpsertCache[key] = cache
		productGuideUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductGuide record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductGuide) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductGuide record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductGuide) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no ProductGuide provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productGuidePrimaryKeyMapping)
	sql := "DELETE FROM \"product_guides\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from product_guides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for product_guides")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productGuideQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productGuideQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no productGuideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from product_guides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_guides")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductGuideSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductGuideSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productGuideBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productGuidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_guides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productGuidePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from productGuide slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_guides")
	}

	if len(productGuideAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductGuide) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no ProductGuide provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductGuide) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductGuide(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductGuideSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty ProductGuideSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductGuideSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductGuideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productGuidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_guides\".* FROM \"product_guides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productGuidePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in ProductGuideSlice")
	}

	*o = slice

	return nil
}

// ProductGuideExistsG checks if the ProductGuide row exists.
func ProductGuideExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductGuideExists(ctx, boil.GetContextDB(), iD)
}

// ProductGuideExists checks if the ProductGuide row exists.
func ProductGuideExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_guides\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if product_guides exists")
	}

	return exists, nil
}

// Exists checks if the ProductGuide row exists.
func (o *ProductGuide) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductGuideExists(ctx, exec, o.ID)
}
