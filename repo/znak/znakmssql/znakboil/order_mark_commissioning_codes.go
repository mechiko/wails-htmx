// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkCommissioningCode is an object representing the database table.
type OrderMarkCommissioningCode struct {
	ID                       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDOrderMarkCommissioning null.Int    `boil:"id_order_mark_commissioning" json:"id_order_mark_commissioning,omitempty" toml:"id_order_mark_commissioning" yaml:"id_order_mark_commissioning,omitempty"`
	IDOrderMarkUtilisation   null.Int    `boil:"id_order_mark_utilisation" json:"id_order_mark_utilisation,omitempty" toml:"id_order_mark_utilisation" yaml:"id_order_mark_utilisation,omitempty"`
	IDOrderMarkCodes         null.Int    `boil:"id_order_mark_codes" json:"id_order_mark_codes,omitempty" toml:"id_order_mark_codes" yaml:"id_order_mark_codes,omitempty"`
	SerialNumber             null.String `boil:"serial_number" json:"serial_number,omitempty" toml:"serial_number" yaml:"serial_number,omitempty"`
	Code                     null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Tnved                    null.String `boil:"tnved" json:"tnved,omitempty" toml:"tnved" yaml:"tnved,omitempty"`
	Price                    null.String `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	NDS                      null.String `boil:"nds" json:"nds,omitempty" toml:"nds" yaml:"nds,omitempty"`
	Excise                   null.String `boil:"excise" json:"excise,omitempty" toml:"excise" yaml:"excise,omitempty"`
	Status                   null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ProductName              null.String `boil:"product_name" json:"product_name,omitempty" toml:"product_name" yaml:"product_name,omitempty"`
	ProductGtin              null.String `boil:"product_gtin" json:"product_gtin,omitempty" toml:"product_gtin" yaml:"product_gtin,omitempty"`
	ProductDeclarationNumber null.String `boil:"product_declaration_number" json:"product_declaration_number,omitempty" toml:"product_declaration_number" yaml:"product_declaration_number,omitempty"`
	ProductDeclarationDate   null.String `boil:"product_declaration_date" json:"product_declaration_date,omitempty" toml:"product_declaration_date" yaml:"product_declaration_date,omitempty"`
	ProductCertificateNumber null.String `boil:"product_certificate_number" json:"product_certificate_number,omitempty" toml:"product_certificate_number" yaml:"product_certificate_number,omitempty"`
	ProductCertificateDate   null.String `boil:"product_certificate_date" json:"product_certificate_date,omitempty" toml:"product_certificate_date" yaml:"product_certificate_date,omitempty"`
	ProductStateNumber       null.String `boil:"product_state_number" json:"product_state_number,omitempty" toml:"product_state_number" yaml:"product_state_number,omitempty"`
	ProductStateDate         null.String `boil:"product_state_date" json:"product_state_date,omitempty" toml:"product_state_date" yaml:"product_state_date,omitempty"`
	WaterLicenseNumber       null.String `boil:"water_license_number" json:"water_license_number,omitempty" toml:"water_license_number" yaml:"water_license_number,omitempty"`
	WaterLicenseDate         null.String `boil:"water_license_date" json:"water_license_date,omitempty" toml:"water_license_date" yaml:"water_license_date,omitempty"`
	WaterWellNumber          null.String `boil:"water_well_number" json:"water_well_number,omitempty" toml:"water_well_number" yaml:"water_well_number,omitempty"`
	ReportDate               null.String `boil:"report_date" json:"report_date,omitempty" toml:"report_date" yaml:"report_date,omitempty"`
	ReportID                 null.String `boil:"report_id" json:"report_id,omitempty" toml:"report_id" yaml:"report_id,omitempty"`

	R *orderMarkCommissioningCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkCommissioningCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkCommissioningCodeColumns = struct {
	ID                       string
	IDOrderMarkCommissioning string
	IDOrderMarkUtilisation   string
	IDOrderMarkCodes         string
	SerialNumber             string
	Code                     string
	Tnved                    string
	Price                    string
	NDS                      string
	Excise                   string
	Status                   string
	ProductName              string
	ProductGtin              string
	ProductDeclarationNumber string
	ProductDeclarationDate   string
	ProductCertificateNumber string
	ProductCertificateDate   string
	ProductStateNumber       string
	ProductStateDate         string
	WaterLicenseNumber       string
	WaterLicenseDate         string
	WaterWellNumber          string
	ReportDate               string
	ReportID                 string
}{
	ID:                       "id",
	IDOrderMarkCommissioning: "id_order_mark_commissioning",
	IDOrderMarkUtilisation:   "id_order_mark_utilisation",
	IDOrderMarkCodes:         "id_order_mark_codes",
	SerialNumber:             "serial_number",
	Code:                     "code",
	Tnved:                    "tnved",
	Price:                    "price",
	NDS:                      "nds",
	Excise:                   "excise",
	Status:                   "status",
	ProductName:              "product_name",
	ProductGtin:              "product_gtin",
	ProductDeclarationNumber: "product_declaration_number",
	ProductDeclarationDate:   "product_declaration_date",
	ProductCertificateNumber: "product_certificate_number",
	ProductCertificateDate:   "product_certificate_date",
	ProductStateNumber:       "product_state_number",
	ProductStateDate:         "product_state_date",
	WaterLicenseNumber:       "water_license_number",
	WaterLicenseDate:         "water_license_date",
	WaterWellNumber:          "water_well_number",
	ReportDate:               "report_date",
	ReportID:                 "report_id",
}

var OrderMarkCommissioningCodeTableColumns = struct {
	ID                       string
	IDOrderMarkCommissioning string
	IDOrderMarkUtilisation   string
	IDOrderMarkCodes         string
	SerialNumber             string
	Code                     string
	Tnved                    string
	Price                    string
	NDS                      string
	Excise                   string
	Status                   string
	ProductName              string
	ProductGtin              string
	ProductDeclarationNumber string
	ProductDeclarationDate   string
	ProductCertificateNumber string
	ProductCertificateDate   string
	ProductStateNumber       string
	ProductStateDate         string
	WaterLicenseNumber       string
	WaterLicenseDate         string
	WaterWellNumber          string
	ReportDate               string
	ReportID                 string
}{
	ID:                       "order_mark_commissioning_codes.id",
	IDOrderMarkCommissioning: "order_mark_commissioning_codes.id_order_mark_commissioning",
	IDOrderMarkUtilisation:   "order_mark_commissioning_codes.id_order_mark_utilisation",
	IDOrderMarkCodes:         "order_mark_commissioning_codes.id_order_mark_codes",
	SerialNumber:             "order_mark_commissioning_codes.serial_number",
	Code:                     "order_mark_commissioning_codes.code",
	Tnved:                    "order_mark_commissioning_codes.tnved",
	Price:                    "order_mark_commissioning_codes.price",
	NDS:                      "order_mark_commissioning_codes.nds",
	Excise:                   "order_mark_commissioning_codes.excise",
	Status:                   "order_mark_commissioning_codes.status",
	ProductName:              "order_mark_commissioning_codes.product_name",
	ProductGtin:              "order_mark_commissioning_codes.product_gtin",
	ProductDeclarationNumber: "order_mark_commissioning_codes.product_declaration_number",
	ProductDeclarationDate:   "order_mark_commissioning_codes.product_declaration_date",
	ProductCertificateNumber: "order_mark_commissioning_codes.product_certificate_number",
	ProductCertificateDate:   "order_mark_commissioning_codes.product_certificate_date",
	ProductStateNumber:       "order_mark_commissioning_codes.product_state_number",
	ProductStateDate:         "order_mark_commissioning_codes.product_state_date",
	WaterLicenseNumber:       "order_mark_commissioning_codes.water_license_number",
	WaterLicenseDate:         "order_mark_commissioning_codes.water_license_date",
	WaterWellNumber:          "order_mark_commissioning_codes.water_well_number",
	ReportDate:               "order_mark_commissioning_codes.report_date",
	ReportID:                 "order_mark_commissioning_codes.report_id",
}

// Generated where

var OrderMarkCommissioningCodeWhere = struct {
	ID                       whereHelperint
	IDOrderMarkCommissioning whereHelpernull_Int
	IDOrderMarkUtilisation   whereHelpernull_Int
	IDOrderMarkCodes         whereHelpernull_Int
	SerialNumber             whereHelpernull_String
	Code                     whereHelpernull_String
	Tnved                    whereHelpernull_String
	Price                    whereHelpernull_String
	NDS                      whereHelpernull_String
	Excise                   whereHelpernull_String
	Status                   whereHelpernull_String
	ProductName              whereHelpernull_String
	ProductGtin              whereHelpernull_String
	ProductDeclarationNumber whereHelpernull_String
	ProductDeclarationDate   whereHelpernull_String
	ProductCertificateNumber whereHelpernull_String
	ProductCertificateDate   whereHelpernull_String
	ProductStateNumber       whereHelpernull_String
	ProductStateDate         whereHelpernull_String
	WaterLicenseNumber       whereHelpernull_String
	WaterLicenseDate         whereHelpernull_String
	WaterWellNumber          whereHelpernull_String
	ReportDate               whereHelpernull_String
	ReportID                 whereHelpernull_String
}{
	ID:                       whereHelperint{field: "[dbo].[order_mark_commissioning_codes].[id]"},
	IDOrderMarkCommissioning: whereHelpernull_Int{field: "[dbo].[order_mark_commissioning_codes].[id_order_mark_commissioning]"},
	IDOrderMarkUtilisation:   whereHelpernull_Int{field: "[dbo].[order_mark_commissioning_codes].[id_order_mark_utilisation]"},
	IDOrderMarkCodes:         whereHelpernull_Int{field: "[dbo].[order_mark_commissioning_codes].[id_order_mark_codes]"},
	SerialNumber:             whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[serial_number]"},
	Code:                     whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[code]"},
	Tnved:                    whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[tnved]"},
	Price:                    whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[price]"},
	NDS:                      whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[nds]"},
	Excise:                   whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[excise]"},
	Status:                   whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[status]"},
	ProductName:              whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_name]"},
	ProductGtin:              whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_gtin]"},
	ProductDeclarationNumber: whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_declaration_number]"},
	ProductDeclarationDate:   whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_declaration_date]"},
	ProductCertificateNumber: whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_certificate_number]"},
	ProductCertificateDate:   whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_certificate_date]"},
	ProductStateNumber:       whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_state_number]"},
	ProductStateDate:         whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[product_state_date]"},
	WaterLicenseNumber:       whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[water_license_number]"},
	WaterLicenseDate:         whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[water_license_date]"},
	WaterWellNumber:          whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[water_well_number]"},
	ReportDate:               whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[report_date]"},
	ReportID:                 whereHelpernull_String{field: "[dbo].[order_mark_commissioning_codes].[report_id]"},
}

// OrderMarkCommissioningCodeRels is where relationship names are stored.
var OrderMarkCommissioningCodeRels = struct {
}{}

// orderMarkCommissioningCodeR is where relationships are stored.
type orderMarkCommissioningCodeR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkCommissioningCodeR) NewStruct() *orderMarkCommissioningCodeR {
	return &orderMarkCommissioningCodeR{}
}

// orderMarkCommissioningCodeL is where Load methods for each relationship are stored.
type orderMarkCommissioningCodeL struct{}

var (
	orderMarkCommissioningCodeAllColumns            = []string{"id", "id_order_mark_commissioning", "id_order_mark_utilisation", "id_order_mark_codes", "serial_number", "code", "tnved", "price", "nds", "excise", "status", "product_name", "product_gtin", "product_declaration_number", "product_declaration_date", "product_certificate_number", "product_certificate_date", "product_state_number", "product_state_date", "water_license_number", "water_license_date", "water_well_number", "report_date", "report_id"}
	orderMarkCommissioningCodeColumnsWithoutDefault = []string{"id_order_mark_commissioning", "id_order_mark_utilisation", "id_order_mark_codes", "serial_number", "code", "tnved", "price", "nds", "excise", "status", "product_name", "product_gtin", "product_declaration_number", "product_declaration_date", "product_certificate_number", "product_certificate_date", "product_state_number", "product_state_date", "water_license_number", "water_license_date", "water_well_number", "report_date", "report_id"}
	orderMarkCommissioningCodeColumnsWithDefault    = []string{"id"}
	orderMarkCommissioningCodePrimaryKeyColumns     = []string{"id"}
	orderMarkCommissioningCodeGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkCommissioningCodeSlice is an alias for a slice of pointers to OrderMarkCommissioningCode.
	// This should almost always be used instead of []OrderMarkCommissioningCode.
	OrderMarkCommissioningCodeSlice []*OrderMarkCommissioningCode
	// OrderMarkCommissioningCodeHook is the signature for custom OrderMarkCommissioningCode hook methods
	OrderMarkCommissioningCodeHook func(context.Context, boil.ContextExecutor, *OrderMarkCommissioningCode) error

	orderMarkCommissioningCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkCommissioningCodeType                 = reflect.TypeOf(&OrderMarkCommissioningCode{})
	orderMarkCommissioningCodeMapping              = queries.MakeStructMapping(orderMarkCommissioningCodeType)
	orderMarkCommissioningCodePrimaryKeyMapping, _ = queries.BindMapping(orderMarkCommissioningCodeType, orderMarkCommissioningCodeMapping, orderMarkCommissioningCodePrimaryKeyColumns)
	orderMarkCommissioningCodeInsertCacheMut       sync.RWMutex
	orderMarkCommissioningCodeInsertCache          = make(map[string]insertCache)
	orderMarkCommissioningCodeUpdateCacheMut       sync.RWMutex
	orderMarkCommissioningCodeUpdateCache          = make(map[string]updateCache)
	orderMarkCommissioningCodeUpsertCacheMut       sync.RWMutex
	orderMarkCommissioningCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkCommissioningCodeAfterSelectMu sync.Mutex
var orderMarkCommissioningCodeAfterSelectHooks []OrderMarkCommissioningCodeHook

var orderMarkCommissioningCodeBeforeInsertMu sync.Mutex
var orderMarkCommissioningCodeBeforeInsertHooks []OrderMarkCommissioningCodeHook
var orderMarkCommissioningCodeAfterInsertMu sync.Mutex
var orderMarkCommissioningCodeAfterInsertHooks []OrderMarkCommissioningCodeHook

var orderMarkCommissioningCodeBeforeUpdateMu sync.Mutex
var orderMarkCommissioningCodeBeforeUpdateHooks []OrderMarkCommissioningCodeHook
var orderMarkCommissioningCodeAfterUpdateMu sync.Mutex
var orderMarkCommissioningCodeAfterUpdateHooks []OrderMarkCommissioningCodeHook

var orderMarkCommissioningCodeBeforeDeleteMu sync.Mutex
var orderMarkCommissioningCodeBeforeDeleteHooks []OrderMarkCommissioningCodeHook
var orderMarkCommissioningCodeAfterDeleteMu sync.Mutex
var orderMarkCommissioningCodeAfterDeleteHooks []OrderMarkCommissioningCodeHook

var orderMarkCommissioningCodeBeforeUpsertMu sync.Mutex
var orderMarkCommissioningCodeBeforeUpsertHooks []OrderMarkCommissioningCodeHook
var orderMarkCommissioningCodeAfterUpsertMu sync.Mutex
var orderMarkCommissioningCodeAfterUpsertHooks []OrderMarkCommissioningCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkCommissioningCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkCommissioningCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkCommissioningCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkCommissioningCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkCommissioningCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkCommissioningCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkCommissioningCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkCommissioningCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkCommissioningCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkCommissioningCodeHook registers your hook function for all future operations.
func AddOrderMarkCommissioningCodeHook(hookPoint boil.HookPoint, orderMarkCommissioningCodeHook OrderMarkCommissioningCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkCommissioningCodeAfterSelectMu.Lock()
		orderMarkCommissioningCodeAfterSelectHooks = append(orderMarkCommissioningCodeAfterSelectHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkCommissioningCodeBeforeInsertMu.Lock()
		orderMarkCommissioningCodeBeforeInsertHooks = append(orderMarkCommissioningCodeBeforeInsertHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkCommissioningCodeAfterInsertMu.Lock()
		orderMarkCommissioningCodeAfterInsertHooks = append(orderMarkCommissioningCodeAfterInsertHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkCommissioningCodeBeforeUpdateMu.Lock()
		orderMarkCommissioningCodeBeforeUpdateHooks = append(orderMarkCommissioningCodeBeforeUpdateHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkCommissioningCodeAfterUpdateMu.Lock()
		orderMarkCommissioningCodeAfterUpdateHooks = append(orderMarkCommissioningCodeAfterUpdateHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkCommissioningCodeBeforeDeleteMu.Lock()
		orderMarkCommissioningCodeBeforeDeleteHooks = append(orderMarkCommissioningCodeBeforeDeleteHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkCommissioningCodeAfterDeleteMu.Lock()
		orderMarkCommissioningCodeAfterDeleteHooks = append(orderMarkCommissioningCodeAfterDeleteHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkCommissioningCodeBeforeUpsertMu.Lock()
		orderMarkCommissioningCodeBeforeUpsertHooks = append(orderMarkCommissioningCodeBeforeUpsertHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkCommissioningCodeAfterUpsertMu.Lock()
		orderMarkCommissioningCodeAfterUpsertHooks = append(orderMarkCommissioningCodeAfterUpsertHooks, orderMarkCommissioningCodeHook)
		orderMarkCommissioningCodeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkCommissioningCode record from the query using the global executor.
func (q orderMarkCommissioningCodeQuery) OneG(ctx context.Context) (*OrderMarkCommissioningCode, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkCommissioningCode record from the query.
func (q orderMarkCommissioningCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkCommissioningCode, error) {
	o := &OrderMarkCommissioningCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_commissioning_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkCommissioningCode records from the query using the global executor.
func (q orderMarkCommissioningCodeQuery) AllG(ctx context.Context) (OrderMarkCommissioningCodeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkCommissioningCode records from the query.
func (q orderMarkCommissioningCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkCommissioningCodeSlice, error) {
	var o []*OrderMarkCommissioningCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkCommissioningCode slice")
	}

	if len(orderMarkCommissioningCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkCommissioningCode records in the query using the global executor
func (q orderMarkCommissioningCodeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkCommissioningCode records in the query.
func (q orderMarkCommissioningCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_commissioning_codes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkCommissioningCodeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkCommissioningCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_commissioning_codes exists")
	}

	return count > 0, nil
}

// OrderMarkCommissioningCodes retrieves all the records using an executor.
func OrderMarkCommissioningCodes(mods ...qm.QueryMod) orderMarkCommissioningCodeQuery {
	mods = append(mods, qm.From("[dbo].[order_mark_commissioning_codes]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[order_mark_commissioning_codes].*"})
	}

	return orderMarkCommissioningCodeQuery{q}
}

// FindOrderMarkCommissioningCodeG retrieves a single record by ID.
func FindOrderMarkCommissioningCodeG(ctx context.Context, iD int, selectCols ...string) (*OrderMarkCommissioningCode, error) {
	return FindOrderMarkCommissioningCode(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkCommissioningCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkCommissioningCode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrderMarkCommissioningCode, error) {
	orderMarkCommissioningCodeObj := &OrderMarkCommissioningCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[order_mark_commissioning_codes] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkCommissioningCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_commissioning_codes")
	}

	if err = orderMarkCommissioningCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkCommissioningCodeObj, err
	}

	return orderMarkCommissioningCodeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkCommissioningCode) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkCommissioningCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_commissioning_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCommissioningCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkCommissioningCodeInsertCacheMut.RLock()
	cache, cached := orderMarkCommissioningCodeInsertCache[key]
	orderMarkCommissioningCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkCommissioningCodeAllColumns,
			orderMarkCommissioningCodeColumnsWithDefault,
			orderMarkCommissioningCodeColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkCommissioningCodeGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkCommissioningCodeType, orderMarkCommissioningCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkCommissioningCodeType, orderMarkCommissioningCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[order_mark_commissioning_codes] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[order_mark_commissioning_codes] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_commissioning_codes")
	}

	if !cached {
		orderMarkCommissioningCodeInsertCacheMut.Lock()
		orderMarkCommissioningCodeInsertCache[key] = cache
		orderMarkCommissioningCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkCommissioningCode record using the global executor.
// See Update for more documentation.
func (o *OrderMarkCommissioningCode) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkCommissioningCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkCommissioningCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkCommissioningCodeUpdateCacheMut.RLock()
	cache, cached := orderMarkCommissioningCodeUpdateCache[key]
	orderMarkCommissioningCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkCommissioningCodeAllColumns,
			orderMarkCommissioningCodePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkCommissioningCodeGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_commissioning_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[order_mark_commissioning_codes] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, orderMarkCommissioningCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkCommissioningCodeType, orderMarkCommissioningCodeMapping, append(wl, orderMarkCommissioningCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_commissioning_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_commissioning_codes")
	}

	if !cached {
		orderMarkCommissioningCodeUpdateCacheMut.Lock()
		orderMarkCommissioningCodeUpdateCache[key] = cache
		orderMarkCommissioningCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkCommissioningCodeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkCommissioningCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_commissioning_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_commissioning_codes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkCommissioningCodeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkCommissioningCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCommissioningCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[order_mark_commissioning_codes] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderMarkCommissioningCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkCommissioningCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkCommissioningCode")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkCommissioningCode) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *OrderMarkCommissioningCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_commissioning_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCommissioningCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkCommissioningCodeUpsertCacheMut.RLock()
	cache, cached := orderMarkCommissioningCodeUpsertCache[key]
	orderMarkCommissioningCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderMarkCommissioningCodeAllColumns,
			orderMarkCommissioningCodeColumnsWithDefault,
			orderMarkCommissioningCodeColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, orderMarkCommissioningCodeGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(orderMarkCommissioningCodePrimaryKeyColumns, v) && strmangle.ContainsAny(orderMarkCommissioningCodeColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_commissioning_codes, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			orderMarkCommissioningCodeAllColumns,
			orderMarkCommissioningCodePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, orderMarkCommissioningCodeGeneratedColumns)

		ret := strmangle.SetComplement(orderMarkCommissioningCodeAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_commissioning_codes, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[order_mark_commissioning_codes]", orderMarkCommissioningCodePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(orderMarkCommissioningCodePrimaryKeyColumns))
		copy(whitelist, orderMarkCommissioningCodePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(orderMarkCommissioningCodeType, orderMarkCommissioningCodeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkCommissioningCodeType, orderMarkCommissioningCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_commissioning_codes")
	}

	if !cached {
		orderMarkCommissioningCodeUpsertCacheMut.Lock()
		orderMarkCommissioningCodeUpsertCache[key] = cache
		orderMarkCommissioningCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkCommissioningCode record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkCommissioningCode) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkCommissioningCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkCommissioningCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkCommissioningCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkCommissioningCodePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[order_mark_commissioning_codes] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_commissioning_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_commissioning_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkCommissioningCodeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkCommissioningCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkCommissioningCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_commissioning_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_commissioning_codes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkCommissioningCodeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkCommissioningCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkCommissioningCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCommissioningCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[order_mark_commissioning_codes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkCommissioningCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkCommissioningCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_commissioning_codes")
	}

	if len(orderMarkCommissioningCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkCommissioningCode) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkCommissioningCode provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkCommissioningCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkCommissioningCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCommissioningCodeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkCommissioningCodeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCommissioningCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkCommissioningCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCommissioningCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[order_mark_commissioning_codes].* FROM [dbo].[order_mark_commissioning_codes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkCommissioningCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkCommissioningCodeSlice")
	}

	*o = slice

	return nil
}

// OrderMarkCommissioningCodeExistsG checks if the OrderMarkCommissioningCode row exists.
func OrderMarkCommissioningCodeExistsG(ctx context.Context, iD int) (bool, error) {
	return OrderMarkCommissioningCodeExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkCommissioningCodeExists checks if the OrderMarkCommissioningCode row exists.
func OrderMarkCommissioningCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[order_mark_commissioning_codes] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_commissioning_codes exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkCommissioningCode row exists.
func (o *OrderMarkCommissioningCode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkCommissioningCodeExists(ctx, exec, o.ID)
}
