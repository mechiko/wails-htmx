// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// QueueRequest is an object representing the database table.
type QueueRequest struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequestID null.Int64  `boil:"request_id" json:"request_id,omitempty" toml:"request_id" yaml:"request_id,omitempty"`
	TaskID    null.Int64  `boil:"task_id" json:"task_id,omitempty" toml:"task_id" yaml:"task_id,omitempty"`
	Fsrarid   null.String `boil:"fsrarid" json:"fsrarid,omitempty" toml:"fsrarid" yaml:"fsrarid,omitempty"`
	CreatedAt null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Rule      null.String `boil:"rule" json:"rule,omitempty" toml:"rule" yaml:"rule,omitempty"`
	RuleArgs  null.String `boil:"rule_args" json:"rule_args,omitempty" toml:"rule_args" yaml:"rule_args,omitempty"`
	State     null.Int64  `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	StateTXT  null.String `boil:"state_txt" json:"state_txt,omitempty" toml:"state_txt" yaml:"state_txt,omitempty"`
	XML       null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *queueRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L queueRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QueueRequestColumns = struct {
	ID        string
	RequestID string
	TaskID    string
	Fsrarid   string
	CreatedAt string
	UpdatedAt string
	Rule      string
	RuleArgs  string
	State     string
	StateTXT  string
	XML       string
}{
	ID:        "id",
	RequestID: "request_id",
	TaskID:    "task_id",
	Fsrarid:   "fsrarid",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Rule:      "rule",
	RuleArgs:  "rule_args",
	State:     "state",
	StateTXT:  "state_txt",
	XML:       "xml",
}

var QueueRequestTableColumns = struct {
	ID        string
	RequestID string
	TaskID    string
	Fsrarid   string
	CreatedAt string
	UpdatedAt string
	Rule      string
	RuleArgs  string
	State     string
	StateTXT  string
	XML       string
}{
	ID:        "queue_request.id",
	RequestID: "queue_request.request_id",
	TaskID:    "queue_request.task_id",
	Fsrarid:   "queue_request.fsrarid",
	CreatedAt: "queue_request.created_at",
	UpdatedAt: "queue_request.updated_at",
	Rule:      "queue_request.rule",
	RuleArgs:  "queue_request.rule_args",
	State:     "queue_request.state",
	StateTXT:  "queue_request.state_txt",
	XML:       "queue_request.xml",
}

// Generated where

var QueueRequestWhere = struct {
	ID        whereHelperint64
	RequestID whereHelpernull_Int64
	TaskID    whereHelpernull_Int64
	Fsrarid   whereHelpernull_String
	CreatedAt whereHelpernull_String
	UpdatedAt whereHelpernull_String
	Rule      whereHelpernull_String
	RuleArgs  whereHelpernull_String
	State     whereHelpernull_Int64
	StateTXT  whereHelpernull_String
	XML       whereHelpernull_String
}{
	ID:        whereHelperint64{field: "\"queue_request\".\"id\""},
	RequestID: whereHelpernull_Int64{field: "\"queue_request\".\"request_id\""},
	TaskID:    whereHelpernull_Int64{field: "\"queue_request\".\"task_id\""},
	Fsrarid:   whereHelpernull_String{field: "\"queue_request\".\"fsrarid\""},
	CreatedAt: whereHelpernull_String{field: "\"queue_request\".\"created_at\""},
	UpdatedAt: whereHelpernull_String{field: "\"queue_request\".\"updated_at\""},
	Rule:      whereHelpernull_String{field: "\"queue_request\".\"rule\""},
	RuleArgs:  whereHelpernull_String{field: "\"queue_request\".\"rule_args\""},
	State:     whereHelpernull_Int64{field: "\"queue_request\".\"state\""},
	StateTXT:  whereHelpernull_String{field: "\"queue_request\".\"state_txt\""},
	XML:       whereHelpernull_String{field: "\"queue_request\".\"xml\""},
}

// QueueRequestRels is where relationship names are stored.
var QueueRequestRels = struct {
}{}

// queueRequestR is where relationships are stored.
type queueRequestR struct {
}

// NewStruct creates a new relationship struct
func (*queueRequestR) NewStruct() *queueRequestR {
	return &queueRequestR{}
}

// queueRequestL is where Load methods for each relationship are stored.
type queueRequestL struct{}

var (
	queueRequestAllColumns            = []string{"id", "request_id", "task_id", "fsrarid", "created_at", "updated_at", "rule", "rule_args", "state", "state_txt", "xml"}
	queueRequestColumnsWithoutDefault = []string{}
	queueRequestColumnsWithDefault    = []string{"id", "request_id", "task_id", "fsrarid", "created_at", "updated_at", "rule", "rule_args", "state", "state_txt", "xml"}
	queueRequestPrimaryKeyColumns     = []string{"id"}
	queueRequestGeneratedColumns      = []string{"id"}
)

type (
	// QueueRequestSlice is an alias for a slice of pointers to QueueRequest.
	// This should almost always be used instead of []QueueRequest.
	QueueRequestSlice []*QueueRequest
	// QueueRequestHook is the signature for custom QueueRequest hook methods
	QueueRequestHook func(context.Context, boil.ContextExecutor, *QueueRequest) error

	queueRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	queueRequestType                 = reflect.TypeOf(&QueueRequest{})
	queueRequestMapping              = queries.MakeStructMapping(queueRequestType)
	queueRequestPrimaryKeyMapping, _ = queries.BindMapping(queueRequestType, queueRequestMapping, queueRequestPrimaryKeyColumns)
	queueRequestInsertCacheMut       sync.RWMutex
	queueRequestInsertCache          = make(map[string]insertCache)
	queueRequestUpdateCacheMut       sync.RWMutex
	queueRequestUpdateCache          = make(map[string]updateCache)
	queueRequestUpsertCacheMut       sync.RWMutex
	queueRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var queueRequestAfterSelectMu sync.Mutex
var queueRequestAfterSelectHooks []QueueRequestHook

var queueRequestBeforeInsertMu sync.Mutex
var queueRequestBeforeInsertHooks []QueueRequestHook
var queueRequestAfterInsertMu sync.Mutex
var queueRequestAfterInsertHooks []QueueRequestHook

var queueRequestBeforeUpdateMu sync.Mutex
var queueRequestBeforeUpdateHooks []QueueRequestHook
var queueRequestAfterUpdateMu sync.Mutex
var queueRequestAfterUpdateHooks []QueueRequestHook

var queueRequestBeforeDeleteMu sync.Mutex
var queueRequestBeforeDeleteHooks []QueueRequestHook
var queueRequestAfterDeleteMu sync.Mutex
var queueRequestAfterDeleteHooks []QueueRequestHook

var queueRequestBeforeUpsertMu sync.Mutex
var queueRequestBeforeUpsertHooks []QueueRequestHook
var queueRequestAfterUpsertMu sync.Mutex
var queueRequestAfterUpsertHooks []QueueRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QueueRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QueueRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QueueRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QueueRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QueueRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QueueRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QueueRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QueueRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QueueRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queueRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQueueRequestHook registers your hook function for all future operations.
func AddQueueRequestHook(hookPoint boil.HookPoint, queueRequestHook QueueRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		queueRequestAfterSelectMu.Lock()
		queueRequestAfterSelectHooks = append(queueRequestAfterSelectHooks, queueRequestHook)
		queueRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		queueRequestBeforeInsertMu.Lock()
		queueRequestBeforeInsertHooks = append(queueRequestBeforeInsertHooks, queueRequestHook)
		queueRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		queueRequestAfterInsertMu.Lock()
		queueRequestAfterInsertHooks = append(queueRequestAfterInsertHooks, queueRequestHook)
		queueRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		queueRequestBeforeUpdateMu.Lock()
		queueRequestBeforeUpdateHooks = append(queueRequestBeforeUpdateHooks, queueRequestHook)
		queueRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		queueRequestAfterUpdateMu.Lock()
		queueRequestAfterUpdateHooks = append(queueRequestAfterUpdateHooks, queueRequestHook)
		queueRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		queueRequestBeforeDeleteMu.Lock()
		queueRequestBeforeDeleteHooks = append(queueRequestBeforeDeleteHooks, queueRequestHook)
		queueRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		queueRequestAfterDeleteMu.Lock()
		queueRequestAfterDeleteHooks = append(queueRequestAfterDeleteHooks, queueRequestHook)
		queueRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		queueRequestBeforeUpsertMu.Lock()
		queueRequestBeforeUpsertHooks = append(queueRequestBeforeUpsertHooks, queueRequestHook)
		queueRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		queueRequestAfterUpsertMu.Lock()
		queueRequestAfterUpsertHooks = append(queueRequestAfterUpsertHooks, queueRequestHook)
		queueRequestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single queueRequest record from the query using the global executor.
func (q queueRequestQuery) OneG(ctx context.Context) (*QueueRequest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single queueRequest record from the query.
func (q queueRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QueueRequest, error) {
	o := &QueueRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for queue_request")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all QueueRequest records from the query using the global executor.
func (q queueRequestQuery) AllG(ctx context.Context) (QueueRequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all QueueRequest records from the query.
func (q queueRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (QueueRequestSlice, error) {
	var o []*QueueRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to QueueRequest slice")
	}

	if len(queueRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all QueueRequest records in the query using the global executor
func (q queueRequestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all QueueRequest records in the query.
func (q queueRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count queue_request rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q queueRequestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q queueRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if queue_request exists")
	}

	return count > 0, nil
}

// QueueRequests retrieves all the records using an executor.
func QueueRequests(mods ...qm.QueryMod) queueRequestQuery {
	mods = append(mods, qm.From("\"queue_request\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"queue_request\".*"})
	}

	return queueRequestQuery{q}
}

// FindQueueRequestG retrieves a single record by ID.
func FindQueueRequestG(ctx context.Context, iD int64, selectCols ...string) (*QueueRequest, error) {
	return FindQueueRequest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindQueueRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQueueRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*QueueRequest, error) {
	queueRequestObj := &QueueRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"queue_request\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, queueRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from queue_request")
	}

	if err = queueRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return queueRequestObj, err
	}

	return queueRequestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *QueueRequest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QueueRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no queue_request provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queueRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	queueRequestInsertCacheMut.RLock()
	cache, cached := queueRequestInsertCache[key]
	queueRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			queueRequestAllColumns,
			queueRequestColumnsWithDefault,
			queueRequestColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, queueRequestGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(queueRequestType, queueRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(queueRequestType, queueRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"queue_request\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"queue_request\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into queue_request")
	}

	if !cached {
		queueRequestInsertCacheMut.Lock()
		queueRequestInsertCache[key] = cache
		queueRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single QueueRequest record using the global executor.
// See Update for more documentation.
func (o *QueueRequest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the QueueRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QueueRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	queueRequestUpdateCacheMut.RLock()
	cache, cached := queueRequestUpdateCache[key]
	queueRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			queueRequestAllColumns,
			queueRequestPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, queueRequestGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update queue_request, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"queue_request\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, queueRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(queueRequestType, queueRequestMapping, append(wl, queueRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update queue_request row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for queue_request")
	}

	if !cached {
		queueRequestUpdateCacheMut.Lock()
		queueRequestUpdateCache[key] = cache
		queueRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q queueRequestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q queueRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for queue_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for queue_request")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o QueueRequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QueueRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queueRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"queue_request\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, queueRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in queueRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all queueRequest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *QueueRequest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QueueRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no queue_request provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queueRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	queueRequestUpsertCacheMut.RLock()
	cache, cached := queueRequestUpsertCache[key]
	queueRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			queueRequestAllColumns,
			queueRequestColumnsWithDefault,
			queueRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			queueRequestAllColumns,
			queueRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert queue_request, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(queueRequestPrimaryKeyColumns))
			copy(conflict, queueRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"queue_request\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(queueRequestType, queueRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(queueRequestType, queueRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert queue_request")
	}

	if !cached {
		queueRequestUpsertCacheMut.Lock()
		queueRequestUpsertCache[key] = cache
		queueRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single QueueRequest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *QueueRequest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single QueueRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QueueRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no QueueRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), queueRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"queue_request\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from queue_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for queue_request")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q queueRequestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q queueRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no queueRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from queue_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for queue_request")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o QueueRequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QueueRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(queueRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queueRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"queue_request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, queueRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from queueRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for queue_request")
	}

	if len(queueRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *QueueRequest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no QueueRequest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QueueRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQueueRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QueueRequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty QueueRequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QueueRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QueueRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queueRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"queue_request\".* FROM \"queue_request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, queueRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in QueueRequestSlice")
	}

	*o = slice

	return nil
}

// QueueRequestExistsG checks if the QueueRequest row exists.
func QueueRequestExistsG(ctx context.Context, iD int64) (bool, error) {
	return QueueRequestExists(ctx, boil.GetContextDB(), iD)
}

// QueueRequestExists checks if the QueueRequest row exists.
func QueueRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"queue_request\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if queue_request exists")
	}

	return exists, nil
}

// Exists checks if the QueueRequest row exists.
func (o *QueueRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return QueueRequestExists(ctx, exec, o.ID)
}
