// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Form1 is an object representing the database table.
type Form1 struct {
	InformF1RegID       string      `boil:"inform_f1_reg_id" json:"inform_f1_reg_id" toml:"inform_f1_reg_id" yaml:"inform_f1_reg_id"`
	RequestID           null.Int64  `boil:"request_id" json:"request_id,omitempty" toml:"request_id" yaml:"request_id,omitempty"`
	CreatedAt           null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt           null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	OriginalDocNumber   null.String `boil:"original_doc_number" json:"original_doc_number,omitempty" toml:"original_doc_number" yaml:"original_doc_number,omitempty"`
	OriginalDocDate     null.String `boil:"original_doc_date" json:"original_doc_date,omitempty" toml:"original_doc_date" yaml:"original_doc_date,omitempty"`
	BottlingDate        null.String `boil:"bottling_date" json:"bottling_date,omitempty" toml:"bottling_date" yaml:"bottling_date,omitempty"`
	EgaisNumber         null.String `boil:"egais_number" json:"egais_number,omitempty" toml:"egais_number" yaml:"egais_number,omitempty"`
	EgaisDate           null.String `boil:"egais_date" json:"egais_date,omitempty" toml:"egais_date" yaml:"egais_date,omitempty"`
	GTDNumber           null.String `boil:"gtd_number" json:"gtd_number,omitempty" toml:"gtd_number" yaml:"gtd_number,omitempty"`
	GTDDate             null.String `boil:"gtd_date" json:"gtd_date,omitempty" toml:"gtd_date" yaml:"gtd_date,omitempty"`
	ClientRegID         null.String `boil:"client_reg_id" json:"client_reg_id,omitempty" toml:"client_reg_id" yaml:"client_reg_id,omitempty"`
	ProductAlcCode      null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductQuantity     null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	Rem                 null.String `boil:"rem" json:"rem,omitempty" toml:"rem" yaml:"rem,omitempty"`

	R *form1R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L form1L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Form1Columns = struct {
	InformF1RegID       string
	RequestID           string
	CreatedAt           string
	UpdatedAt           string
	OriginalDocNumber   string
	OriginalDocDate     string
	BottlingDate        string
	EgaisNumber         string
	EgaisDate           string
	GTDNumber           string
	GTDDate             string
	ClientRegID         string
	ProductAlcCode      string
	ProductQuantity     string
	ProducerClientRegID string
	Rem                 string
}{
	InformF1RegID:       "inform_f1_reg_id",
	RequestID:           "request_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	OriginalDocNumber:   "original_doc_number",
	OriginalDocDate:     "original_doc_date",
	BottlingDate:        "bottling_date",
	EgaisNumber:         "egais_number",
	EgaisDate:           "egais_date",
	GTDNumber:           "gtd_number",
	GTDDate:             "gtd_date",
	ClientRegID:         "client_reg_id",
	ProductAlcCode:      "product_alc_code",
	ProductQuantity:     "product_quantity",
	ProducerClientRegID: "producer_client_reg_id",
	Rem:                 "rem",
}

var Form1TableColumns = struct {
	InformF1RegID       string
	RequestID           string
	CreatedAt           string
	UpdatedAt           string
	OriginalDocNumber   string
	OriginalDocDate     string
	BottlingDate        string
	EgaisNumber         string
	EgaisDate           string
	GTDNumber           string
	GTDDate             string
	ClientRegID         string
	ProductAlcCode      string
	ProductQuantity     string
	ProducerClientRegID string
	Rem                 string
}{
	InformF1RegID:       "form1.inform_f1_reg_id",
	RequestID:           "form1.request_id",
	CreatedAt:           "form1.created_at",
	UpdatedAt:           "form1.updated_at",
	OriginalDocNumber:   "form1.original_doc_number",
	OriginalDocDate:     "form1.original_doc_date",
	BottlingDate:        "form1.bottling_date",
	EgaisNumber:         "form1.egais_number",
	EgaisDate:           "form1.egais_date",
	GTDNumber:           "form1.gtd_number",
	GTDDate:             "form1.gtd_date",
	ClientRegID:         "form1.client_reg_id",
	ProductAlcCode:      "form1.product_alc_code",
	ProductQuantity:     "form1.product_quantity",
	ProducerClientRegID: "form1.producer_client_reg_id",
	Rem:                 "form1.rem",
}

// Generated where

var Form1Where = struct {
	InformF1RegID       whereHelperstring
	RequestID           whereHelpernull_Int64
	CreatedAt           whereHelpernull_String
	UpdatedAt           whereHelpernull_String
	OriginalDocNumber   whereHelpernull_String
	OriginalDocDate     whereHelpernull_String
	BottlingDate        whereHelpernull_String
	EgaisNumber         whereHelpernull_String
	EgaisDate           whereHelpernull_String
	GTDNumber           whereHelpernull_String
	GTDDate             whereHelpernull_String
	ClientRegID         whereHelpernull_String
	ProductAlcCode      whereHelpernull_String
	ProductQuantity     whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	Rem                 whereHelpernull_String
}{
	InformF1RegID:       whereHelperstring{field: "\"form1\".\"inform_f1_reg_id\""},
	RequestID:           whereHelpernull_Int64{field: "\"form1\".\"request_id\""},
	CreatedAt:           whereHelpernull_String{field: "\"form1\".\"created_at\""},
	UpdatedAt:           whereHelpernull_String{field: "\"form1\".\"updated_at\""},
	OriginalDocNumber:   whereHelpernull_String{field: "\"form1\".\"original_doc_number\""},
	OriginalDocDate:     whereHelpernull_String{field: "\"form1\".\"original_doc_date\""},
	BottlingDate:        whereHelpernull_String{field: "\"form1\".\"bottling_date\""},
	EgaisNumber:         whereHelpernull_String{field: "\"form1\".\"egais_number\""},
	EgaisDate:           whereHelpernull_String{field: "\"form1\".\"egais_date\""},
	GTDNumber:           whereHelpernull_String{field: "\"form1\".\"gtd_number\""},
	GTDDate:             whereHelpernull_String{field: "\"form1\".\"gtd_date\""},
	ClientRegID:         whereHelpernull_String{field: "\"form1\".\"client_reg_id\""},
	ProductAlcCode:      whereHelpernull_String{field: "\"form1\".\"product_alc_code\""},
	ProductQuantity:     whereHelpernull_String{field: "\"form1\".\"product_quantity\""},
	ProducerClientRegID: whereHelpernull_String{field: "\"form1\".\"producer_client_reg_id\""},
	Rem:                 whereHelpernull_String{field: "\"form1\".\"rem\""},
}

// Form1Rels is where relationship names are stored.
var Form1Rels = struct {
}{}

// form1R is where relationships are stored.
type form1R struct {
}

// NewStruct creates a new relationship struct
func (*form1R) NewStruct() *form1R {
	return &form1R{}
}

// form1L is where Load methods for each relationship are stored.
type form1L struct{}

var (
	form1AllColumns            = []string{"inform_f1_reg_id", "request_id", "created_at", "updated_at", "original_doc_number", "original_doc_date", "bottling_date", "egais_number", "egais_date", "gtd_number", "gtd_date", "client_reg_id", "product_alc_code", "product_quantity", "producer_client_reg_id", "rem"}
	form1ColumnsWithoutDefault = []string{"inform_f1_reg_id"}
	form1ColumnsWithDefault    = []string{"request_id", "created_at", "updated_at", "original_doc_number", "original_doc_date", "bottling_date", "egais_number", "egais_date", "gtd_number", "gtd_date", "client_reg_id", "product_alc_code", "product_quantity", "producer_client_reg_id", "rem"}
	form1PrimaryKeyColumns     = []string{"inform_f1_reg_id"}
	form1GeneratedColumns      = []string{}
)

type (
	// Form1Slice is an alias for a slice of pointers to Form1.
	// This should almost always be used instead of []Form1.
	Form1Slice []*Form1
	// Form1Hook is the signature for custom Form1 hook methods
	Form1Hook func(context.Context, boil.ContextExecutor, *Form1) error

	form1Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	form1Type                 = reflect.TypeOf(&Form1{})
	form1Mapping              = queries.MakeStructMapping(form1Type)
	form1PrimaryKeyMapping, _ = queries.BindMapping(form1Type, form1Mapping, form1PrimaryKeyColumns)
	form1InsertCacheMut       sync.RWMutex
	form1InsertCache          = make(map[string]insertCache)
	form1UpdateCacheMut       sync.RWMutex
	form1UpdateCache          = make(map[string]updateCache)
	form1UpsertCacheMut       sync.RWMutex
	form1UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var form1AfterSelectMu sync.Mutex
var form1AfterSelectHooks []Form1Hook

var form1BeforeInsertMu sync.Mutex
var form1BeforeInsertHooks []Form1Hook
var form1AfterInsertMu sync.Mutex
var form1AfterInsertHooks []Form1Hook

var form1BeforeUpdateMu sync.Mutex
var form1BeforeUpdateHooks []Form1Hook
var form1AfterUpdateMu sync.Mutex
var form1AfterUpdateHooks []Form1Hook

var form1BeforeDeleteMu sync.Mutex
var form1BeforeDeleteHooks []Form1Hook
var form1AfterDeleteMu sync.Mutex
var form1AfterDeleteHooks []Form1Hook

var form1BeforeUpsertMu sync.Mutex
var form1BeforeUpsertHooks []Form1Hook
var form1AfterUpsertMu sync.Mutex
var form1AfterUpsertHooks []Form1Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Form1) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Form1) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Form1) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Form1) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Form1) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Form1) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Form1) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Form1) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Form1) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form1AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForm1Hook registers your hook function for all future operations.
func AddForm1Hook(hookPoint boil.HookPoint, form1Hook Form1Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		form1AfterSelectMu.Lock()
		form1AfterSelectHooks = append(form1AfterSelectHooks, form1Hook)
		form1AfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		form1BeforeInsertMu.Lock()
		form1BeforeInsertHooks = append(form1BeforeInsertHooks, form1Hook)
		form1BeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		form1AfterInsertMu.Lock()
		form1AfterInsertHooks = append(form1AfterInsertHooks, form1Hook)
		form1AfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		form1BeforeUpdateMu.Lock()
		form1BeforeUpdateHooks = append(form1BeforeUpdateHooks, form1Hook)
		form1BeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		form1AfterUpdateMu.Lock()
		form1AfterUpdateHooks = append(form1AfterUpdateHooks, form1Hook)
		form1AfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		form1BeforeDeleteMu.Lock()
		form1BeforeDeleteHooks = append(form1BeforeDeleteHooks, form1Hook)
		form1BeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		form1AfterDeleteMu.Lock()
		form1AfterDeleteHooks = append(form1AfterDeleteHooks, form1Hook)
		form1AfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		form1BeforeUpsertMu.Lock()
		form1BeforeUpsertHooks = append(form1BeforeUpsertHooks, form1Hook)
		form1BeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		form1AfterUpsertMu.Lock()
		form1AfterUpsertHooks = append(form1AfterUpsertHooks, form1Hook)
		form1AfterUpsertMu.Unlock()
	}
}

// OneG returns a single form1 record from the query using the global executor.
func (q form1Query) OneG(ctx context.Context) (*Form1, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single form1 record from the query.
func (q form1Query) One(ctx context.Context, exec boil.ContextExecutor) (*Form1, error) {
	o := &Form1{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for form1")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Form1 records from the query using the global executor.
func (q form1Query) AllG(ctx context.Context) (Form1Slice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Form1 records from the query.
func (q form1Query) All(ctx context.Context, exec boil.ContextExecutor) (Form1Slice, error) {
	var o []*Form1

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Form1 slice")
	}

	if len(form1AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Form1 records in the query using the global executor
func (q form1Query) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Form1 records in the query.
func (q form1Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count form1 rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q form1Query) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q form1Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if form1 exists")
	}

	return count > 0, nil
}

// Form1s retrieves all the records using an executor.
func Form1s(mods ...qm.QueryMod) form1Query {
	mods = append(mods, qm.From("\"form1\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"form1\".*"})
	}

	return form1Query{q}
}

// FindForm1G retrieves a single record by ID.
func FindForm1G(ctx context.Context, informF1RegID string, selectCols ...string) (*Form1, error) {
	return FindForm1(ctx, boil.GetContextDB(), informF1RegID, selectCols...)
}

// FindForm1 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForm1(ctx context.Context, exec boil.ContextExecutor, informF1RegID string, selectCols ...string) (*Form1, error) {
	form1Obj := &Form1{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"form1\" where \"inform_f1_reg_id\"=?", sel,
	)

	q := queries.Raw(query, informF1RegID)

	err := q.Bind(ctx, exec, form1Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from form1")
	}

	if err = form1Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return form1Obj, err
	}

	return form1Obj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Form1) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Form1) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no form1 provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(form1ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	form1InsertCacheMut.RLock()
	cache, cached := form1InsertCache[key]
	form1InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			form1AllColumns,
			form1ColumnsWithDefault,
			form1ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(form1Type, form1Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(form1Type, form1Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"form1\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"form1\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into form1")
	}

	if !cached {
		form1InsertCacheMut.Lock()
		form1InsertCache[key] = cache
		form1InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Form1 record using the global executor.
// See Update for more documentation.
func (o *Form1) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Form1.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Form1) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	form1UpdateCacheMut.RLock()
	cache, cached := form1UpdateCache[key]
	form1UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			form1AllColumns,
			form1PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update form1, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"form1\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, form1PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(form1Type, form1Mapping, append(wl, form1PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update form1 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for form1")
	}

	if !cached {
		form1UpdateCacheMut.Lock()
		form1UpdateCache[key] = cache
		form1UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q form1Query) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q form1Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for form1")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o Form1Slice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Form1Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), form1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"form1\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, form1PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in form1 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all form1")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Form1) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Form1) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no form1 provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(form1ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	form1UpsertCacheMut.RLock()
	cache, cached := form1UpsertCache[key]
	form1UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			form1AllColumns,
			form1ColumnsWithDefault,
			form1ColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			form1AllColumns,
			form1PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert form1, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(form1PrimaryKeyColumns))
			copy(conflict, form1PrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"form1\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(form1Type, form1Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(form1Type, form1Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert form1")
	}

	if !cached {
		form1UpsertCacheMut.Lock()
		form1UpsertCache[key] = cache
		form1UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Form1 record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Form1) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Form1 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Form1) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Form1 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), form1PrimaryKeyMapping)
	sql := "DELETE FROM \"form1\" WHERE \"inform_f1_reg_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for form1")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q form1Query) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q form1Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no form1Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for form1")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o Form1Slice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Form1Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(form1BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), form1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"form1\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, form1PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from form1 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for form1")
	}

	if len(form1AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Form1) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Form1 provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Form1) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindForm1(ctx, exec, o.InformF1RegID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Form1Slice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty Form1Slice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Form1Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Form1Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), form1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"form1\".* FROM \"form1\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, form1PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in Form1Slice")
	}

	*o = slice

	return nil
}

// Form1ExistsG checks if the Form1 row exists.
func Form1ExistsG(ctx context.Context, informF1RegID string) (bool, error) {
	return Form1Exists(ctx, boil.GetContextDB(), informF1RegID)
}

// Form1Exists checks if the Form1 row exists.
func Form1Exists(ctx context.Context, exec boil.ContextExecutor, informF1RegID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"form1\" where \"inform_f1_reg_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, informF1RegID)
	}
	row := exec.QueryRowContext(ctx, sql, informF1RegID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if form1 exists")
	}

	return exists, nil
}

// Exists checks if the Form1 row exists.
func (o *Form1) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return Form1Exists(ctx, exec, o.InformF1RegID)
}
