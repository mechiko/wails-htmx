// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AppState is an object representing the database table.
type AppState struct {
	Module null.String `boil:"module" json:"module,omitempty" toml:"module" yaml:"module,omitempty"`
	Key    null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	Value  null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`

	R *appStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppStateColumns = struct {
	Module string
	Key    string
	Value  string
}{
	Module: "module",
	Key:    "key",
	Value:  "value",
}

var AppStateTableColumns = struct {
	Module string
	Key    string
	Value  string
}{
	Module: "app_state.module",
	Key:    "app_state.key",
	Value:  "app_state.value",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AppStateWhere = struct {
	Module whereHelpernull_String
	Key    whereHelpernull_String
	Value  whereHelpernull_String
}{
	Module: whereHelpernull_String{field: "\"app_state\".\"module\""},
	Key:    whereHelpernull_String{field: "\"app_state\".\"key\""},
	Value:  whereHelpernull_String{field: "\"app_state\".\"value\""},
}

// AppStateRels is where relationship names are stored.
var AppStateRels = struct {
}{}

// appStateR is where relationships are stored.
type appStateR struct {
}

// NewStruct creates a new relationship struct
func (*appStateR) NewStruct() *appStateR {
	return &appStateR{}
}

// appStateL is where Load methods for each relationship are stored.
type appStateL struct{}

var (
	appStateAllColumns            = []string{"module", "key", "value"}
	appStateColumnsWithoutDefault = []string{}
	appStateColumnsWithDefault    = []string{"module", "key", "value"}
	appStatePrimaryKeyColumns     = []string{"module", "key"}
	appStateGeneratedColumns      = []string{}
)

type (
	// AppStateSlice is an alias for a slice of pointers to AppState.
	// This should almost always be used instead of []AppState.
	AppStateSlice []*AppState
	// AppStateHook is the signature for custom AppState hook methods
	AppStateHook func(context.Context, boil.ContextExecutor, *AppState) error

	appStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appStateType                 = reflect.TypeOf(&AppState{})
	appStateMapping              = queries.MakeStructMapping(appStateType)
	appStatePrimaryKeyMapping, _ = queries.BindMapping(appStateType, appStateMapping, appStatePrimaryKeyColumns)
	appStateInsertCacheMut       sync.RWMutex
	appStateInsertCache          = make(map[string]insertCache)
	appStateUpdateCacheMut       sync.RWMutex
	appStateUpdateCache          = make(map[string]updateCache)
	appStateUpsertCacheMut       sync.RWMutex
	appStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var appStateAfterSelectMu sync.Mutex
var appStateAfterSelectHooks []AppStateHook

var appStateBeforeInsertMu sync.Mutex
var appStateBeforeInsertHooks []AppStateHook
var appStateAfterInsertMu sync.Mutex
var appStateAfterInsertHooks []AppStateHook

var appStateBeforeUpdateMu sync.Mutex
var appStateBeforeUpdateHooks []AppStateHook
var appStateAfterUpdateMu sync.Mutex
var appStateAfterUpdateHooks []AppStateHook

var appStateBeforeDeleteMu sync.Mutex
var appStateBeforeDeleteHooks []AppStateHook
var appStateAfterDeleteMu sync.Mutex
var appStateAfterDeleteHooks []AppStateHook

var appStateBeforeUpsertMu sync.Mutex
var appStateBeforeUpsertHooks []AppStateHook
var appStateAfterUpsertMu sync.Mutex
var appStateAfterUpsertHooks []AppStateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AppState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AppState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AppState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AppState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AppState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AppState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AppState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AppState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AppState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAppStateHook registers your hook function for all future operations.
func AddAppStateHook(hookPoint boil.HookPoint, appStateHook AppStateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		appStateAfterSelectMu.Lock()
		appStateAfterSelectHooks = append(appStateAfterSelectHooks, appStateHook)
		appStateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		appStateBeforeInsertMu.Lock()
		appStateBeforeInsertHooks = append(appStateBeforeInsertHooks, appStateHook)
		appStateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		appStateAfterInsertMu.Lock()
		appStateAfterInsertHooks = append(appStateAfterInsertHooks, appStateHook)
		appStateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		appStateBeforeUpdateMu.Lock()
		appStateBeforeUpdateHooks = append(appStateBeforeUpdateHooks, appStateHook)
		appStateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		appStateAfterUpdateMu.Lock()
		appStateAfterUpdateHooks = append(appStateAfterUpdateHooks, appStateHook)
		appStateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		appStateBeforeDeleteMu.Lock()
		appStateBeforeDeleteHooks = append(appStateBeforeDeleteHooks, appStateHook)
		appStateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		appStateAfterDeleteMu.Lock()
		appStateAfterDeleteHooks = append(appStateAfterDeleteHooks, appStateHook)
		appStateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		appStateBeforeUpsertMu.Lock()
		appStateBeforeUpsertHooks = append(appStateBeforeUpsertHooks, appStateHook)
		appStateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		appStateAfterUpsertMu.Lock()
		appStateAfterUpsertHooks = append(appStateAfterUpsertHooks, appStateHook)
		appStateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single appState record from the query using the global executor.
func (q appStateQuery) OneG(ctx context.Context) (*AppState, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single appState record from the query.
func (q appStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppState, error) {
	o := &AppState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for app_state")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AppState records from the query using the global executor.
func (q appStateQuery) AllG(ctx context.Context) (AppStateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AppState records from the query.
func (q appStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppStateSlice, error) {
	var o []*AppState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to AppState slice")
	}

	if len(appStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AppState records in the query using the global executor
func (q appStateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AppState records in the query.
func (q appStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count app_state rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q appStateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q appStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if app_state exists")
	}

	return count > 0, nil
}

// AppStates retrieves all the records using an executor.
func AppStates(mods ...qm.QueryMod) appStateQuery {
	mods = append(mods, qm.From("\"app_state\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"app_state\".*"})
	}

	return appStateQuery{q}
}

// FindAppStateG retrieves a single record by ID.
func FindAppStateG(ctx context.Context, module null.String, key null.String, selectCols ...string) (*AppState, error) {
	return FindAppState(ctx, boil.GetContextDB(), module, key, selectCols...)
}

// FindAppState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppState(ctx context.Context, exec boil.ContextExecutor, module null.String, key null.String, selectCols ...string) (*AppState, error) {
	appStateObj := &AppState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"app_state\" where \"module\"=? AND \"key\"=?", sel,
	)

	q := queries.Raw(query, module, key)

	err := q.Bind(ctx, exec, appStateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from app_state")
	}

	if err = appStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return appStateObj, err
	}

	return appStateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AppState) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AppState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no app_state provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appStateInsertCacheMut.RLock()
	cache, cached := appStateInsertCache[key]
	appStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appStateAllColumns,
			appStateColumnsWithDefault,
			appStateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appStateType, appStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appStateType, appStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"app_state\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"app_state\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into app_state")
	}

	if !cached {
		appStateInsertCacheMut.Lock()
		appStateInsertCache[key] = cache
		appStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AppState record using the global executor.
// See Update for more documentation.
func (o *AppState) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AppState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AppState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	appStateUpdateCacheMut.RLock()
	cache, cached := appStateUpdateCache[key]
	appStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appStateAllColumns,
			appStatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update app_state, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"app_state\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, appStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appStateType, appStateMapping, append(wl, appStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update app_state row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for app_state")
	}

	if !cached {
		appStateUpdateCacheMut.Lock()
		appStateUpdateCache[key] = cache
		appStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q appStateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q appStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for app_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for app_state")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AppStateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"app_state\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in appState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all appState")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AppState) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AppState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no app_state provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appStateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appStateUpsertCacheMut.RLock()
	cache, cached := appStateUpsertCache[key]
	appStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			appStateAllColumns,
			appStateColumnsWithDefault,
			appStateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			appStateAllColumns,
			appStatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert app_state, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(appStatePrimaryKeyColumns))
			copy(conflict, appStatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"app_state\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(appStateType, appStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appStateType, appStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert app_state")
	}

	if !cached {
		appStateUpsertCacheMut.Lock()
		appStateUpsertCache[key] = cache
		appStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AppState record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AppState) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AppState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AppState) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no AppState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appStatePrimaryKeyMapping)
	sql := "DELETE FROM \"app_state\" WHERE \"module\"=? AND \"key\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from app_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for app_state")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q appStateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q appStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no appStateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from app_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for app_state")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AppStateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(appStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"app_state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appStatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from appState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for app_state")
	}

	if len(appStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AppState) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no AppState provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AppState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppState(ctx, exec, o.Module, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppStateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty AppStateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"app_state\".* FROM \"app_state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, appStatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in AppStateSlice")
	}

	*o = slice

	return nil
}

// AppStateExistsG checks if the AppState row exists.
func AppStateExistsG(ctx context.Context, module null.String, key null.String) (bool, error) {
	return AppStateExists(ctx, boil.GetContextDB(), module, key)
}

// AppStateExists checks if the AppState row exists.
func AppStateExists(ctx context.Context, exec boil.ContextExecutor, module null.String, key null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"app_state\" where \"module\"=? AND \"key\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, module, key)
	}
	row := exec.QueryRowContext(ctx, sql, module, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if app_state exists")
	}

	return exists, nil
}

// Exists checks if the AppState row exists.
func (o *AppState) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AppStateExists(ctx, exec, o.Module, o.Key)
}
