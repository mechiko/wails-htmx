// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaskState is an object representing the database table.
type TaskState struct {
	ID    int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	State string `boil:"state" json:"state" toml:"state" yaml:"state"`
	Rem   string `boil:"rem" json:"rem" toml:"rem" yaml:"rem"`

	R *taskStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskStateColumns = struct {
	ID    string
	State string
	Rem   string
}{
	ID:    "id",
	State: "state",
	Rem:   "rem",
}

var TaskStateTableColumns = struct {
	ID    string
	State string
	Rem   string
}{
	ID:    "task_state.id",
	State: "task_state.state",
	Rem:   "task_state.rem",
}

// Generated where

var TaskStateWhere = struct {
	ID    whereHelperint64
	State whereHelperstring
	Rem   whereHelperstring
}{
	ID:    whereHelperint64{field: "\"task_state\".\"id\""},
	State: whereHelperstring{field: "\"task_state\".\"state\""},
	Rem:   whereHelperstring{field: "\"task_state\".\"rem\""},
}

// TaskStateRels is where relationship names are stored.
var TaskStateRels = struct {
}{}

// taskStateR is where relationships are stored.
type taskStateR struct {
}

// NewStruct creates a new relationship struct
func (*taskStateR) NewStruct() *taskStateR {
	return &taskStateR{}
}

// taskStateL is where Load methods for each relationship are stored.
type taskStateL struct{}

var (
	taskStateAllColumns            = []string{"id", "state", "rem"}
	taskStateColumnsWithoutDefault = []string{}
	taskStateColumnsWithDefault    = []string{"id", "state", "rem"}
	taskStatePrimaryKeyColumns     = []string{"id"}
	taskStateGeneratedColumns      = []string{"id"}
)

type (
	// TaskStateSlice is an alias for a slice of pointers to TaskState.
	// This should almost always be used instead of []TaskState.
	TaskStateSlice []*TaskState
	// TaskStateHook is the signature for custom TaskState hook methods
	TaskStateHook func(context.Context, boil.ContextExecutor, *TaskState) error

	taskStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskStateType                 = reflect.TypeOf(&TaskState{})
	taskStateMapping              = queries.MakeStructMapping(taskStateType)
	taskStatePrimaryKeyMapping, _ = queries.BindMapping(taskStateType, taskStateMapping, taskStatePrimaryKeyColumns)
	taskStateInsertCacheMut       sync.RWMutex
	taskStateInsertCache          = make(map[string]insertCache)
	taskStateUpdateCacheMut       sync.RWMutex
	taskStateUpdateCache          = make(map[string]updateCache)
	taskStateUpsertCacheMut       sync.RWMutex
	taskStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskStateAfterSelectMu sync.Mutex
var taskStateAfterSelectHooks []TaskStateHook

var taskStateBeforeInsertMu sync.Mutex
var taskStateBeforeInsertHooks []TaskStateHook
var taskStateAfterInsertMu sync.Mutex
var taskStateAfterInsertHooks []TaskStateHook

var taskStateBeforeUpdateMu sync.Mutex
var taskStateBeforeUpdateHooks []TaskStateHook
var taskStateAfterUpdateMu sync.Mutex
var taskStateAfterUpdateHooks []TaskStateHook

var taskStateBeforeDeleteMu sync.Mutex
var taskStateBeforeDeleteHooks []TaskStateHook
var taskStateAfterDeleteMu sync.Mutex
var taskStateAfterDeleteHooks []TaskStateHook

var taskStateBeforeUpsertMu sync.Mutex
var taskStateBeforeUpsertHooks []TaskStateHook
var taskStateAfterUpsertMu sync.Mutex
var taskStateAfterUpsertHooks []TaskStateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskStateHook registers your hook function for all future operations.
func AddTaskStateHook(hookPoint boil.HookPoint, taskStateHook TaskStateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taskStateAfterSelectMu.Lock()
		taskStateAfterSelectHooks = append(taskStateAfterSelectHooks, taskStateHook)
		taskStateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		taskStateBeforeInsertMu.Lock()
		taskStateBeforeInsertHooks = append(taskStateBeforeInsertHooks, taskStateHook)
		taskStateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		taskStateAfterInsertMu.Lock()
		taskStateAfterInsertHooks = append(taskStateAfterInsertHooks, taskStateHook)
		taskStateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		taskStateBeforeUpdateMu.Lock()
		taskStateBeforeUpdateHooks = append(taskStateBeforeUpdateHooks, taskStateHook)
		taskStateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		taskStateAfterUpdateMu.Lock()
		taskStateAfterUpdateHooks = append(taskStateAfterUpdateHooks, taskStateHook)
		taskStateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		taskStateBeforeDeleteMu.Lock()
		taskStateBeforeDeleteHooks = append(taskStateBeforeDeleteHooks, taskStateHook)
		taskStateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		taskStateAfterDeleteMu.Lock()
		taskStateAfterDeleteHooks = append(taskStateAfterDeleteHooks, taskStateHook)
		taskStateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		taskStateBeforeUpsertMu.Lock()
		taskStateBeforeUpsertHooks = append(taskStateBeforeUpsertHooks, taskStateHook)
		taskStateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		taskStateAfterUpsertMu.Lock()
		taskStateAfterUpsertHooks = append(taskStateAfterUpsertHooks, taskStateHook)
		taskStateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single taskState record from the query using the global executor.
func (q taskStateQuery) OneG(ctx context.Context) (*TaskState, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single taskState record from the query.
func (q taskStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskState, error) {
	o := &TaskState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for task_state")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TaskState records from the query using the global executor.
func (q taskStateQuery) AllG(ctx context.Context) (TaskStateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TaskState records from the query.
func (q taskStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskStateSlice, error) {
	var o []*TaskState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to TaskState slice")
	}

	if len(taskStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TaskState records in the query using the global executor
func (q taskStateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TaskState records in the query.
func (q taskStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count task_state rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q taskStateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q taskStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if task_state exists")
	}

	return count > 0, nil
}

// TaskStates retrieves all the records using an executor.
func TaskStates(mods ...qm.QueryMod) taskStateQuery {
	mods = append(mods, qm.From("\"task_state\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"task_state\".*"})
	}

	return taskStateQuery{q}
}

// FindTaskStateG retrieves a single record by ID.
func FindTaskStateG(ctx context.Context, iD int64, selectCols ...string) (*TaskState, error) {
	return FindTaskState(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTaskState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskState(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TaskState, error) {
	taskStateObj := &TaskState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"task_state\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, taskStateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from task_state")
	}

	if err = taskStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taskStateObj, err
	}

	return taskStateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TaskState) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no task_state provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskStateInsertCacheMut.RLock()
	cache, cached := taskStateInsertCache[key]
	taskStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskStateAllColumns,
			taskStateColumnsWithDefault,
			taskStateColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, taskStateGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(taskStateType, taskStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskStateType, taskStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"task_state\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"task_state\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into task_state")
	}

	if !cached {
		taskStateInsertCacheMut.Lock()
		taskStateInsertCache[key] = cache
		taskStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TaskState record using the global executor.
// See Update for more documentation.
func (o *TaskState) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TaskState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskStateUpdateCacheMut.RLock()
	cache, cached := taskStateUpdateCache[key]
	taskStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskStateAllColumns,
			taskStatePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, taskStateGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update task_state, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"task_state\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, taskStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskStateType, taskStateMapping, append(wl, taskStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update task_state row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for task_state")
	}

	if !cached {
		taskStateUpdateCacheMut.Lock()
		taskStateUpdateCache[key] = cache
		taskStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q taskStateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q taskStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for task_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for task_state")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TaskStateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"task_state\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in taskState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all taskState")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TaskState) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no task_state provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskStateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskStateUpsertCacheMut.RLock()
	cache, cached := taskStateUpsertCache[key]
	taskStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskStateAllColumns,
			taskStateColumnsWithDefault,
			taskStateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			taskStateAllColumns,
			taskStatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert task_state, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taskStatePrimaryKeyColumns))
			copy(conflict, taskStatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"task_state\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taskStateType, taskStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskStateType, taskStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert task_state")
	}

	if !cached {
		taskStateUpsertCacheMut.Lock()
		taskStateUpsertCache[key] = cache
		taskStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TaskState record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TaskState) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TaskState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskState) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no TaskState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskStatePrimaryKeyMapping)
	sql := "DELETE FROM \"task_state\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from task_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for task_state")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q taskStateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q taskStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no taskStateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from task_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for task_state")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TaskStateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"task_state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskStatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from taskState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for task_state")
	}

	if len(taskStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TaskState) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no TaskState provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaskState(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskStateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty TaskStateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"task_state\".* FROM \"task_state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskStatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in TaskStateSlice")
	}

	*o = slice

	return nil
}

// TaskStateExistsG checks if the TaskState row exists.
func TaskStateExistsG(ctx context.Context, iD int64) (bool, error) {
	return TaskStateExists(ctx, boil.GetContextDB(), iD)
}

// TaskStateExists checks if the TaskState row exists.
func TaskStateExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"task_state\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if task_state exists")
	}

	return exists, nil
}

// Exists checks if the TaskState row exists.
func (o *TaskState) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TaskStateExists(ctx, exec, o.ID)
}
