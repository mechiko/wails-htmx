// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Rest is an object representing the database table.
type Rest struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Fsrarid       null.String `boil:"fsrarid" json:"fsrarid,omitempty" toml:"fsrarid" yaml:"fsrarid,omitempty"`
	TaskID        null.Int64  `boil:"task_id" json:"task_id,omitempty" toml:"task_id" yaml:"task_id,omitempty"`
	CreatedAt     null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Daterest      null.String `boil:"daterest" json:"daterest,omitempty" toml:"daterest" yaml:"daterest,omitempty"`
	Quantity      null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Informf1regid null.String `boil:"informf1regid" json:"informf1regid,omitempty" toml:"informf1regid" yaml:"informf1regid,omitempty"`
	Informf2regid null.String `boil:"informf2regid" json:"informf2regid,omitempty" toml:"informf2regid" yaml:"informf2regid,omitempty"`
	Alccode       null.String `boil:"alccode" json:"alccode,omitempty" toml:"alccode" yaml:"alccode,omitempty"`

	R *restR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestColumns = struct {
	ID            string
	Fsrarid       string
	TaskID        string
	CreatedAt     string
	UpdatedAt     string
	Daterest      string
	Quantity      string
	Informf1regid string
	Informf2regid string
	Alccode       string
}{
	ID:            "id",
	Fsrarid:       "fsrarid",
	TaskID:        "task_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	Daterest:      "daterest",
	Quantity:      "quantity",
	Informf1regid: "informf1regid",
	Informf2regid: "informf2regid",
	Alccode:       "alccode",
}

var RestTableColumns = struct {
	ID            string
	Fsrarid       string
	TaskID        string
	CreatedAt     string
	UpdatedAt     string
	Daterest      string
	Quantity      string
	Informf1regid string
	Informf2regid string
	Alccode       string
}{
	ID:            "rest.id",
	Fsrarid:       "rest.fsrarid",
	TaskID:        "rest.task_id",
	CreatedAt:     "rest.created_at",
	UpdatedAt:     "rest.updated_at",
	Daterest:      "rest.daterest",
	Quantity:      "rest.quantity",
	Informf1regid: "rest.informf1regid",
	Informf2regid: "rest.informf2regid",
	Alccode:       "rest.alccode",
}

// Generated where

var RestWhere = struct {
	ID            whereHelperint64
	Fsrarid       whereHelpernull_String
	TaskID        whereHelpernull_Int64
	CreatedAt     whereHelpernull_String
	UpdatedAt     whereHelpernull_String
	Daterest      whereHelpernull_String
	Quantity      whereHelpernull_String
	Informf1regid whereHelpernull_String
	Informf2regid whereHelpernull_String
	Alccode       whereHelpernull_String
}{
	ID:            whereHelperint64{field: "\"rest\".\"id\""},
	Fsrarid:       whereHelpernull_String{field: "\"rest\".\"fsrarid\""},
	TaskID:        whereHelpernull_Int64{field: "\"rest\".\"task_id\""},
	CreatedAt:     whereHelpernull_String{field: "\"rest\".\"created_at\""},
	UpdatedAt:     whereHelpernull_String{field: "\"rest\".\"updated_at\""},
	Daterest:      whereHelpernull_String{field: "\"rest\".\"daterest\""},
	Quantity:      whereHelpernull_String{field: "\"rest\".\"quantity\""},
	Informf1regid: whereHelpernull_String{field: "\"rest\".\"informf1regid\""},
	Informf2regid: whereHelpernull_String{field: "\"rest\".\"informf2regid\""},
	Alccode:       whereHelpernull_String{field: "\"rest\".\"alccode\""},
}

// RestRels is where relationship names are stored.
var RestRels = struct {
}{}

// restR is where relationships are stored.
type restR struct {
}

// NewStruct creates a new relationship struct
func (*restR) NewStruct() *restR {
	return &restR{}
}

// restL is where Load methods for each relationship are stored.
type restL struct{}

var (
	restAllColumns            = []string{"id", "fsrarid", "task_id", "created_at", "updated_at", "daterest", "quantity", "informf1regid", "informf2regid", "alccode"}
	restColumnsWithoutDefault = []string{}
	restColumnsWithDefault    = []string{"id", "fsrarid", "task_id", "created_at", "updated_at", "daterest", "quantity", "informf1regid", "informf2regid", "alccode"}
	restPrimaryKeyColumns     = []string{"id"}
	restGeneratedColumns      = []string{"id"}
)

type (
	// RestSlice is an alias for a slice of pointers to Rest.
	// This should almost always be used instead of []Rest.
	RestSlice []*Rest
	// RestHook is the signature for custom Rest hook methods
	RestHook func(context.Context, boil.ContextExecutor, *Rest) error

	restQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restType                 = reflect.TypeOf(&Rest{})
	restMapping              = queries.MakeStructMapping(restType)
	restPrimaryKeyMapping, _ = queries.BindMapping(restType, restMapping, restPrimaryKeyColumns)
	restInsertCacheMut       sync.RWMutex
	restInsertCache          = make(map[string]insertCache)
	restUpdateCacheMut       sync.RWMutex
	restUpdateCache          = make(map[string]updateCache)
	restUpsertCacheMut       sync.RWMutex
	restUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restAfterSelectMu sync.Mutex
var restAfterSelectHooks []RestHook

var restBeforeInsertMu sync.Mutex
var restBeforeInsertHooks []RestHook
var restAfterInsertMu sync.Mutex
var restAfterInsertHooks []RestHook

var restBeforeUpdateMu sync.Mutex
var restBeforeUpdateHooks []RestHook
var restAfterUpdateMu sync.Mutex
var restAfterUpdateHooks []RestHook

var restBeforeDeleteMu sync.Mutex
var restBeforeDeleteHooks []RestHook
var restAfterDeleteMu sync.Mutex
var restAfterDeleteHooks []RestHook

var restBeforeUpsertMu sync.Mutex
var restBeforeUpsertHooks []RestHook
var restAfterUpsertMu sync.Mutex
var restAfterUpsertHooks []RestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestHook registers your hook function for all future operations.
func AddRestHook(hookPoint boil.HookPoint, restHook RestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		restAfterSelectMu.Lock()
		restAfterSelectHooks = append(restAfterSelectHooks, restHook)
		restAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		restBeforeInsertMu.Lock()
		restBeforeInsertHooks = append(restBeforeInsertHooks, restHook)
		restBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		restAfterInsertMu.Lock()
		restAfterInsertHooks = append(restAfterInsertHooks, restHook)
		restAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		restBeforeUpdateMu.Lock()
		restBeforeUpdateHooks = append(restBeforeUpdateHooks, restHook)
		restBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		restAfterUpdateMu.Lock()
		restAfterUpdateHooks = append(restAfterUpdateHooks, restHook)
		restAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		restBeforeDeleteMu.Lock()
		restBeforeDeleteHooks = append(restBeforeDeleteHooks, restHook)
		restBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		restAfterDeleteMu.Lock()
		restAfterDeleteHooks = append(restAfterDeleteHooks, restHook)
		restAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		restBeforeUpsertMu.Lock()
		restBeforeUpsertHooks = append(restBeforeUpsertHooks, restHook)
		restBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		restAfterUpsertMu.Lock()
		restAfterUpsertHooks = append(restAfterUpsertHooks, restHook)
		restAfterUpsertMu.Unlock()
	}
}

// OneG returns a single rest record from the query using the global executor.
func (q restQuery) OneG(ctx context.Context) (*Rest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single rest record from the query.
func (q restQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rest, error) {
	o := &Rest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for rest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Rest records from the query using the global executor.
func (q restQuery) AllG(ctx context.Context) (RestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Rest records from the query.
func (q restQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestSlice, error) {
	var o []*Rest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Rest slice")
	}

	if len(restAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Rest records in the query using the global executor
func (q restQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Rest records in the query.
func (q restQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count rest rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q restQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q restQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if rest exists")
	}

	return count > 0, nil
}

// Rests retrieves all the records using an executor.
func Rests(mods ...qm.QueryMod) restQuery {
	mods = append(mods, qm.From("\"rest\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rest\".*"})
	}

	return restQuery{q}
}

// FindRestG retrieves a single record by ID.
func FindRestG(ctx context.Context, iD int64, selectCols ...string) (*Rest, error) {
	return FindRest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Rest, error) {
	restObj := &Rest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rest\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from rest")
	}

	if err = restObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restObj, err
	}

	return restObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Rest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no rest provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restInsertCacheMut.RLock()
	cache, cached := restInsertCache[key]
	restInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restAllColumns,
			restColumnsWithDefault,
			restColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, restGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(restType, restMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restType, restMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rest\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rest\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into rest")
	}

	if !cached {
		restInsertCacheMut.Lock()
		restInsertCache[key] = cache
		restInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Rest record using the global executor.
// See Update for more documentation.
func (o *Rest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Rest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restUpdateCacheMut.RLock()
	cache, cached := restUpdateCache[key]
	restUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restAllColumns,
			restPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, restGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update rest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rest\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, restPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restType, restMapping, append(wl, restPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update rest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for rest")
	}

	if !cached {
		restUpdateCacheMut.Lock()
		restUpdateCache[key] = cache
		restUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q restQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q restQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for rest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for rest")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rest\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in rest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all rest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Rest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no rest provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restUpsertCacheMut.RLock()
	cache, cached := restUpsertCache[key]
	restUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restAllColumns,
			restColumnsWithDefault,
			restColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restAllColumns,
			restPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert rest, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restPrimaryKeyColumns))
			copy(conflict, restPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"rest\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restType, restMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restType, restMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert rest")
	}

	if !cached {
		restUpsertCacheMut.Lock()
		restUpsertCache[key] = cache
		restUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Rest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Rest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Rest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Rest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restPrimaryKeyMapping)
	sql := "DELETE FROM \"rest\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from rest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for rest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q restQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q restQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no restQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from rest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for rest")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rest\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from rest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for rest")
	}

	if len(restAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Rest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Rest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty RestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rest\".* FROM \"rest\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in RestSlice")
	}

	*o = slice

	return nil
}

// RestExistsG checks if the Rest row exists.
func RestExistsG(ctx context.Context, iD int64) (bool, error) {
	return RestExists(ctx, boil.GetContextDB(), iD)
}

// RestExists checks if the Rest row exists.
func RestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rest\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if rest exists")
	}

	return exists, nil
}

// Exists checks if the Rest row exists.
func (o *Rest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RestExists(ctx, exec, o.ID)
}
