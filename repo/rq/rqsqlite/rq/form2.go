// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Form2 is an object representing the database table.
type Form2 struct {
	InformF2RegID        string      `boil:"inform_f2_reg_id" json:"inform_f2_reg_id" toml:"inform_f2_reg_id" yaml:"inform_f2_reg_id"`
	RequestID            int64       `boil:"request_id" json:"request_id" toml:"request_id" yaml:"request_id"`
	CreatedAt            null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt            null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	TTNNumber            string      `boil:"ttn_number" json:"ttn_number" toml:"ttn_number" yaml:"ttn_number"`
	TTNDate              string      `boil:"ttn_date" json:"ttn_date" toml:"ttn_date" yaml:"ttn_date"`
	ShippingDate         string      `boil:"shipping_date" json:"shipping_date" toml:"shipping_date" yaml:"shipping_date"`
	ShipperClientRegID   string      `boil:"shipper_client_reg_id" json:"shipper_client_reg_id" toml:"shipper_client_reg_id" yaml:"shipper_client_reg_id"`
	ConsigneeClientRegID string      `boil:"consignee_client_reg_id" json:"consignee_client_reg_id" toml:"consignee_client_reg_id" yaml:"consignee_client_reg_id"`
	ProductAlcCode       string      `boil:"product_alc_code" json:"product_alc_code" toml:"product_alc_code" yaml:"product_alc_code"`
	ProductQuantity      string      `boil:"product_quantity" json:"product_quantity" toml:"product_quantity" yaml:"product_quantity"`
	ProducerClientRegID  string      `boil:"producer_client_reg_id" json:"producer_client_reg_id" toml:"producer_client_reg_id" yaml:"producer_client_reg_id"`
	Rem                  string      `boil:"rem" json:"rem" toml:"rem" yaml:"rem"`

	R *form2R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L form2L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Form2Columns = struct {
	InformF2RegID        string
	RequestID            string
	CreatedAt            string
	UpdatedAt            string
	TTNNumber            string
	TTNDate              string
	ShippingDate         string
	ShipperClientRegID   string
	ConsigneeClientRegID string
	ProductAlcCode       string
	ProductQuantity      string
	ProducerClientRegID  string
	Rem                  string
}{
	InformF2RegID:        "inform_f2_reg_id",
	RequestID:            "request_id",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	TTNNumber:            "ttn_number",
	TTNDate:              "ttn_date",
	ShippingDate:         "shipping_date",
	ShipperClientRegID:   "shipper_client_reg_id",
	ConsigneeClientRegID: "consignee_client_reg_id",
	ProductAlcCode:       "product_alc_code",
	ProductQuantity:      "product_quantity",
	ProducerClientRegID:  "producer_client_reg_id",
	Rem:                  "rem",
}

var Form2TableColumns = struct {
	InformF2RegID        string
	RequestID            string
	CreatedAt            string
	UpdatedAt            string
	TTNNumber            string
	TTNDate              string
	ShippingDate         string
	ShipperClientRegID   string
	ConsigneeClientRegID string
	ProductAlcCode       string
	ProductQuantity      string
	ProducerClientRegID  string
	Rem                  string
}{
	InformF2RegID:        "form2.inform_f2_reg_id",
	RequestID:            "form2.request_id",
	CreatedAt:            "form2.created_at",
	UpdatedAt:            "form2.updated_at",
	TTNNumber:            "form2.ttn_number",
	TTNDate:              "form2.ttn_date",
	ShippingDate:         "form2.shipping_date",
	ShipperClientRegID:   "form2.shipper_client_reg_id",
	ConsigneeClientRegID: "form2.consignee_client_reg_id",
	ProductAlcCode:       "form2.product_alc_code",
	ProductQuantity:      "form2.product_quantity",
	ProducerClientRegID:  "form2.producer_client_reg_id",
	Rem:                  "form2.rem",
}

// Generated where

var Form2Where = struct {
	InformF2RegID        whereHelperstring
	RequestID            whereHelperint64
	CreatedAt            whereHelpernull_String
	UpdatedAt            whereHelpernull_String
	TTNNumber            whereHelperstring
	TTNDate              whereHelperstring
	ShippingDate         whereHelperstring
	ShipperClientRegID   whereHelperstring
	ConsigneeClientRegID whereHelperstring
	ProductAlcCode       whereHelperstring
	ProductQuantity      whereHelperstring
	ProducerClientRegID  whereHelperstring
	Rem                  whereHelperstring
}{
	InformF2RegID:        whereHelperstring{field: "\"form2\".\"inform_f2_reg_id\""},
	RequestID:            whereHelperint64{field: "\"form2\".\"request_id\""},
	CreatedAt:            whereHelpernull_String{field: "\"form2\".\"created_at\""},
	UpdatedAt:            whereHelpernull_String{field: "\"form2\".\"updated_at\""},
	TTNNumber:            whereHelperstring{field: "\"form2\".\"ttn_number\""},
	TTNDate:              whereHelperstring{field: "\"form2\".\"ttn_date\""},
	ShippingDate:         whereHelperstring{field: "\"form2\".\"shipping_date\""},
	ShipperClientRegID:   whereHelperstring{field: "\"form2\".\"shipper_client_reg_id\""},
	ConsigneeClientRegID: whereHelperstring{field: "\"form2\".\"consignee_client_reg_id\""},
	ProductAlcCode:       whereHelperstring{field: "\"form2\".\"product_alc_code\""},
	ProductQuantity:      whereHelperstring{field: "\"form2\".\"product_quantity\""},
	ProducerClientRegID:  whereHelperstring{field: "\"form2\".\"producer_client_reg_id\""},
	Rem:                  whereHelperstring{field: "\"form2\".\"rem\""},
}

// Form2Rels is where relationship names are stored.
var Form2Rels = struct {
}{}

// form2R is where relationships are stored.
type form2R struct {
}

// NewStruct creates a new relationship struct
func (*form2R) NewStruct() *form2R {
	return &form2R{}
}

// form2L is where Load methods for each relationship are stored.
type form2L struct{}

var (
	form2AllColumns            = []string{"inform_f2_reg_id", "request_id", "created_at", "updated_at", "ttn_number", "ttn_date", "shipping_date", "shipper_client_reg_id", "consignee_client_reg_id", "product_alc_code", "product_quantity", "producer_client_reg_id", "rem"}
	form2ColumnsWithoutDefault = []string{"inform_f2_reg_id"}
	form2ColumnsWithDefault    = []string{"request_id", "created_at", "updated_at", "ttn_number", "ttn_date", "shipping_date", "shipper_client_reg_id", "consignee_client_reg_id", "product_alc_code", "product_quantity", "producer_client_reg_id", "rem"}
	form2PrimaryKeyColumns     = []string{"inform_f2_reg_id"}
	form2GeneratedColumns      = []string{}
)

type (
	// Form2Slice is an alias for a slice of pointers to Form2.
	// This should almost always be used instead of []Form2.
	Form2Slice []*Form2
	// Form2Hook is the signature for custom Form2 hook methods
	Form2Hook func(context.Context, boil.ContextExecutor, *Form2) error

	form2Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	form2Type                 = reflect.TypeOf(&Form2{})
	form2Mapping              = queries.MakeStructMapping(form2Type)
	form2PrimaryKeyMapping, _ = queries.BindMapping(form2Type, form2Mapping, form2PrimaryKeyColumns)
	form2InsertCacheMut       sync.RWMutex
	form2InsertCache          = make(map[string]insertCache)
	form2UpdateCacheMut       sync.RWMutex
	form2UpdateCache          = make(map[string]updateCache)
	form2UpsertCacheMut       sync.RWMutex
	form2UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var form2AfterSelectMu sync.Mutex
var form2AfterSelectHooks []Form2Hook

var form2BeforeInsertMu sync.Mutex
var form2BeforeInsertHooks []Form2Hook
var form2AfterInsertMu sync.Mutex
var form2AfterInsertHooks []Form2Hook

var form2BeforeUpdateMu sync.Mutex
var form2BeforeUpdateHooks []Form2Hook
var form2AfterUpdateMu sync.Mutex
var form2AfterUpdateHooks []Form2Hook

var form2BeforeDeleteMu sync.Mutex
var form2BeforeDeleteHooks []Form2Hook
var form2AfterDeleteMu sync.Mutex
var form2AfterDeleteHooks []Form2Hook

var form2BeforeUpsertMu sync.Mutex
var form2BeforeUpsertHooks []Form2Hook
var form2AfterUpsertMu sync.Mutex
var form2AfterUpsertHooks []Form2Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Form2) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Form2) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Form2) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Form2) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Form2) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Form2) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Form2) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Form2) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Form2) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range form2AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForm2Hook registers your hook function for all future operations.
func AddForm2Hook(hookPoint boil.HookPoint, form2Hook Form2Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		form2AfterSelectMu.Lock()
		form2AfterSelectHooks = append(form2AfterSelectHooks, form2Hook)
		form2AfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		form2BeforeInsertMu.Lock()
		form2BeforeInsertHooks = append(form2BeforeInsertHooks, form2Hook)
		form2BeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		form2AfterInsertMu.Lock()
		form2AfterInsertHooks = append(form2AfterInsertHooks, form2Hook)
		form2AfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		form2BeforeUpdateMu.Lock()
		form2BeforeUpdateHooks = append(form2BeforeUpdateHooks, form2Hook)
		form2BeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		form2AfterUpdateMu.Lock()
		form2AfterUpdateHooks = append(form2AfterUpdateHooks, form2Hook)
		form2AfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		form2BeforeDeleteMu.Lock()
		form2BeforeDeleteHooks = append(form2BeforeDeleteHooks, form2Hook)
		form2BeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		form2AfterDeleteMu.Lock()
		form2AfterDeleteHooks = append(form2AfterDeleteHooks, form2Hook)
		form2AfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		form2BeforeUpsertMu.Lock()
		form2BeforeUpsertHooks = append(form2BeforeUpsertHooks, form2Hook)
		form2BeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		form2AfterUpsertMu.Lock()
		form2AfterUpsertHooks = append(form2AfterUpsertHooks, form2Hook)
		form2AfterUpsertMu.Unlock()
	}
}

// OneG returns a single form2 record from the query using the global executor.
func (q form2Query) OneG(ctx context.Context) (*Form2, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single form2 record from the query.
func (q form2Query) One(ctx context.Context, exec boil.ContextExecutor) (*Form2, error) {
	o := &Form2{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for form2")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Form2 records from the query using the global executor.
func (q form2Query) AllG(ctx context.Context) (Form2Slice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Form2 records from the query.
func (q form2Query) All(ctx context.Context, exec boil.ContextExecutor) (Form2Slice, error) {
	var o []*Form2

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Form2 slice")
	}

	if len(form2AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Form2 records in the query using the global executor
func (q form2Query) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Form2 records in the query.
func (q form2Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count form2 rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q form2Query) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q form2Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if form2 exists")
	}

	return count > 0, nil
}

// Form2s retrieves all the records using an executor.
func Form2s(mods ...qm.QueryMod) form2Query {
	mods = append(mods, qm.From("\"form2\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"form2\".*"})
	}

	return form2Query{q}
}

// FindForm2G retrieves a single record by ID.
func FindForm2G(ctx context.Context, informF2RegID string, selectCols ...string) (*Form2, error) {
	return FindForm2(ctx, boil.GetContextDB(), informF2RegID, selectCols...)
}

// FindForm2 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForm2(ctx context.Context, exec boil.ContextExecutor, informF2RegID string, selectCols ...string) (*Form2, error) {
	form2Obj := &Form2{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"form2\" where \"inform_f2_reg_id\"=?", sel,
	)

	q := queries.Raw(query, informF2RegID)

	err := q.Bind(ctx, exec, form2Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from form2")
	}

	if err = form2Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return form2Obj, err
	}

	return form2Obj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Form2) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Form2) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no form2 provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(form2ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	form2InsertCacheMut.RLock()
	cache, cached := form2InsertCache[key]
	form2InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			form2AllColumns,
			form2ColumnsWithDefault,
			form2ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(form2Type, form2Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(form2Type, form2Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"form2\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"form2\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into form2")
	}

	if !cached {
		form2InsertCacheMut.Lock()
		form2InsertCache[key] = cache
		form2InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Form2 record using the global executor.
// See Update for more documentation.
func (o *Form2) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Form2.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Form2) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	form2UpdateCacheMut.RLock()
	cache, cached := form2UpdateCache[key]
	form2UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			form2AllColumns,
			form2PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update form2, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"form2\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, form2PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(form2Type, form2Mapping, append(wl, form2PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update form2 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for form2")
	}

	if !cached {
		form2UpdateCacheMut.Lock()
		form2UpdateCache[key] = cache
		form2UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q form2Query) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q form2Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for form2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for form2")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o Form2Slice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Form2Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), form2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"form2\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, form2PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in form2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all form2")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Form2) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Form2) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no form2 provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(form2ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	form2UpsertCacheMut.RLock()
	cache, cached := form2UpsertCache[key]
	form2UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			form2AllColumns,
			form2ColumnsWithDefault,
			form2ColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			form2AllColumns,
			form2PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert form2, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(form2PrimaryKeyColumns))
			copy(conflict, form2PrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"form2\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(form2Type, form2Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(form2Type, form2Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert form2")
	}

	if !cached {
		form2UpsertCacheMut.Lock()
		form2UpsertCache[key] = cache
		form2UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Form2 record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Form2) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Form2 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Form2) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Form2 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), form2PrimaryKeyMapping)
	sql := "DELETE FROM \"form2\" WHERE \"inform_f2_reg_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from form2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for form2")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q form2Query) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q form2Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no form2Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from form2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for form2")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o Form2Slice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Form2Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(form2BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), form2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"form2\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, form2PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from form2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for form2")
	}

	if len(form2AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Form2) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Form2 provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Form2) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindForm2(ctx, exec, o.InformF2RegID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Form2Slice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty Form2Slice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Form2Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Form2Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), form2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"form2\".* FROM \"form2\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, form2PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in Form2Slice")
	}

	*o = slice

	return nil
}

// Form2ExistsG checks if the Form2 row exists.
func Form2ExistsG(ctx context.Context, informF2RegID string) (bool, error) {
	return Form2Exists(ctx, boil.GetContextDB(), informF2RegID)
}

// Form2Exists checks if the Form2 row exists.
func Form2Exists(ctx context.Context, exec boil.ContextExecutor, informF2RegID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"form2\" where \"inform_f2_reg_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, informF2RegID)
	}
	row := exec.QueryRowContext(ctx, sql, informF2RegID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if form2 exists")
	}

	return exists, nil
}

// Exists checks if the Form2 row exists.
func (o *Form2) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return Form2Exists(ctx, exec, o.InformF2RegID)
}
