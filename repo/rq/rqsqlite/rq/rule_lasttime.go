// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RuleLasttime is an object representing the database table.
type RuleLasttime struct {
	Rule         string      `boil:"rule" json:"rule" toml:"rule" yaml:"rule"`
	Fsrarid      string      `boil:"fsrarid" json:"fsrarid" toml:"fsrarid" yaml:"fsrarid"`
	SendTime     null.String `boil:"send_time" json:"send_time,omitempty" toml:"send_time" yaml:"send_time,omitempty"`
	ReceiveTime  null.String `boil:"receive_time" json:"receive_time,omitempty" toml:"receive_time" yaml:"receive_time,omitempty"`
	TimeoutError null.Int64  `boil:"timeout_error" json:"timeout_error,omitempty" toml:"timeout_error" yaml:"timeout_error,omitempty"`

	R *ruleLasttimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ruleLasttimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RuleLasttimeColumns = struct {
	Rule         string
	Fsrarid      string
	SendTime     string
	ReceiveTime  string
	TimeoutError string
}{
	Rule:         "rule",
	Fsrarid:      "fsrarid",
	SendTime:     "send_time",
	ReceiveTime:  "receive_time",
	TimeoutError: "timeout_error",
}

var RuleLasttimeTableColumns = struct {
	Rule         string
	Fsrarid      string
	SendTime     string
	ReceiveTime  string
	TimeoutError string
}{
	Rule:         "rule_lasttime.rule",
	Fsrarid:      "rule_lasttime.fsrarid",
	SendTime:     "rule_lasttime.send_time",
	ReceiveTime:  "rule_lasttime.receive_time",
	TimeoutError: "rule_lasttime.timeout_error",
}

// Generated where

var RuleLasttimeWhere = struct {
	Rule         whereHelperstring
	Fsrarid      whereHelperstring
	SendTime     whereHelpernull_String
	ReceiveTime  whereHelpernull_String
	TimeoutError whereHelpernull_Int64
}{
	Rule:         whereHelperstring{field: "\"rule_lasttime\".\"rule\""},
	Fsrarid:      whereHelperstring{field: "\"rule_lasttime\".\"fsrarid\""},
	SendTime:     whereHelpernull_String{field: "\"rule_lasttime\".\"send_time\""},
	ReceiveTime:  whereHelpernull_String{field: "\"rule_lasttime\".\"receive_time\""},
	TimeoutError: whereHelpernull_Int64{field: "\"rule_lasttime\".\"timeout_error\""},
}

// RuleLasttimeRels is where relationship names are stored.
var RuleLasttimeRels = struct {
}{}

// ruleLasttimeR is where relationships are stored.
type ruleLasttimeR struct {
}

// NewStruct creates a new relationship struct
func (*ruleLasttimeR) NewStruct() *ruleLasttimeR {
	return &ruleLasttimeR{}
}

// ruleLasttimeL is where Load methods for each relationship are stored.
type ruleLasttimeL struct{}

var (
	ruleLasttimeAllColumns            = []string{"rule", "fsrarid", "send_time", "receive_time", "timeout_error"}
	ruleLasttimeColumnsWithoutDefault = []string{"rule", "fsrarid"}
	ruleLasttimeColumnsWithDefault    = []string{"send_time", "receive_time", "timeout_error"}
	ruleLasttimePrimaryKeyColumns     = []string{"rule", "fsrarid"}
	ruleLasttimeGeneratedColumns      = []string{}
)

type (
	// RuleLasttimeSlice is an alias for a slice of pointers to RuleLasttime.
	// This should almost always be used instead of []RuleLasttime.
	RuleLasttimeSlice []*RuleLasttime
	// RuleLasttimeHook is the signature for custom RuleLasttime hook methods
	RuleLasttimeHook func(context.Context, boil.ContextExecutor, *RuleLasttime) error

	ruleLasttimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ruleLasttimeType                 = reflect.TypeOf(&RuleLasttime{})
	ruleLasttimeMapping              = queries.MakeStructMapping(ruleLasttimeType)
	ruleLasttimePrimaryKeyMapping, _ = queries.BindMapping(ruleLasttimeType, ruleLasttimeMapping, ruleLasttimePrimaryKeyColumns)
	ruleLasttimeInsertCacheMut       sync.RWMutex
	ruleLasttimeInsertCache          = make(map[string]insertCache)
	ruleLasttimeUpdateCacheMut       sync.RWMutex
	ruleLasttimeUpdateCache          = make(map[string]updateCache)
	ruleLasttimeUpsertCacheMut       sync.RWMutex
	ruleLasttimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ruleLasttimeAfterSelectMu sync.Mutex
var ruleLasttimeAfterSelectHooks []RuleLasttimeHook

var ruleLasttimeBeforeInsertMu sync.Mutex
var ruleLasttimeBeforeInsertHooks []RuleLasttimeHook
var ruleLasttimeAfterInsertMu sync.Mutex
var ruleLasttimeAfterInsertHooks []RuleLasttimeHook

var ruleLasttimeBeforeUpdateMu sync.Mutex
var ruleLasttimeBeforeUpdateHooks []RuleLasttimeHook
var ruleLasttimeAfterUpdateMu sync.Mutex
var ruleLasttimeAfterUpdateHooks []RuleLasttimeHook

var ruleLasttimeBeforeDeleteMu sync.Mutex
var ruleLasttimeBeforeDeleteHooks []RuleLasttimeHook
var ruleLasttimeAfterDeleteMu sync.Mutex
var ruleLasttimeAfterDeleteHooks []RuleLasttimeHook

var ruleLasttimeBeforeUpsertMu sync.Mutex
var ruleLasttimeBeforeUpsertHooks []RuleLasttimeHook
var ruleLasttimeAfterUpsertMu sync.Mutex
var ruleLasttimeAfterUpsertHooks []RuleLasttimeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RuleLasttime) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RuleLasttime) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RuleLasttime) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RuleLasttime) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RuleLasttime) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RuleLasttime) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RuleLasttime) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RuleLasttime) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RuleLasttime) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ruleLasttimeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRuleLasttimeHook registers your hook function for all future operations.
func AddRuleLasttimeHook(hookPoint boil.HookPoint, ruleLasttimeHook RuleLasttimeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ruleLasttimeAfterSelectMu.Lock()
		ruleLasttimeAfterSelectHooks = append(ruleLasttimeAfterSelectHooks, ruleLasttimeHook)
		ruleLasttimeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ruleLasttimeBeforeInsertMu.Lock()
		ruleLasttimeBeforeInsertHooks = append(ruleLasttimeBeforeInsertHooks, ruleLasttimeHook)
		ruleLasttimeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ruleLasttimeAfterInsertMu.Lock()
		ruleLasttimeAfterInsertHooks = append(ruleLasttimeAfterInsertHooks, ruleLasttimeHook)
		ruleLasttimeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ruleLasttimeBeforeUpdateMu.Lock()
		ruleLasttimeBeforeUpdateHooks = append(ruleLasttimeBeforeUpdateHooks, ruleLasttimeHook)
		ruleLasttimeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ruleLasttimeAfterUpdateMu.Lock()
		ruleLasttimeAfterUpdateHooks = append(ruleLasttimeAfterUpdateHooks, ruleLasttimeHook)
		ruleLasttimeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ruleLasttimeBeforeDeleteMu.Lock()
		ruleLasttimeBeforeDeleteHooks = append(ruleLasttimeBeforeDeleteHooks, ruleLasttimeHook)
		ruleLasttimeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ruleLasttimeAfterDeleteMu.Lock()
		ruleLasttimeAfterDeleteHooks = append(ruleLasttimeAfterDeleteHooks, ruleLasttimeHook)
		ruleLasttimeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ruleLasttimeBeforeUpsertMu.Lock()
		ruleLasttimeBeforeUpsertHooks = append(ruleLasttimeBeforeUpsertHooks, ruleLasttimeHook)
		ruleLasttimeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ruleLasttimeAfterUpsertMu.Lock()
		ruleLasttimeAfterUpsertHooks = append(ruleLasttimeAfterUpsertHooks, ruleLasttimeHook)
		ruleLasttimeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ruleLasttime record from the query using the global executor.
func (q ruleLasttimeQuery) OneG(ctx context.Context) (*RuleLasttime, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ruleLasttime record from the query.
func (q ruleLasttimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RuleLasttime, error) {
	o := &RuleLasttime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for rule_lasttime")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RuleLasttime records from the query using the global executor.
func (q ruleLasttimeQuery) AllG(ctx context.Context) (RuleLasttimeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RuleLasttime records from the query.
func (q ruleLasttimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RuleLasttimeSlice, error) {
	var o []*RuleLasttime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to RuleLasttime slice")
	}

	if len(ruleLasttimeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RuleLasttime records in the query using the global executor
func (q ruleLasttimeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RuleLasttime records in the query.
func (q ruleLasttimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count rule_lasttime rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ruleLasttimeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ruleLasttimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if rule_lasttime exists")
	}

	return count > 0, nil
}

// RuleLasttimes retrieves all the records using an executor.
func RuleLasttimes(mods ...qm.QueryMod) ruleLasttimeQuery {
	mods = append(mods, qm.From("\"rule_lasttime\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rule_lasttime\".*"})
	}

	return ruleLasttimeQuery{q}
}

// FindRuleLasttimeG retrieves a single record by ID.
func FindRuleLasttimeG(ctx context.Context, rule string, fsrarid string, selectCols ...string) (*RuleLasttime, error) {
	return FindRuleLasttime(ctx, boil.GetContextDB(), rule, fsrarid, selectCols...)
}

// FindRuleLasttime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRuleLasttime(ctx context.Context, exec boil.ContextExecutor, rule string, fsrarid string, selectCols ...string) (*RuleLasttime, error) {
	ruleLasttimeObj := &RuleLasttime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rule_lasttime\" where \"rule\"=? AND \"fsrarid\"=?", sel,
	)

	q := queries.Raw(query, rule, fsrarid)

	err := q.Bind(ctx, exec, ruleLasttimeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from rule_lasttime")
	}

	if err = ruleLasttimeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ruleLasttimeObj, err
	}

	return ruleLasttimeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RuleLasttime) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RuleLasttime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no rule_lasttime provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ruleLasttimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ruleLasttimeInsertCacheMut.RLock()
	cache, cached := ruleLasttimeInsertCache[key]
	ruleLasttimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ruleLasttimeAllColumns,
			ruleLasttimeColumnsWithDefault,
			ruleLasttimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ruleLasttimeType, ruleLasttimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ruleLasttimeType, ruleLasttimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rule_lasttime\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rule_lasttime\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into rule_lasttime")
	}

	if !cached {
		ruleLasttimeInsertCacheMut.Lock()
		ruleLasttimeInsertCache[key] = cache
		ruleLasttimeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RuleLasttime record using the global executor.
// See Update for more documentation.
func (o *RuleLasttime) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RuleLasttime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RuleLasttime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ruleLasttimeUpdateCacheMut.RLock()
	cache, cached := ruleLasttimeUpdateCache[key]
	ruleLasttimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ruleLasttimeAllColumns,
			ruleLasttimePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update rule_lasttime, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rule_lasttime\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ruleLasttimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ruleLasttimeType, ruleLasttimeMapping, append(wl, ruleLasttimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update rule_lasttime row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for rule_lasttime")
	}

	if !cached {
		ruleLasttimeUpdateCacheMut.Lock()
		ruleLasttimeUpdateCache[key] = cache
		ruleLasttimeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ruleLasttimeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ruleLasttimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for rule_lasttime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for rule_lasttime")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RuleLasttimeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RuleLasttimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ruleLasttimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rule_lasttime\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ruleLasttimePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in ruleLasttime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all ruleLasttime")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RuleLasttime) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RuleLasttime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no rule_lasttime provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ruleLasttimeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ruleLasttimeUpsertCacheMut.RLock()
	cache, cached := ruleLasttimeUpsertCache[key]
	ruleLasttimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ruleLasttimeAllColumns,
			ruleLasttimeColumnsWithDefault,
			ruleLasttimeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ruleLasttimeAllColumns,
			ruleLasttimePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert rule_lasttime, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ruleLasttimePrimaryKeyColumns))
			copy(conflict, ruleLasttimePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"rule_lasttime\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ruleLasttimeType, ruleLasttimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ruleLasttimeType, ruleLasttimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert rule_lasttime")
	}

	if !cached {
		ruleLasttimeUpsertCacheMut.Lock()
		ruleLasttimeUpsertCache[key] = cache
		ruleLasttimeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RuleLasttime record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RuleLasttime) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RuleLasttime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RuleLasttime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no RuleLasttime provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ruleLasttimePrimaryKeyMapping)
	sql := "DELETE FROM \"rule_lasttime\" WHERE \"rule\"=? AND \"fsrarid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from rule_lasttime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for rule_lasttime")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ruleLasttimeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ruleLasttimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no ruleLasttimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from rule_lasttime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for rule_lasttime")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RuleLasttimeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RuleLasttimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ruleLasttimeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ruleLasttimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rule_lasttime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ruleLasttimePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from ruleLasttime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for rule_lasttime")
	}

	if len(ruleLasttimeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RuleLasttime) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no RuleLasttime provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RuleLasttime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRuleLasttime(ctx, exec, o.Rule, o.Fsrarid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RuleLasttimeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty RuleLasttimeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RuleLasttimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RuleLasttimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ruleLasttimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rule_lasttime\".* FROM \"rule_lasttime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ruleLasttimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in RuleLasttimeSlice")
	}

	*o = slice

	return nil
}

// RuleLasttimeExistsG checks if the RuleLasttime row exists.
func RuleLasttimeExistsG(ctx context.Context, rule string, fsrarid string) (bool, error) {
	return RuleLasttimeExists(ctx, boil.GetContextDB(), rule, fsrarid)
}

// RuleLasttimeExists checks if the RuleLasttime row exists.
func RuleLasttimeExists(ctx context.Context, exec boil.ContextExecutor, rule string, fsrarid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rule_lasttime\" where \"rule\"=? AND \"fsrarid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rule, fsrarid)
	}
	row := exec.QueryRowContext(ctx, sql, rule, fsrarid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if rule_lasttime exists")
	}

	return exists, nil
}

// Exists checks if the RuleLasttime row exists.
func (o *RuleLasttime) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RuleLasttimeExists(ctx, exec, o.Rule, o.Fsrarid)
}
