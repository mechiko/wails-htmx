// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Vidap is an object representing the database table.
type Vidap struct {
	Vcode   string `boil:"vcode" json:"vcode" toml:"vcode" yaml:"vcode"`
	Deleted int64  `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	Name    string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Typ     string `boil:"typ" json:"typ" toml:"typ" yaml:"typ"`
	Okved2  string `boil:"okved2" json:"okved2" toml:"okved2" yaml:"okved2"`
	Other   string `boil:"other" json:"other" toml:"other" yaml:"other"`

	R *vidapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vidapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VidapColumns = struct {
	Vcode   string
	Deleted string
	Name    string
	Typ     string
	Okved2  string
	Other   string
}{
	Vcode:   "vcode",
	Deleted: "deleted",
	Name:    "name",
	Typ:     "typ",
	Okved2:  "okved2",
	Other:   "other",
}

var VidapTableColumns = struct {
	Vcode   string
	Deleted string
	Name    string
	Typ     string
	Okved2  string
	Other   string
}{
	Vcode:   "vidap.vcode",
	Deleted: "vidap.deleted",
	Name:    "vidap.name",
	Typ:     "vidap.typ",
	Okved2:  "vidap.okved2",
	Other:   "vidap.other",
}

// Generated where

var VidapWhere = struct {
	Vcode   whereHelperstring
	Deleted whereHelperint64
	Name    whereHelperstring
	Typ     whereHelperstring
	Okved2  whereHelperstring
	Other   whereHelperstring
}{
	Vcode:   whereHelperstring{field: "\"vidap\".\"vcode\""},
	Deleted: whereHelperint64{field: "\"vidap\".\"deleted\""},
	Name:    whereHelperstring{field: "\"vidap\".\"name\""},
	Typ:     whereHelperstring{field: "\"vidap\".\"typ\""},
	Okved2:  whereHelperstring{field: "\"vidap\".\"okved2\""},
	Other:   whereHelperstring{field: "\"vidap\".\"other\""},
}

// VidapRels is where relationship names are stored.
var VidapRels = struct {
}{}

// vidapR is where relationships are stored.
type vidapR struct {
}

// NewStruct creates a new relationship struct
func (*vidapR) NewStruct() *vidapR {
	return &vidapR{}
}

// vidapL is where Load methods for each relationship are stored.
type vidapL struct{}

var (
	vidapAllColumns            = []string{"vcode", "deleted", "name", "typ", "okved2", "other"}
	vidapColumnsWithoutDefault = []string{"vcode"}
	vidapColumnsWithDefault    = []string{"deleted", "name", "typ", "okved2", "other"}
	vidapPrimaryKeyColumns     = []string{"vcode"}
	vidapGeneratedColumns      = []string{}
)

type (
	// VidapSlice is an alias for a slice of pointers to Vidap.
	// This should almost always be used instead of []Vidap.
	VidapSlice []*Vidap
	// VidapHook is the signature for custom Vidap hook methods
	VidapHook func(context.Context, boil.ContextExecutor, *Vidap) error

	vidapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vidapType                 = reflect.TypeOf(&Vidap{})
	vidapMapping              = queries.MakeStructMapping(vidapType)
	vidapPrimaryKeyMapping, _ = queries.BindMapping(vidapType, vidapMapping, vidapPrimaryKeyColumns)
	vidapInsertCacheMut       sync.RWMutex
	vidapInsertCache          = make(map[string]insertCache)
	vidapUpdateCacheMut       sync.RWMutex
	vidapUpdateCache          = make(map[string]updateCache)
	vidapUpsertCacheMut       sync.RWMutex
	vidapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vidapAfterSelectMu sync.Mutex
var vidapAfterSelectHooks []VidapHook

var vidapBeforeInsertMu sync.Mutex
var vidapBeforeInsertHooks []VidapHook
var vidapAfterInsertMu sync.Mutex
var vidapAfterInsertHooks []VidapHook

var vidapBeforeUpdateMu sync.Mutex
var vidapBeforeUpdateHooks []VidapHook
var vidapAfterUpdateMu sync.Mutex
var vidapAfterUpdateHooks []VidapHook

var vidapBeforeDeleteMu sync.Mutex
var vidapBeforeDeleteHooks []VidapHook
var vidapAfterDeleteMu sync.Mutex
var vidapAfterDeleteHooks []VidapHook

var vidapBeforeUpsertMu sync.Mutex
var vidapBeforeUpsertHooks []VidapHook
var vidapAfterUpsertMu sync.Mutex
var vidapAfterUpsertHooks []VidapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vidap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vidap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vidap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vidap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vidap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vidap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vidap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vidap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vidap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vidapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVidapHook registers your hook function for all future operations.
func AddVidapHook(hookPoint boil.HookPoint, vidapHook VidapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vidapAfterSelectMu.Lock()
		vidapAfterSelectHooks = append(vidapAfterSelectHooks, vidapHook)
		vidapAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vidapBeforeInsertMu.Lock()
		vidapBeforeInsertHooks = append(vidapBeforeInsertHooks, vidapHook)
		vidapBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vidapAfterInsertMu.Lock()
		vidapAfterInsertHooks = append(vidapAfterInsertHooks, vidapHook)
		vidapAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vidapBeforeUpdateMu.Lock()
		vidapBeforeUpdateHooks = append(vidapBeforeUpdateHooks, vidapHook)
		vidapBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vidapAfterUpdateMu.Lock()
		vidapAfterUpdateHooks = append(vidapAfterUpdateHooks, vidapHook)
		vidapAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vidapBeforeDeleteMu.Lock()
		vidapBeforeDeleteHooks = append(vidapBeforeDeleteHooks, vidapHook)
		vidapBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vidapAfterDeleteMu.Lock()
		vidapAfterDeleteHooks = append(vidapAfterDeleteHooks, vidapHook)
		vidapAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vidapBeforeUpsertMu.Lock()
		vidapBeforeUpsertHooks = append(vidapBeforeUpsertHooks, vidapHook)
		vidapBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vidapAfterUpsertMu.Lock()
		vidapAfterUpsertHooks = append(vidapAfterUpsertHooks, vidapHook)
		vidapAfterUpsertMu.Unlock()
	}
}

// OneG returns a single vidap record from the query using the global executor.
func (q vidapQuery) OneG(ctx context.Context) (*Vidap, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single vidap record from the query.
func (q vidapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vidap, error) {
	o := &Vidap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for vidap")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Vidap records from the query using the global executor.
func (q vidapQuery) AllG(ctx context.Context) (VidapSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Vidap records from the query.
func (q vidapQuery) All(ctx context.Context, exec boil.ContextExecutor) (VidapSlice, error) {
	var o []*Vidap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Vidap slice")
	}

	if len(vidapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Vidap records in the query using the global executor
func (q vidapQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Vidap records in the query.
func (q vidapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count vidap rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q vidapQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q vidapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if vidap exists")
	}

	return count > 0, nil
}

// Vidaps retrieves all the records using an executor.
func Vidaps(mods ...qm.QueryMod) vidapQuery {
	mods = append(mods, qm.From("\"vidap\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vidap\".*"})
	}

	return vidapQuery{q}
}

// FindVidapG retrieves a single record by ID.
func FindVidapG(ctx context.Context, vcode string, selectCols ...string) (*Vidap, error) {
	return FindVidap(ctx, boil.GetContextDB(), vcode, selectCols...)
}

// FindVidap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVidap(ctx context.Context, exec boil.ContextExecutor, vcode string, selectCols ...string) (*Vidap, error) {
	vidapObj := &Vidap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vidap\" where \"vcode\"=?", sel,
	)

	q := queries.Raw(query, vcode)

	err := q.Bind(ctx, exec, vidapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from vidap")
	}

	if err = vidapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vidapObj, err
	}

	return vidapObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Vidap) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vidap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no vidap provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vidapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vidapInsertCacheMut.RLock()
	cache, cached := vidapInsertCache[key]
	vidapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vidapAllColumns,
			vidapColumnsWithDefault,
			vidapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vidapType, vidapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vidapType, vidapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vidap\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vidap\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into vidap")
	}

	if !cached {
		vidapInsertCacheMut.Lock()
		vidapInsertCache[key] = cache
		vidapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Vidap record using the global executor.
// See Update for more documentation.
func (o *Vidap) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Vidap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vidap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vidapUpdateCacheMut.RLock()
	cache, cached := vidapUpdateCache[key]
	vidapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vidapAllColumns,
			vidapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update vidap, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vidap\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, vidapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vidapType, vidapMapping, append(wl, vidapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update vidap row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for vidap")
	}

	if !cached {
		vidapUpdateCacheMut.Lock()
		vidapUpdateCache[key] = cache
		vidapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q vidapQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q vidapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for vidap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for vidap")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o VidapSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VidapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vidapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vidap\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, vidapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in vidap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all vidap")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Vidap) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vidap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no vidap provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vidapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vidapUpsertCacheMut.RLock()
	cache, cached := vidapUpsertCache[key]
	vidapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vidapAllColumns,
			vidapColumnsWithDefault,
			vidapColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			vidapAllColumns,
			vidapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert vidap, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vidapPrimaryKeyColumns))
			copy(conflict, vidapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"vidap\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vidapType, vidapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vidapType, vidapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert vidap")
	}

	if !cached {
		vidapUpsertCacheMut.Lock()
		vidapUpsertCache[key] = cache
		vidapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Vidap record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Vidap) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Vidap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vidap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Vidap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vidapPrimaryKeyMapping)
	sql := "DELETE FROM \"vidap\" WHERE \"vcode\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from vidap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for vidap")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q vidapQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q vidapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no vidapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from vidap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for vidap")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o VidapSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VidapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vidapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vidapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vidap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, vidapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from vidap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for vidap")
	}

	if len(vidapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Vidap) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Vidap provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vidap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVidap(ctx, exec, o.Vcode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VidapSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty VidapSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VidapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VidapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vidapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vidap\".* FROM \"vidap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, vidapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in VidapSlice")
	}

	*o = slice

	return nil
}

// VidapExistsG checks if the Vidap row exists.
func VidapExistsG(ctx context.Context, vcode string) (bool, error) {
	return VidapExists(ctx, boil.GetContextDB(), vcode)
}

// VidapExists checks if the Vidap row exists.
func VidapExists(ctx context.Context, exec boil.ContextExecutor, vcode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vidap\" where \"vcode\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vcode)
	}
	row := exec.QueryRowContext(ctx, sql, vcode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if vidap exists")
	}

	return exists, nil
}

// Exists checks if the Vidap row exists.
func (o *Vidap) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VidapExists(ctx, exec, o.Vcode)
}
