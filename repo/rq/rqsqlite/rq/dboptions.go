// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Dboption is an object representing the database table.
type Dboption struct {
	Name  string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Value string `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *dboptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dboptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DboptionColumns = struct {
	Name  string
	Value string
}{
	Name:  "name",
	Value: "value",
}

var DboptionTableColumns = struct {
	Name  string
	Value string
}{
	Name:  "dboptions.name",
	Value: "dboptions.value",
}

// Generated where

var DboptionWhere = struct {
	Name  whereHelperstring
	Value whereHelperstring
}{
	Name:  whereHelperstring{field: "\"dboptions\".\"name\""},
	Value: whereHelperstring{field: "\"dboptions\".\"value\""},
}

// DboptionRels is where relationship names are stored.
var DboptionRels = struct {
}{}

// dboptionR is where relationships are stored.
type dboptionR struct {
}

// NewStruct creates a new relationship struct
func (*dboptionR) NewStruct() *dboptionR {
	return &dboptionR{}
}

// dboptionL is where Load methods for each relationship are stored.
type dboptionL struct{}

var (
	dboptionAllColumns            = []string{"name", "value"}
	dboptionColumnsWithoutDefault = []string{}
	dboptionColumnsWithDefault    = []string{"name", "value"}
	dboptionPrimaryKeyColumns     = []string{"name"}
	dboptionGeneratedColumns      = []string{}
)

type (
	// DboptionSlice is an alias for a slice of pointers to Dboption.
	// This should almost always be used instead of []Dboption.
	DboptionSlice []*Dboption
	// DboptionHook is the signature for custom Dboption hook methods
	DboptionHook func(context.Context, boil.ContextExecutor, *Dboption) error

	dboptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dboptionType                 = reflect.TypeOf(&Dboption{})
	dboptionMapping              = queries.MakeStructMapping(dboptionType)
	dboptionPrimaryKeyMapping, _ = queries.BindMapping(dboptionType, dboptionMapping, dboptionPrimaryKeyColumns)
	dboptionInsertCacheMut       sync.RWMutex
	dboptionInsertCache          = make(map[string]insertCache)
	dboptionUpdateCacheMut       sync.RWMutex
	dboptionUpdateCache          = make(map[string]updateCache)
	dboptionUpsertCacheMut       sync.RWMutex
	dboptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dboptionAfterSelectMu sync.Mutex
var dboptionAfterSelectHooks []DboptionHook

var dboptionBeforeInsertMu sync.Mutex
var dboptionBeforeInsertHooks []DboptionHook
var dboptionAfterInsertMu sync.Mutex
var dboptionAfterInsertHooks []DboptionHook

var dboptionBeforeUpdateMu sync.Mutex
var dboptionBeforeUpdateHooks []DboptionHook
var dboptionAfterUpdateMu sync.Mutex
var dboptionAfterUpdateHooks []DboptionHook

var dboptionBeforeDeleteMu sync.Mutex
var dboptionBeforeDeleteHooks []DboptionHook
var dboptionAfterDeleteMu sync.Mutex
var dboptionAfterDeleteHooks []DboptionHook

var dboptionBeforeUpsertMu sync.Mutex
var dboptionBeforeUpsertHooks []DboptionHook
var dboptionAfterUpsertMu sync.Mutex
var dboptionAfterUpsertHooks []DboptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dboption) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dboption) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dboption) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dboption) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dboption) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dboption) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dboption) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dboption) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dboption) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dboptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDboptionHook registers your hook function for all future operations.
func AddDboptionHook(hookPoint boil.HookPoint, dboptionHook DboptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dboptionAfterSelectMu.Lock()
		dboptionAfterSelectHooks = append(dboptionAfterSelectHooks, dboptionHook)
		dboptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dboptionBeforeInsertMu.Lock()
		dboptionBeforeInsertHooks = append(dboptionBeforeInsertHooks, dboptionHook)
		dboptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dboptionAfterInsertMu.Lock()
		dboptionAfterInsertHooks = append(dboptionAfterInsertHooks, dboptionHook)
		dboptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dboptionBeforeUpdateMu.Lock()
		dboptionBeforeUpdateHooks = append(dboptionBeforeUpdateHooks, dboptionHook)
		dboptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dboptionAfterUpdateMu.Lock()
		dboptionAfterUpdateHooks = append(dboptionAfterUpdateHooks, dboptionHook)
		dboptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dboptionBeforeDeleteMu.Lock()
		dboptionBeforeDeleteHooks = append(dboptionBeforeDeleteHooks, dboptionHook)
		dboptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dboptionAfterDeleteMu.Lock()
		dboptionAfterDeleteHooks = append(dboptionAfterDeleteHooks, dboptionHook)
		dboptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dboptionBeforeUpsertMu.Lock()
		dboptionBeforeUpsertHooks = append(dboptionBeforeUpsertHooks, dboptionHook)
		dboptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dboptionAfterUpsertMu.Lock()
		dboptionAfterUpsertHooks = append(dboptionAfterUpsertHooks, dboptionHook)
		dboptionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single dboption record from the query using the global executor.
func (q dboptionQuery) OneG(ctx context.Context) (*Dboption, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single dboption record from the query.
func (q dboptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dboption, error) {
	o := &Dboption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for dboptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Dboption records from the query using the global executor.
func (q dboptionQuery) AllG(ctx context.Context) (DboptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Dboption records from the query.
func (q dboptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DboptionSlice, error) {
	var o []*Dboption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Dboption slice")
	}

	if len(dboptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Dboption records in the query using the global executor
func (q dboptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Dboption records in the query.
func (q dboptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count dboptions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q dboptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q dboptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if dboptions exists")
	}

	return count > 0, nil
}

// Dboptions retrieves all the records using an executor.
func Dboptions(mods ...qm.QueryMod) dboptionQuery {
	mods = append(mods, qm.From("\"dboptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dboptions\".*"})
	}

	return dboptionQuery{q}
}

// FindDboptionG retrieves a single record by ID.
func FindDboptionG(ctx context.Context, name string, selectCols ...string) (*Dboption, error) {
	return FindDboption(ctx, boil.GetContextDB(), name, selectCols...)
}

// FindDboption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDboption(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*Dboption, error) {
	dboptionObj := &Dboption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dboptions\" where \"name\"=?", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, dboptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from dboptions")
	}

	if err = dboptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dboptionObj, err
	}

	return dboptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Dboption) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dboption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no dboptions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dboptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dboptionInsertCacheMut.RLock()
	cache, cached := dboptionInsertCache[key]
	dboptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dboptionAllColumns,
			dboptionColumnsWithDefault,
			dboptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dboptionType, dboptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dboptionType, dboptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dboptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dboptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into dboptions")
	}

	if !cached {
		dboptionInsertCacheMut.Lock()
		dboptionInsertCache[key] = cache
		dboptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Dboption record using the global executor.
// See Update for more documentation.
func (o *Dboption) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Dboption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dboption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dboptionUpdateCacheMut.RLock()
	cache, cached := dboptionUpdateCache[key]
	dboptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dboptionAllColumns,
			dboptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update dboptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dboptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, dboptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dboptionType, dboptionMapping, append(wl, dboptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update dboptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for dboptions")
	}

	if !cached {
		dboptionUpdateCacheMut.Lock()
		dboptionUpdateCache[key] = cache
		dboptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q dboptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q dboptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for dboptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for dboptions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DboptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DboptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dboptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dboptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dboptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in dboption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all dboption")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Dboption) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dboption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no dboptions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dboptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dboptionUpsertCacheMut.RLock()
	cache, cached := dboptionUpsertCache[key]
	dboptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dboptionAllColumns,
			dboptionColumnsWithDefault,
			dboptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dboptionAllColumns,
			dboptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert dboptions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dboptionPrimaryKeyColumns))
			copy(conflict, dboptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"dboptions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dboptionType, dboptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dboptionType, dboptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert dboptions")
	}

	if !cached {
		dboptionUpsertCacheMut.Lock()
		dboptionUpsertCache[key] = cache
		dboptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Dboption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Dboption) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Dboption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dboption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Dboption provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dboptionPrimaryKeyMapping)
	sql := "DELETE FROM \"dboptions\" WHERE \"name\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from dboptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for dboptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q dboptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q dboptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no dboptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from dboptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for dboptions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DboptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DboptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dboptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dboptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dboptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dboptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from dboption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for dboptions")
	}

	if len(dboptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Dboption) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Dboption provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dboption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDboption(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DboptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty DboptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DboptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DboptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dboptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dboptions\".* FROM \"dboptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dboptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in DboptionSlice")
	}

	*o = slice

	return nil
}

// DboptionExistsG checks if the Dboption row exists.
func DboptionExistsG(ctx context.Context, name string) (bool, error) {
	return DboptionExists(ctx, boil.GetContextDB(), name)
}

// DboptionExists checks if the Dboption row exists.
func DboptionExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dboptions\" where \"name\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if dboptions exists")
	}

	return exists, nil
}

// Exists checks if the Dboption row exists.
func (o *Dboption) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DboptionExists(ctx, exec, o.Name)
}
