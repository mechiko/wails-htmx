// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BackgroundTaskState is an object representing the database table.
type BackgroundTaskState struct {
	RequestID int64       `boil:"request_id" json:"request_id" toml:"request_id" yaml:"request_id"`
	Started   null.String `boil:"started" json:"started,omitempty" toml:"started" yaml:"started,omitempty"`
	Ended     string      `boil:"ended" json:"ended" toml:"ended" yaml:"ended"`
	Err       string      `boil:"err" json:"err" toml:"err" yaml:"err"`
	Completed int64       `boil:"completed" json:"completed" toml:"completed" yaml:"completed"`

	R *backgroundTaskStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L backgroundTaskStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BackgroundTaskStateColumns = struct {
	RequestID string
	Started   string
	Ended     string
	Err       string
	Completed string
}{
	RequestID: "request_id",
	Started:   "started",
	Ended:     "ended",
	Err:       "err",
	Completed: "completed",
}

var BackgroundTaskStateTableColumns = struct {
	RequestID string
	Started   string
	Ended     string
	Err       string
	Completed string
}{
	RequestID: "background_task_state.request_id",
	Started:   "background_task_state.started",
	Ended:     "background_task_state.ended",
	Err:       "background_task_state.err",
	Completed: "background_task_state.completed",
}

// Generated where

var BackgroundTaskStateWhere = struct {
	RequestID whereHelperint64
	Started   whereHelpernull_String
	Ended     whereHelperstring
	Err       whereHelperstring
	Completed whereHelperint64
}{
	RequestID: whereHelperint64{field: "\"background_task_state\".\"request_id\""},
	Started:   whereHelpernull_String{field: "\"background_task_state\".\"started\""},
	Ended:     whereHelperstring{field: "\"background_task_state\".\"ended\""},
	Err:       whereHelperstring{field: "\"background_task_state\".\"err\""},
	Completed: whereHelperint64{field: "\"background_task_state\".\"completed\""},
}

// BackgroundTaskStateRels is where relationship names are stored.
var BackgroundTaskStateRels = struct {
}{}

// backgroundTaskStateR is where relationships are stored.
type backgroundTaskStateR struct {
}

// NewStruct creates a new relationship struct
func (*backgroundTaskStateR) NewStruct() *backgroundTaskStateR {
	return &backgroundTaskStateR{}
}

// backgroundTaskStateL is where Load methods for each relationship are stored.
type backgroundTaskStateL struct{}

var (
	backgroundTaskStateAllColumns            = []string{"request_id", "started", "ended", "err", "completed"}
	backgroundTaskStateColumnsWithoutDefault = []string{}
	backgroundTaskStateColumnsWithDefault    = []string{"request_id", "started", "ended", "err", "completed"}
	backgroundTaskStatePrimaryKeyColumns     = []string{"request_id"}
	backgroundTaskStateGeneratedColumns      = []string{"request_id"}
)

type (
	// BackgroundTaskStateSlice is an alias for a slice of pointers to BackgroundTaskState.
	// This should almost always be used instead of []BackgroundTaskState.
	BackgroundTaskStateSlice []*BackgroundTaskState
	// BackgroundTaskStateHook is the signature for custom BackgroundTaskState hook methods
	BackgroundTaskStateHook func(context.Context, boil.ContextExecutor, *BackgroundTaskState) error

	backgroundTaskStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	backgroundTaskStateType                 = reflect.TypeOf(&BackgroundTaskState{})
	backgroundTaskStateMapping              = queries.MakeStructMapping(backgroundTaskStateType)
	backgroundTaskStatePrimaryKeyMapping, _ = queries.BindMapping(backgroundTaskStateType, backgroundTaskStateMapping, backgroundTaskStatePrimaryKeyColumns)
	backgroundTaskStateInsertCacheMut       sync.RWMutex
	backgroundTaskStateInsertCache          = make(map[string]insertCache)
	backgroundTaskStateUpdateCacheMut       sync.RWMutex
	backgroundTaskStateUpdateCache          = make(map[string]updateCache)
	backgroundTaskStateUpsertCacheMut       sync.RWMutex
	backgroundTaskStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var backgroundTaskStateAfterSelectMu sync.Mutex
var backgroundTaskStateAfterSelectHooks []BackgroundTaskStateHook

var backgroundTaskStateBeforeInsertMu sync.Mutex
var backgroundTaskStateBeforeInsertHooks []BackgroundTaskStateHook
var backgroundTaskStateAfterInsertMu sync.Mutex
var backgroundTaskStateAfterInsertHooks []BackgroundTaskStateHook

var backgroundTaskStateBeforeUpdateMu sync.Mutex
var backgroundTaskStateBeforeUpdateHooks []BackgroundTaskStateHook
var backgroundTaskStateAfterUpdateMu sync.Mutex
var backgroundTaskStateAfterUpdateHooks []BackgroundTaskStateHook

var backgroundTaskStateBeforeDeleteMu sync.Mutex
var backgroundTaskStateBeforeDeleteHooks []BackgroundTaskStateHook
var backgroundTaskStateAfterDeleteMu sync.Mutex
var backgroundTaskStateAfterDeleteHooks []BackgroundTaskStateHook

var backgroundTaskStateBeforeUpsertMu sync.Mutex
var backgroundTaskStateBeforeUpsertHooks []BackgroundTaskStateHook
var backgroundTaskStateAfterUpsertMu sync.Mutex
var backgroundTaskStateAfterUpsertHooks []BackgroundTaskStateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BackgroundTaskState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BackgroundTaskState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BackgroundTaskState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BackgroundTaskState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BackgroundTaskState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BackgroundTaskState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BackgroundTaskState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BackgroundTaskState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BackgroundTaskState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backgroundTaskStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBackgroundTaskStateHook registers your hook function for all future operations.
func AddBackgroundTaskStateHook(hookPoint boil.HookPoint, backgroundTaskStateHook BackgroundTaskStateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		backgroundTaskStateAfterSelectMu.Lock()
		backgroundTaskStateAfterSelectHooks = append(backgroundTaskStateAfterSelectHooks, backgroundTaskStateHook)
		backgroundTaskStateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		backgroundTaskStateBeforeInsertMu.Lock()
		backgroundTaskStateBeforeInsertHooks = append(backgroundTaskStateBeforeInsertHooks, backgroundTaskStateHook)
		backgroundTaskStateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		backgroundTaskStateAfterInsertMu.Lock()
		backgroundTaskStateAfterInsertHooks = append(backgroundTaskStateAfterInsertHooks, backgroundTaskStateHook)
		backgroundTaskStateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		backgroundTaskStateBeforeUpdateMu.Lock()
		backgroundTaskStateBeforeUpdateHooks = append(backgroundTaskStateBeforeUpdateHooks, backgroundTaskStateHook)
		backgroundTaskStateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		backgroundTaskStateAfterUpdateMu.Lock()
		backgroundTaskStateAfterUpdateHooks = append(backgroundTaskStateAfterUpdateHooks, backgroundTaskStateHook)
		backgroundTaskStateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		backgroundTaskStateBeforeDeleteMu.Lock()
		backgroundTaskStateBeforeDeleteHooks = append(backgroundTaskStateBeforeDeleteHooks, backgroundTaskStateHook)
		backgroundTaskStateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		backgroundTaskStateAfterDeleteMu.Lock()
		backgroundTaskStateAfterDeleteHooks = append(backgroundTaskStateAfterDeleteHooks, backgroundTaskStateHook)
		backgroundTaskStateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		backgroundTaskStateBeforeUpsertMu.Lock()
		backgroundTaskStateBeforeUpsertHooks = append(backgroundTaskStateBeforeUpsertHooks, backgroundTaskStateHook)
		backgroundTaskStateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		backgroundTaskStateAfterUpsertMu.Lock()
		backgroundTaskStateAfterUpsertHooks = append(backgroundTaskStateAfterUpsertHooks, backgroundTaskStateHook)
		backgroundTaskStateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single backgroundTaskState record from the query using the global executor.
func (q backgroundTaskStateQuery) OneG(ctx context.Context) (*BackgroundTaskState, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single backgroundTaskState record from the query.
func (q backgroundTaskStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BackgroundTaskState, error) {
	o := &BackgroundTaskState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for background_task_state")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BackgroundTaskState records from the query using the global executor.
func (q backgroundTaskStateQuery) AllG(ctx context.Context) (BackgroundTaskStateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BackgroundTaskState records from the query.
func (q backgroundTaskStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (BackgroundTaskStateSlice, error) {
	var o []*BackgroundTaskState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to BackgroundTaskState slice")
	}

	if len(backgroundTaskStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BackgroundTaskState records in the query using the global executor
func (q backgroundTaskStateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BackgroundTaskState records in the query.
func (q backgroundTaskStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count background_task_state rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q backgroundTaskStateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q backgroundTaskStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if background_task_state exists")
	}

	return count > 0, nil
}

// BackgroundTaskStates retrieves all the records using an executor.
func BackgroundTaskStates(mods ...qm.QueryMod) backgroundTaskStateQuery {
	mods = append(mods, qm.From("\"background_task_state\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"background_task_state\".*"})
	}

	return backgroundTaskStateQuery{q}
}

// FindBackgroundTaskStateG retrieves a single record by ID.
func FindBackgroundTaskStateG(ctx context.Context, requestID int64, selectCols ...string) (*BackgroundTaskState, error) {
	return FindBackgroundTaskState(ctx, boil.GetContextDB(), requestID, selectCols...)
}

// FindBackgroundTaskState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBackgroundTaskState(ctx context.Context, exec boil.ContextExecutor, requestID int64, selectCols ...string) (*BackgroundTaskState, error) {
	backgroundTaskStateObj := &BackgroundTaskState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"background_task_state\" where \"request_id\"=?", sel,
	)

	q := queries.Raw(query, requestID)

	err := q.Bind(ctx, exec, backgroundTaskStateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from background_task_state")
	}

	if err = backgroundTaskStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return backgroundTaskStateObj, err
	}

	return backgroundTaskStateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BackgroundTaskState) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BackgroundTaskState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no background_task_state provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(backgroundTaskStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	backgroundTaskStateInsertCacheMut.RLock()
	cache, cached := backgroundTaskStateInsertCache[key]
	backgroundTaskStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			backgroundTaskStateAllColumns,
			backgroundTaskStateColumnsWithDefault,
			backgroundTaskStateColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, backgroundTaskStateGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(backgroundTaskStateType, backgroundTaskStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(backgroundTaskStateType, backgroundTaskStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"background_task_state\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"background_task_state\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into background_task_state")
	}

	if !cached {
		backgroundTaskStateInsertCacheMut.Lock()
		backgroundTaskStateInsertCache[key] = cache
		backgroundTaskStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BackgroundTaskState record using the global executor.
// See Update for more documentation.
func (o *BackgroundTaskState) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BackgroundTaskState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BackgroundTaskState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	backgroundTaskStateUpdateCacheMut.RLock()
	cache, cached := backgroundTaskStateUpdateCache[key]
	backgroundTaskStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			backgroundTaskStateAllColumns,
			backgroundTaskStatePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, backgroundTaskStateGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update background_task_state, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"background_task_state\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, backgroundTaskStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(backgroundTaskStateType, backgroundTaskStateMapping, append(wl, backgroundTaskStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update background_task_state row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for background_task_state")
	}

	if !cached {
		backgroundTaskStateUpdateCacheMut.Lock()
		backgroundTaskStateUpdateCache[key] = cache
		backgroundTaskStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q backgroundTaskStateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q backgroundTaskStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for background_task_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for background_task_state")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BackgroundTaskStateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BackgroundTaskStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), backgroundTaskStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"background_task_state\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, backgroundTaskStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in backgroundTaskState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all backgroundTaskState")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BackgroundTaskState) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BackgroundTaskState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no background_task_state provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(backgroundTaskStateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	backgroundTaskStateUpsertCacheMut.RLock()
	cache, cached := backgroundTaskStateUpsertCache[key]
	backgroundTaskStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			backgroundTaskStateAllColumns,
			backgroundTaskStateColumnsWithDefault,
			backgroundTaskStateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			backgroundTaskStateAllColumns,
			backgroundTaskStatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert background_task_state, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(backgroundTaskStatePrimaryKeyColumns))
			copy(conflict, backgroundTaskStatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"background_task_state\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(backgroundTaskStateType, backgroundTaskStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(backgroundTaskStateType, backgroundTaskStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert background_task_state")
	}

	if !cached {
		backgroundTaskStateUpsertCacheMut.Lock()
		backgroundTaskStateUpsertCache[key] = cache
		backgroundTaskStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BackgroundTaskState record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BackgroundTaskState) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BackgroundTaskState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BackgroundTaskState) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no BackgroundTaskState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), backgroundTaskStatePrimaryKeyMapping)
	sql := "DELETE FROM \"background_task_state\" WHERE \"request_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from background_task_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for background_task_state")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q backgroundTaskStateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q backgroundTaskStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no backgroundTaskStateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from background_task_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for background_task_state")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BackgroundTaskStateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BackgroundTaskStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(backgroundTaskStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), backgroundTaskStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"background_task_state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, backgroundTaskStatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from backgroundTaskState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for background_task_state")
	}

	if len(backgroundTaskStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BackgroundTaskState) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no BackgroundTaskState provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BackgroundTaskState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBackgroundTaskState(ctx, exec, o.RequestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BackgroundTaskStateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty BackgroundTaskStateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BackgroundTaskStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BackgroundTaskStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), backgroundTaskStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"background_task_state\".* FROM \"background_task_state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, backgroundTaskStatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in BackgroundTaskStateSlice")
	}

	*o = slice

	return nil
}

// BackgroundTaskStateExistsG checks if the BackgroundTaskState row exists.
func BackgroundTaskStateExistsG(ctx context.Context, requestID int64) (bool, error) {
	return BackgroundTaskStateExists(ctx, boil.GetContextDB(), requestID)
}

// BackgroundTaskStateExists checks if the BackgroundTaskState row exists.
func BackgroundTaskStateExists(ctx context.Context, exec boil.ContextExecutor, requestID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"background_task_state\" where \"request_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, requestID)
	}
	row := exec.QueryRowContext(ctx, sql, requestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if background_task_state exists")
	}

	return exists, nil
}

// Exists checks if the BackgroundTaskState row exists.
func (o *BackgroundTaskState) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BackgroundTaskStateExists(ctx, exec, o.RequestID)
}
