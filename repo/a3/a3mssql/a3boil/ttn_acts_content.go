// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNActsContent is an object representing the database table.
type TTNActsContent struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTNActs            null.Int    `boil:"id_ttn_acts" json:"id_ttn_acts,omitempty" toml:"id_ttn_acts" yaml:"id_ttn_acts,omitempty"`
	ProductIdentity      null.String `boil:"product_identity" json:"product_identity,omitempty" toml:"product_identity" yaml:"product_identity,omitempty"`
	ProductInformF2RegID null.String `boil:"product_inform_f2_reg_id" json:"product_inform_f2_reg_id,omitempty" toml:"product_inform_f2_reg_id" yaml:"product_inform_f2_reg_id,omitempty"`
	ProductQuantity      null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`

	R *ttnActsContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnActsContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNActsContentColumns = struct {
	ID                   string
	IDTTNActs            string
	ProductIdentity      string
	ProductInformF2RegID string
	ProductQuantity      string
}{
	ID:                   "id",
	IDTTNActs:            "id_ttn_acts",
	ProductIdentity:      "product_identity",
	ProductInformF2RegID: "product_inform_f2_reg_id",
	ProductQuantity:      "product_quantity",
}

var TTNActsContentTableColumns = struct {
	ID                   string
	IDTTNActs            string
	ProductIdentity      string
	ProductInformF2RegID string
	ProductQuantity      string
}{
	ID:                   "ttn_acts_content.id",
	IDTTNActs:            "ttn_acts_content.id_ttn_acts",
	ProductIdentity:      "ttn_acts_content.product_identity",
	ProductInformF2RegID: "ttn_acts_content.product_inform_f2_reg_id",
	ProductQuantity:      "ttn_acts_content.product_quantity",
}

// Generated where

var TTNActsContentWhere = struct {
	ID                   whereHelperint
	IDTTNActs            whereHelpernull_Int
	ProductIdentity      whereHelpernull_String
	ProductInformF2RegID whereHelpernull_String
	ProductQuantity      whereHelpernull_String
}{
	ID:                   whereHelperint{field: "[dbo].[ttn_acts_content].[id]"},
	IDTTNActs:            whereHelpernull_Int{field: "[dbo].[ttn_acts_content].[id_ttn_acts]"},
	ProductIdentity:      whereHelpernull_String{field: "[dbo].[ttn_acts_content].[product_identity]"},
	ProductInformF2RegID: whereHelpernull_String{field: "[dbo].[ttn_acts_content].[product_inform_f2_reg_id]"},
	ProductQuantity:      whereHelpernull_String{field: "[dbo].[ttn_acts_content].[product_quantity]"},
}

// TTNActsContentRels is where relationship names are stored.
var TTNActsContentRels = struct {
}{}

// ttnActsContentR is where relationships are stored.
type ttnActsContentR struct {
}

// NewStruct creates a new relationship struct
func (*ttnActsContentR) NewStruct() *ttnActsContentR {
	return &ttnActsContentR{}
}

// ttnActsContentL is where Load methods for each relationship are stored.
type ttnActsContentL struct{}

var (
	ttnActsContentAllColumns            = []string{"id", "id_ttn_acts", "product_identity", "product_inform_f2_reg_id", "product_quantity"}
	ttnActsContentColumnsWithoutDefault = []string{"id_ttn_acts", "product_identity", "product_inform_f2_reg_id", "product_quantity"}
	ttnActsContentColumnsWithDefault    = []string{"id"}
	ttnActsContentPrimaryKeyColumns     = []string{"id"}
	ttnActsContentGeneratedColumns      = []string{"id"}
)

type (
	// TTNActsContentSlice is an alias for a slice of pointers to TTNActsContent.
	// This should almost always be used instead of []TTNActsContent.
	TTNActsContentSlice []*TTNActsContent
	// TTNActsContentHook is the signature for custom TTNActsContent hook methods
	TTNActsContentHook func(context.Context, boil.ContextExecutor, *TTNActsContent) error

	ttnActsContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnActsContentType                 = reflect.TypeOf(&TTNActsContent{})
	ttnActsContentMapping              = queries.MakeStructMapping(ttnActsContentType)
	ttnActsContentPrimaryKeyMapping, _ = queries.BindMapping(ttnActsContentType, ttnActsContentMapping, ttnActsContentPrimaryKeyColumns)
	ttnActsContentInsertCacheMut       sync.RWMutex
	ttnActsContentInsertCache          = make(map[string]insertCache)
	ttnActsContentUpdateCacheMut       sync.RWMutex
	ttnActsContentUpdateCache          = make(map[string]updateCache)
	ttnActsContentUpsertCacheMut       sync.RWMutex
	ttnActsContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnActsContentAfterSelectMu sync.Mutex
var ttnActsContentAfterSelectHooks []TTNActsContentHook

var ttnActsContentBeforeInsertMu sync.Mutex
var ttnActsContentBeforeInsertHooks []TTNActsContentHook
var ttnActsContentAfterInsertMu sync.Mutex
var ttnActsContentAfterInsertHooks []TTNActsContentHook

var ttnActsContentBeforeUpdateMu sync.Mutex
var ttnActsContentBeforeUpdateHooks []TTNActsContentHook
var ttnActsContentAfterUpdateMu sync.Mutex
var ttnActsContentAfterUpdateHooks []TTNActsContentHook

var ttnActsContentBeforeDeleteMu sync.Mutex
var ttnActsContentBeforeDeleteHooks []TTNActsContentHook
var ttnActsContentAfterDeleteMu sync.Mutex
var ttnActsContentAfterDeleteHooks []TTNActsContentHook

var ttnActsContentBeforeUpsertMu sync.Mutex
var ttnActsContentBeforeUpsertHooks []TTNActsContentHook
var ttnActsContentAfterUpsertMu sync.Mutex
var ttnActsContentAfterUpsertHooks []TTNActsContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNActsContent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNActsContent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNActsContent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNActsContent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNActsContent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNActsContent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNActsContent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNActsContent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNActsContent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNActsContentHook registers your hook function for all future operations.
func AddTTNActsContentHook(hookPoint boil.HookPoint, ttnActsContentHook TTNActsContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnActsContentAfterSelectMu.Lock()
		ttnActsContentAfterSelectHooks = append(ttnActsContentAfterSelectHooks, ttnActsContentHook)
		ttnActsContentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnActsContentBeforeInsertMu.Lock()
		ttnActsContentBeforeInsertHooks = append(ttnActsContentBeforeInsertHooks, ttnActsContentHook)
		ttnActsContentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnActsContentAfterInsertMu.Lock()
		ttnActsContentAfterInsertHooks = append(ttnActsContentAfterInsertHooks, ttnActsContentHook)
		ttnActsContentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnActsContentBeforeUpdateMu.Lock()
		ttnActsContentBeforeUpdateHooks = append(ttnActsContentBeforeUpdateHooks, ttnActsContentHook)
		ttnActsContentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnActsContentAfterUpdateMu.Lock()
		ttnActsContentAfterUpdateHooks = append(ttnActsContentAfterUpdateHooks, ttnActsContentHook)
		ttnActsContentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnActsContentBeforeDeleteMu.Lock()
		ttnActsContentBeforeDeleteHooks = append(ttnActsContentBeforeDeleteHooks, ttnActsContentHook)
		ttnActsContentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnActsContentAfterDeleteMu.Lock()
		ttnActsContentAfterDeleteHooks = append(ttnActsContentAfterDeleteHooks, ttnActsContentHook)
		ttnActsContentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnActsContentBeforeUpsertMu.Lock()
		ttnActsContentBeforeUpsertHooks = append(ttnActsContentBeforeUpsertHooks, ttnActsContentHook)
		ttnActsContentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnActsContentAfterUpsertMu.Lock()
		ttnActsContentAfterUpsertHooks = append(ttnActsContentAfterUpsertHooks, ttnActsContentHook)
		ttnActsContentAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnActsContent record from the query using the global executor.
func (q ttnActsContentQuery) OneG(ctx context.Context) (*TTNActsContent, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnActsContent record from the query.
func (q ttnActsContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNActsContent, error) {
	o := &TTNActsContent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_acts_content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNActsContent records from the query using the global executor.
func (q ttnActsContentQuery) AllG(ctx context.Context) (TTNActsContentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNActsContent records from the query.
func (q ttnActsContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNActsContentSlice, error) {
	var o []*TTNActsContent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNActsContent slice")
	}

	if len(ttnActsContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNActsContent records in the query using the global executor
func (q ttnActsContentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNActsContent records in the query.
func (q ttnActsContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_acts_content rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnActsContentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnActsContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_acts_content exists")
	}

	return count > 0, nil
}

// TTNActsContents retrieves all the records using an executor.
func TTNActsContents(mods ...qm.QueryMod) ttnActsContentQuery {
	mods = append(mods, qm.From("[dbo].[ttn_acts_content]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_acts_content].*"})
	}

	return ttnActsContentQuery{q}
}

// FindTTNActsContentG retrieves a single record by ID.
func FindTTNActsContentG(ctx context.Context, iD int, selectCols ...string) (*TTNActsContent, error) {
	return FindTTNActsContent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNActsContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNActsContent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNActsContent, error) {
	ttnActsContentObj := &TTNActsContent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_acts_content] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnActsContentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_acts_content")
	}

	if err = ttnActsContentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnActsContentObj, err
	}

	return ttnActsContentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNActsContent) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNActsContent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts_content provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActsContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnActsContentInsertCacheMut.RLock()
	cache, cached := ttnActsContentInsertCache[key]
	ttnActsContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnActsContentAllColumns,
			ttnActsContentColumnsWithDefault,
			ttnActsContentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnActsContentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnActsContentType, ttnActsContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnActsContentType, ttnActsContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_acts_content] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_acts_content] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_acts_content")
	}

	if !cached {
		ttnActsContentInsertCacheMut.Lock()
		ttnActsContentInsertCache[key] = cache
		ttnActsContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNActsContent record using the global executor.
// See Update for more documentation.
func (o *TTNActsContent) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNActsContent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNActsContent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnActsContentUpdateCacheMut.RLock()
	cache, cached := ttnActsContentUpdateCache[key]
	ttnActsContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnActsContentAllColumns,
			ttnActsContentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnActsContentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_acts_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_acts_content] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnActsContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnActsContentType, ttnActsContentMapping, append(wl, ttnActsContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_acts_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_acts_content")
	}

	if !cached {
		ttnActsContentUpdateCacheMut.Lock()
		ttnActsContentUpdateCache[key] = cache
		ttnActsContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnActsContentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnActsContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_acts_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_acts_content")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNActsContentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNActsContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_acts_content] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnActsContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnActsContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnActsContent")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNActsContent) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNActsContent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts_content provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActsContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnActsContentUpsertCacheMut.RLock()
	cache, cached := ttnActsContentUpsertCache[key]
	ttnActsContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnActsContentAllColumns,
			ttnActsContentColumnsWithDefault,
			ttnActsContentColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnActsContentGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnActsContentPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnActsContentColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts_content, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnActsContentAllColumns,
			ttnActsContentPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnActsContentGeneratedColumns)

		ret := strmangle.SetComplement(ttnActsContentAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts_content, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_acts_content]", ttnActsContentPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnActsContentPrimaryKeyColumns))
		copy(whitelist, ttnActsContentPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnActsContentType, ttnActsContentMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnActsContentType, ttnActsContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_acts_content")
	}

	if !cached {
		ttnActsContentUpsertCacheMut.Lock()
		ttnActsContentUpsertCache[key] = cache
		ttnActsContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNActsContent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNActsContent) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNActsContent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNActsContent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNActsContent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnActsContentPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_acts_content] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_acts_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_acts_content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnActsContentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnActsContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnActsContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_acts_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts_content")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNActsContentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNActsContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnActsContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_acts_content] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnActsContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnActsContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts_content")
	}

	if len(ttnActsContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNActsContent) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNActsContent provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNActsContent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNActsContent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActsContentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNActsContentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActsContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNActsContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_acts_content].* FROM [dbo].[ttn_acts_content] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnActsContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNActsContentSlice")
	}

	*o = slice

	return nil
}

// TTNActsContentExistsG checks if the TTNActsContent row exists.
func TTNActsContentExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNActsContentExists(ctx, boil.GetContextDB(), iD)
}

// TTNActsContentExists checks if the TTNActsContent row exists.
func TTNActsContentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_acts_content] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_acts_content exists")
	}

	return exists, nil
}

// Exists checks if the TTNActsContent row exists.
func (o *TTNActsContent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNActsContentExists(ctx, exec, o.ID)
}
