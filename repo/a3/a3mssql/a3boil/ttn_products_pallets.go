// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNProductsPallet is an object representing the database table.
type TTNProductsPallet struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTNProducts null.Int    `boil:"id_ttn_products" json:"id_ttn_products,omitempty" toml:"id_ttn_products" yaml:"id_ttn_products,omitempty"`
	PalletNumber  null.String `boil:"pallet_number" json:"pallet_number,omitempty" toml:"pallet_number" yaml:"pallet_number,omitempty"`

	R *ttnProductsPalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnProductsPalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNProductsPalletColumns = struct {
	ID            string
	IDTTNProducts string
	PalletNumber  string
}{
	ID:            "id",
	IDTTNProducts: "id_ttn_products",
	PalletNumber:  "pallet_number",
}

var TTNProductsPalletTableColumns = struct {
	ID            string
	IDTTNProducts string
	PalletNumber  string
}{
	ID:            "ttn_products_pallets.id",
	IDTTNProducts: "ttn_products_pallets.id_ttn_products",
	PalletNumber:  "ttn_products_pallets.pallet_number",
}

// Generated where

var TTNProductsPalletWhere = struct {
	ID            whereHelperint
	IDTTNProducts whereHelpernull_Int
	PalletNumber  whereHelpernull_String
}{
	ID:            whereHelperint{field: "[dbo].[ttn_products_pallets].[id]"},
	IDTTNProducts: whereHelpernull_Int{field: "[dbo].[ttn_products_pallets].[id_ttn_products]"},
	PalletNumber:  whereHelpernull_String{field: "[dbo].[ttn_products_pallets].[pallet_number]"},
}

// TTNProductsPalletRels is where relationship names are stored.
var TTNProductsPalletRels = struct {
}{}

// ttnProductsPalletR is where relationships are stored.
type ttnProductsPalletR struct {
}

// NewStruct creates a new relationship struct
func (*ttnProductsPalletR) NewStruct() *ttnProductsPalletR {
	return &ttnProductsPalletR{}
}

// ttnProductsPalletL is where Load methods for each relationship are stored.
type ttnProductsPalletL struct{}

var (
	ttnProductsPalletAllColumns            = []string{"id", "id_ttn_products", "pallet_number"}
	ttnProductsPalletColumnsWithoutDefault = []string{"id_ttn_products", "pallet_number"}
	ttnProductsPalletColumnsWithDefault    = []string{"id"}
	ttnProductsPalletPrimaryKeyColumns     = []string{"id"}
	ttnProductsPalletGeneratedColumns      = []string{"id"}
)

type (
	// TTNProductsPalletSlice is an alias for a slice of pointers to TTNProductsPallet.
	// This should almost always be used instead of []TTNProductsPallet.
	TTNProductsPalletSlice []*TTNProductsPallet
	// TTNProductsPalletHook is the signature for custom TTNProductsPallet hook methods
	TTNProductsPalletHook func(context.Context, boil.ContextExecutor, *TTNProductsPallet) error

	ttnProductsPalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnProductsPalletType                 = reflect.TypeOf(&TTNProductsPallet{})
	ttnProductsPalletMapping              = queries.MakeStructMapping(ttnProductsPalletType)
	ttnProductsPalletPrimaryKeyMapping, _ = queries.BindMapping(ttnProductsPalletType, ttnProductsPalletMapping, ttnProductsPalletPrimaryKeyColumns)
	ttnProductsPalletInsertCacheMut       sync.RWMutex
	ttnProductsPalletInsertCache          = make(map[string]insertCache)
	ttnProductsPalletUpdateCacheMut       sync.RWMutex
	ttnProductsPalletUpdateCache          = make(map[string]updateCache)
	ttnProductsPalletUpsertCacheMut       sync.RWMutex
	ttnProductsPalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnProductsPalletAfterSelectMu sync.Mutex
var ttnProductsPalletAfterSelectHooks []TTNProductsPalletHook

var ttnProductsPalletBeforeInsertMu sync.Mutex
var ttnProductsPalletBeforeInsertHooks []TTNProductsPalletHook
var ttnProductsPalletAfterInsertMu sync.Mutex
var ttnProductsPalletAfterInsertHooks []TTNProductsPalletHook

var ttnProductsPalletBeforeUpdateMu sync.Mutex
var ttnProductsPalletBeforeUpdateHooks []TTNProductsPalletHook
var ttnProductsPalletAfterUpdateMu sync.Mutex
var ttnProductsPalletAfterUpdateHooks []TTNProductsPalletHook

var ttnProductsPalletBeforeDeleteMu sync.Mutex
var ttnProductsPalletBeforeDeleteHooks []TTNProductsPalletHook
var ttnProductsPalletAfterDeleteMu sync.Mutex
var ttnProductsPalletAfterDeleteHooks []TTNProductsPalletHook

var ttnProductsPalletBeforeUpsertMu sync.Mutex
var ttnProductsPalletBeforeUpsertHooks []TTNProductsPalletHook
var ttnProductsPalletAfterUpsertMu sync.Mutex
var ttnProductsPalletAfterUpsertHooks []TTNProductsPalletHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNProductsPallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNProductsPallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNProductsPallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNProductsPallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNProductsPallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNProductsPallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNProductsPallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNProductsPallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNProductsPallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnProductsPalletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNProductsPalletHook registers your hook function for all future operations.
func AddTTNProductsPalletHook(hookPoint boil.HookPoint, ttnProductsPalletHook TTNProductsPalletHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnProductsPalletAfterSelectMu.Lock()
		ttnProductsPalletAfterSelectHooks = append(ttnProductsPalletAfterSelectHooks, ttnProductsPalletHook)
		ttnProductsPalletAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnProductsPalletBeforeInsertMu.Lock()
		ttnProductsPalletBeforeInsertHooks = append(ttnProductsPalletBeforeInsertHooks, ttnProductsPalletHook)
		ttnProductsPalletBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnProductsPalletAfterInsertMu.Lock()
		ttnProductsPalletAfterInsertHooks = append(ttnProductsPalletAfterInsertHooks, ttnProductsPalletHook)
		ttnProductsPalletAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnProductsPalletBeforeUpdateMu.Lock()
		ttnProductsPalletBeforeUpdateHooks = append(ttnProductsPalletBeforeUpdateHooks, ttnProductsPalletHook)
		ttnProductsPalletBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnProductsPalletAfterUpdateMu.Lock()
		ttnProductsPalletAfterUpdateHooks = append(ttnProductsPalletAfterUpdateHooks, ttnProductsPalletHook)
		ttnProductsPalletAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnProductsPalletBeforeDeleteMu.Lock()
		ttnProductsPalletBeforeDeleteHooks = append(ttnProductsPalletBeforeDeleteHooks, ttnProductsPalletHook)
		ttnProductsPalletBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnProductsPalletAfterDeleteMu.Lock()
		ttnProductsPalletAfterDeleteHooks = append(ttnProductsPalletAfterDeleteHooks, ttnProductsPalletHook)
		ttnProductsPalletAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnProductsPalletBeforeUpsertMu.Lock()
		ttnProductsPalletBeforeUpsertHooks = append(ttnProductsPalletBeforeUpsertHooks, ttnProductsPalletHook)
		ttnProductsPalletBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnProductsPalletAfterUpsertMu.Lock()
		ttnProductsPalletAfterUpsertHooks = append(ttnProductsPalletAfterUpsertHooks, ttnProductsPalletHook)
		ttnProductsPalletAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnProductsPallet record from the query using the global executor.
func (q ttnProductsPalletQuery) OneG(ctx context.Context) (*TTNProductsPallet, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnProductsPallet record from the query.
func (q ttnProductsPalletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNProductsPallet, error) {
	o := &TTNProductsPallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_products_pallets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNProductsPallet records from the query using the global executor.
func (q ttnProductsPalletQuery) AllG(ctx context.Context) (TTNProductsPalletSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNProductsPallet records from the query.
func (q ttnProductsPalletQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNProductsPalletSlice, error) {
	var o []*TTNProductsPallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNProductsPallet slice")
	}

	if len(ttnProductsPalletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNProductsPallet records in the query using the global executor
func (q ttnProductsPalletQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNProductsPallet records in the query.
func (q ttnProductsPalletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_products_pallets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnProductsPalletQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnProductsPalletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_products_pallets exists")
	}

	return count > 0, nil
}

// TTNProductsPallets retrieves all the records using an executor.
func TTNProductsPallets(mods ...qm.QueryMod) ttnProductsPalletQuery {
	mods = append(mods, qm.From("[dbo].[ttn_products_pallets]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_products_pallets].*"})
	}

	return ttnProductsPalletQuery{q}
}

// FindTTNProductsPalletG retrieves a single record by ID.
func FindTTNProductsPalletG(ctx context.Context, iD int, selectCols ...string) (*TTNProductsPallet, error) {
	return FindTTNProductsPallet(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNProductsPallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNProductsPallet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNProductsPallet, error) {
	ttnProductsPalletObj := &TTNProductsPallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_products_pallets] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnProductsPalletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_products_pallets")
	}

	if err = ttnProductsPalletObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnProductsPalletObj, err
	}

	return ttnProductsPalletObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNProductsPallet) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNProductsPallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_products_pallets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnProductsPalletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnProductsPalletInsertCacheMut.RLock()
	cache, cached := ttnProductsPalletInsertCache[key]
	ttnProductsPalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnProductsPalletAllColumns,
			ttnProductsPalletColumnsWithDefault,
			ttnProductsPalletColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnProductsPalletGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnProductsPalletType, ttnProductsPalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnProductsPalletType, ttnProductsPalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_products_pallets] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_products_pallets] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_products_pallets")
	}

	if !cached {
		ttnProductsPalletInsertCacheMut.Lock()
		ttnProductsPalletInsertCache[key] = cache
		ttnProductsPalletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNProductsPallet record using the global executor.
// See Update for more documentation.
func (o *TTNProductsPallet) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNProductsPallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNProductsPallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnProductsPalletUpdateCacheMut.RLock()
	cache, cached := ttnProductsPalletUpdateCache[key]
	ttnProductsPalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnProductsPalletAllColumns,
			ttnProductsPalletPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnProductsPalletGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_products_pallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_products_pallets] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnProductsPalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnProductsPalletType, ttnProductsPalletMapping, append(wl, ttnProductsPalletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_products_pallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_products_pallets")
	}

	if !cached {
		ttnProductsPalletUpdateCacheMut.Lock()
		ttnProductsPalletUpdateCache[key] = cache
		ttnProductsPalletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnProductsPalletQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnProductsPalletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_products_pallets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNProductsPalletSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNProductsPalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_products_pallets] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnProductsPalletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnProductsPallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnProductsPallet")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNProductsPallet) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNProductsPallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_products_pallets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnProductsPalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnProductsPalletUpsertCacheMut.RLock()
	cache, cached := ttnProductsPalletUpsertCache[key]
	ttnProductsPalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnProductsPalletAllColumns,
			ttnProductsPalletColumnsWithDefault,
			ttnProductsPalletColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnProductsPalletGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnProductsPalletPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnProductsPalletColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_products_pallets, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnProductsPalletAllColumns,
			ttnProductsPalletPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnProductsPalletGeneratedColumns)

		ret := strmangle.SetComplement(ttnProductsPalletAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_products_pallets, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_products_pallets]", ttnProductsPalletPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnProductsPalletPrimaryKeyColumns))
		copy(whitelist, ttnProductsPalletPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnProductsPalletType, ttnProductsPalletMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnProductsPalletType, ttnProductsPalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_products_pallets")
	}

	if !cached {
		ttnProductsPalletUpsertCacheMut.Lock()
		ttnProductsPalletUpsertCache[key] = cache
		ttnProductsPalletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNProductsPallet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNProductsPallet) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNProductsPallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNProductsPallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNProductsPallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnProductsPalletPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_products_pallets] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_products_pallets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnProductsPalletQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnProductsPalletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnProductsPalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_products_pallets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNProductsPalletSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNProductsPalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnProductsPalletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_products_pallets] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnProductsPalletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnProductsPallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_products_pallets")
	}

	if len(ttnProductsPalletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNProductsPallet) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNProductsPallet provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNProductsPallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNProductsPallet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNProductsPalletSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNProductsPalletSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNProductsPalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNProductsPalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_products_pallets].* FROM [dbo].[ttn_products_pallets] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnProductsPalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNProductsPalletSlice")
	}

	*o = slice

	return nil
}

// TTNProductsPalletExistsG checks if the TTNProductsPallet row exists.
func TTNProductsPalletExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNProductsPalletExists(ctx, boil.GetContextDB(), iD)
}

// TTNProductsPalletExists checks if the TTNProductsPallet row exists.
func TTNProductsPalletExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_products_pallets] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_products_pallets exists")
	}

	return exists, nil
}

// Exists checks if the TTNProductsPallet row exists.
func (o *TTNProductsPallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNProductsPalletExists(ctx, exec, o.ID)
}
