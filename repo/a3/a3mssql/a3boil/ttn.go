// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTN is an object representing the database table.
type TTN struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate           null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	TTNType              null.String `boil:"ttn_type" json:"ttn_type,omitempty" toml:"ttn_type" yaml:"ttn_type,omitempty"`
	DocIdentity          null.String `boil:"doc_identity" json:"doc_identity,omitempty" toml:"doc_identity" yaml:"doc_identity,omitempty"`
	DocType              null.String `boil:"doc_type" json:"doc_type,omitempty" toml:"doc_type" yaml:"doc_type,omitempty"`
	DocNumber            null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	DocDate              null.String `boil:"doc_date" json:"doc_date,omitempty" toml:"doc_date" yaml:"doc_date,omitempty"`
	DocShippingDate      null.String `boil:"doc_shipping_date" json:"doc_shipping_date,omitempty" toml:"doc_shipping_date" yaml:"doc_shipping_date,omitempty"`
	DocBase              null.String `boil:"doc_base" json:"doc_base,omitempty" toml:"doc_base" yaml:"doc_base,omitempty"`
	DocComment           null.String `boil:"doc_comment" json:"doc_comment,omitempty" toml:"doc_comment" yaml:"doc_comment,omitempty"`
	ShipperType          null.String `boil:"shipper_type" json:"shipper_type,omitempty" toml:"shipper_type" yaml:"shipper_type,omitempty"`
	ShipperClientRegID   null.String `boil:"shipper_client_reg_id" json:"shipper_client_reg_id,omitempty" toml:"shipper_client_reg_id" yaml:"shipper_client_reg_id,omitempty"`
	ShipperInn           null.String `boil:"shipper_inn" json:"shipper_inn,omitempty" toml:"shipper_inn" yaml:"shipper_inn,omitempty"`
	ShipperKPP           null.String `boil:"shipper_kpp" json:"shipper_kpp,omitempty" toml:"shipper_kpp" yaml:"shipper_kpp,omitempty"`
	ShipperFullName      null.String `boil:"shipper_full_name" json:"shipper_full_name,omitempty" toml:"shipper_full_name" yaml:"shipper_full_name,omitempty"`
	ShipperShortName     null.String `boil:"shipper_short_name" json:"shipper_short_name,omitempty" toml:"shipper_short_name" yaml:"shipper_short_name,omitempty"`
	ShipperCountryCode   null.String `boil:"shipper_country_code" json:"shipper_country_code,omitempty" toml:"shipper_country_code" yaml:"shipper_country_code,omitempty"`
	ShipperRegionCode    null.String `boil:"shipper_region_code" json:"shipper_region_code,omitempty" toml:"shipper_region_code" yaml:"shipper_region_code,omitempty"`
	ShipperDescription   null.String `boil:"shipper_description" json:"shipper_description,omitempty" toml:"shipper_description" yaml:"shipper_description,omitempty"`
	ConsigneeType        null.String `boil:"consignee_type" json:"consignee_type,omitempty" toml:"consignee_type" yaml:"consignee_type,omitempty"`
	ConsigneeClientRegID null.String `boil:"consignee_client_reg_id" json:"consignee_client_reg_id,omitempty" toml:"consignee_client_reg_id" yaml:"consignee_client_reg_id,omitempty"`
	ConsigneeInn         null.String `boil:"consignee_inn" json:"consignee_inn,omitempty" toml:"consignee_inn" yaml:"consignee_inn,omitempty"`
	ConsigneeKPP         null.String `boil:"consignee_kpp" json:"consignee_kpp,omitempty" toml:"consignee_kpp" yaml:"consignee_kpp,omitempty"`
	ConsigneeFullName    null.String `boil:"consignee_full_name" json:"consignee_full_name,omitempty" toml:"consignee_full_name" yaml:"consignee_full_name,omitempty"`
	ConsigneeShortName   null.String `boil:"consignee_short_name" json:"consignee_short_name,omitempty" toml:"consignee_short_name" yaml:"consignee_short_name,omitempty"`
	ConsigneeCountryCode null.String `boil:"consignee_country_code" json:"consignee_country_code,omitempty" toml:"consignee_country_code" yaml:"consignee_country_code,omitempty"`
	ConsigneeRegionCode  null.String `boil:"consignee_region_code" json:"consignee_region_code,omitempty" toml:"consignee_region_code" yaml:"consignee_region_code,omitempty"`
	ConsigneeDescription null.String `boil:"consignee_description" json:"consignee_description,omitempty" toml:"consignee_description" yaml:"consignee_description,omitempty"`
	TranType             null.String `boil:"tran_type" json:"tran_type,omitempty" toml:"tran_type" yaml:"tran_type,omitempty"`
	TransportCompany     null.String `boil:"transport_company" json:"transport_company,omitempty" toml:"transport_company" yaml:"transport_company,omitempty"`
	TransportCustomer    null.String `boil:"transport_customer" json:"transport_customer,omitempty" toml:"transport_customer" yaml:"transport_customer,omitempty"`
	TransportOwnership   null.String `boil:"transport_ownership" json:"transport_ownership,omitempty" toml:"transport_ownership" yaml:"transport_ownership,omitempty"`
	TransportType        null.String `boil:"transport_type" json:"transport_type,omitempty" toml:"transport_type" yaml:"transport_type,omitempty"`
	TransportDriver      null.String `boil:"transport_driver" json:"transport_driver,omitempty" toml:"transport_driver" yaml:"transport_driver,omitempty"`
	TransportTrailer     null.String `boil:"transport_trailer" json:"transport_trailer,omitempty" toml:"transport_trailer" yaml:"transport_trailer,omitempty"`
	TransportRegNumber   null.String `boil:"transport_reg_number" json:"transport_reg_number,omitempty" toml:"transport_reg_number" yaml:"transport_reg_number,omitempty"`
	TransportForwarder   null.String `boil:"transport_forwarder" json:"transport_forwarder,omitempty" toml:"transport_forwarder" yaml:"transport_forwarder,omitempty"`
	TransportLoadPoint   null.String `boil:"transport_load_point" json:"transport_load_point,omitempty" toml:"transport_load_point" yaml:"transport_load_point,omitempty"`
	TransportUnloadPoint null.String `boil:"transport_unload_point" json:"transport_unload_point,omitempty" toml:"transport_unload_point" yaml:"transport_unload_point,omitempty"`
	TransportRedirect    null.String `boil:"transport_redirect" json:"transport_redirect,omitempty" toml:"transport_redirect" yaml:"transport_redirect,omitempty"`
	Version              null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State                null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status               null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID              null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	Archive              null.Int    `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	XML                  null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *ttnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNColumns = struct {
	ID                   string
	CreateDate           string
	TTNType              string
	DocIdentity          string
	DocType              string
	DocNumber            string
	DocDate              string
	DocShippingDate      string
	DocBase              string
	DocComment           string
	ShipperType          string
	ShipperClientRegID   string
	ShipperInn           string
	ShipperKPP           string
	ShipperFullName      string
	ShipperShortName     string
	ShipperCountryCode   string
	ShipperRegionCode    string
	ShipperDescription   string
	ConsigneeType        string
	ConsigneeClientRegID string
	ConsigneeInn         string
	ConsigneeKPP         string
	ConsigneeFullName    string
	ConsigneeShortName   string
	ConsigneeCountryCode string
	ConsigneeRegionCode  string
	ConsigneeDescription string
	TranType             string
	TransportCompany     string
	TransportCustomer    string
	TransportOwnership   string
	TransportType        string
	TransportDriver      string
	TransportTrailer     string
	TransportRegNumber   string
	TransportForwarder   string
	TransportLoadPoint   string
	TransportUnloadPoint string
	TransportRedirect    string
	Version              string
	State                string
	Status               string
	ReplyID              string
	Archive              string
	XML                  string
}{
	ID:                   "id",
	CreateDate:           "create_date",
	TTNType:              "ttn_type",
	DocIdentity:          "doc_identity",
	DocType:              "doc_type",
	DocNumber:            "doc_number",
	DocDate:              "doc_date",
	DocShippingDate:      "doc_shipping_date",
	DocBase:              "doc_base",
	DocComment:           "doc_comment",
	ShipperType:          "shipper_type",
	ShipperClientRegID:   "shipper_client_reg_id",
	ShipperInn:           "shipper_inn",
	ShipperKPP:           "shipper_kpp",
	ShipperFullName:      "shipper_full_name",
	ShipperShortName:     "shipper_short_name",
	ShipperCountryCode:   "shipper_country_code",
	ShipperRegionCode:    "shipper_region_code",
	ShipperDescription:   "shipper_description",
	ConsigneeType:        "consignee_type",
	ConsigneeClientRegID: "consignee_client_reg_id",
	ConsigneeInn:         "consignee_inn",
	ConsigneeKPP:         "consignee_kpp",
	ConsigneeFullName:    "consignee_full_name",
	ConsigneeShortName:   "consignee_short_name",
	ConsigneeCountryCode: "consignee_country_code",
	ConsigneeRegionCode:  "consignee_region_code",
	ConsigneeDescription: "consignee_description",
	TranType:             "tran_type",
	TransportCompany:     "transport_company",
	TransportCustomer:    "transport_customer",
	TransportOwnership:   "transport_ownership",
	TransportType:        "transport_type",
	TransportDriver:      "transport_driver",
	TransportTrailer:     "transport_trailer",
	TransportRegNumber:   "transport_reg_number",
	TransportForwarder:   "transport_forwarder",
	TransportLoadPoint:   "transport_load_point",
	TransportUnloadPoint: "transport_unload_point",
	TransportRedirect:    "transport_redirect",
	Version:              "version",
	State:                "state",
	Status:               "status",
	ReplyID:              "reply_id",
	Archive:              "archive",
	XML:                  "xml",
}

var TTNTableColumns = struct {
	ID                   string
	CreateDate           string
	TTNType              string
	DocIdentity          string
	DocType              string
	DocNumber            string
	DocDate              string
	DocShippingDate      string
	DocBase              string
	DocComment           string
	ShipperType          string
	ShipperClientRegID   string
	ShipperInn           string
	ShipperKPP           string
	ShipperFullName      string
	ShipperShortName     string
	ShipperCountryCode   string
	ShipperRegionCode    string
	ShipperDescription   string
	ConsigneeType        string
	ConsigneeClientRegID string
	ConsigneeInn         string
	ConsigneeKPP         string
	ConsigneeFullName    string
	ConsigneeShortName   string
	ConsigneeCountryCode string
	ConsigneeRegionCode  string
	ConsigneeDescription string
	TranType             string
	TransportCompany     string
	TransportCustomer    string
	TransportOwnership   string
	TransportType        string
	TransportDriver      string
	TransportTrailer     string
	TransportRegNumber   string
	TransportForwarder   string
	TransportLoadPoint   string
	TransportUnloadPoint string
	TransportRedirect    string
	Version              string
	State                string
	Status               string
	ReplyID              string
	Archive              string
	XML                  string
}{
	ID:                   "ttn.id",
	CreateDate:           "ttn.create_date",
	TTNType:              "ttn.ttn_type",
	DocIdentity:          "ttn.doc_identity",
	DocType:              "ttn.doc_type",
	DocNumber:            "ttn.doc_number",
	DocDate:              "ttn.doc_date",
	DocShippingDate:      "ttn.doc_shipping_date",
	DocBase:              "ttn.doc_base",
	DocComment:           "ttn.doc_comment",
	ShipperType:          "ttn.shipper_type",
	ShipperClientRegID:   "ttn.shipper_client_reg_id",
	ShipperInn:           "ttn.shipper_inn",
	ShipperKPP:           "ttn.shipper_kpp",
	ShipperFullName:      "ttn.shipper_full_name",
	ShipperShortName:     "ttn.shipper_short_name",
	ShipperCountryCode:   "ttn.shipper_country_code",
	ShipperRegionCode:    "ttn.shipper_region_code",
	ShipperDescription:   "ttn.shipper_description",
	ConsigneeType:        "ttn.consignee_type",
	ConsigneeClientRegID: "ttn.consignee_client_reg_id",
	ConsigneeInn:         "ttn.consignee_inn",
	ConsigneeKPP:         "ttn.consignee_kpp",
	ConsigneeFullName:    "ttn.consignee_full_name",
	ConsigneeShortName:   "ttn.consignee_short_name",
	ConsigneeCountryCode: "ttn.consignee_country_code",
	ConsigneeRegionCode:  "ttn.consignee_region_code",
	ConsigneeDescription: "ttn.consignee_description",
	TranType:             "ttn.tran_type",
	TransportCompany:     "ttn.transport_company",
	TransportCustomer:    "ttn.transport_customer",
	TransportOwnership:   "ttn.transport_ownership",
	TransportType:        "ttn.transport_type",
	TransportDriver:      "ttn.transport_driver",
	TransportTrailer:     "ttn.transport_trailer",
	TransportRegNumber:   "ttn.transport_reg_number",
	TransportForwarder:   "ttn.transport_forwarder",
	TransportLoadPoint:   "ttn.transport_load_point",
	TransportUnloadPoint: "ttn.transport_unload_point",
	TransportRedirect:    "ttn.transport_redirect",
	Version:              "ttn.version",
	State:                "ttn.state",
	Status:               "ttn.status",
	ReplyID:              "ttn.reply_id",
	Archive:              "ttn.archive",
	XML:                  "ttn.xml",
}

// Generated where

var TTNWhere = struct {
	ID                   whereHelperint
	CreateDate           whereHelpernull_String
	TTNType              whereHelpernull_String
	DocIdentity          whereHelpernull_String
	DocType              whereHelpernull_String
	DocNumber            whereHelpernull_String
	DocDate              whereHelpernull_String
	DocShippingDate      whereHelpernull_String
	DocBase              whereHelpernull_String
	DocComment           whereHelpernull_String
	ShipperType          whereHelpernull_String
	ShipperClientRegID   whereHelpernull_String
	ShipperInn           whereHelpernull_String
	ShipperKPP           whereHelpernull_String
	ShipperFullName      whereHelpernull_String
	ShipperShortName     whereHelpernull_String
	ShipperCountryCode   whereHelpernull_String
	ShipperRegionCode    whereHelpernull_String
	ShipperDescription   whereHelpernull_String
	ConsigneeType        whereHelpernull_String
	ConsigneeClientRegID whereHelpernull_String
	ConsigneeInn         whereHelpernull_String
	ConsigneeKPP         whereHelpernull_String
	ConsigneeFullName    whereHelpernull_String
	ConsigneeShortName   whereHelpernull_String
	ConsigneeCountryCode whereHelpernull_String
	ConsigneeRegionCode  whereHelpernull_String
	ConsigneeDescription whereHelpernull_String
	TranType             whereHelpernull_String
	TransportCompany     whereHelpernull_String
	TransportCustomer    whereHelpernull_String
	TransportOwnership   whereHelpernull_String
	TransportType        whereHelpernull_String
	TransportDriver      whereHelpernull_String
	TransportTrailer     whereHelpernull_String
	TransportRegNumber   whereHelpernull_String
	TransportForwarder   whereHelpernull_String
	TransportLoadPoint   whereHelpernull_String
	TransportUnloadPoint whereHelpernull_String
	TransportRedirect    whereHelpernull_String
	Version              whereHelpernull_String
	State                whereHelpernull_String
	Status               whereHelpernull_String
	ReplyID              whereHelpernull_String
	Archive              whereHelpernull_Int
	XML                  whereHelpernull_String
}{
	ID:                   whereHelperint{field: "[dbo].[ttn].[id]"},
	CreateDate:           whereHelpernull_String{field: "[dbo].[ttn].[create_date]"},
	TTNType:              whereHelpernull_String{field: "[dbo].[ttn].[ttn_type]"},
	DocIdentity:          whereHelpernull_String{field: "[dbo].[ttn].[doc_identity]"},
	DocType:              whereHelpernull_String{field: "[dbo].[ttn].[doc_type]"},
	DocNumber:            whereHelpernull_String{field: "[dbo].[ttn].[doc_number]"},
	DocDate:              whereHelpernull_String{field: "[dbo].[ttn].[doc_date]"},
	DocShippingDate:      whereHelpernull_String{field: "[dbo].[ttn].[doc_shipping_date]"},
	DocBase:              whereHelpernull_String{field: "[dbo].[ttn].[doc_base]"},
	DocComment:           whereHelpernull_String{field: "[dbo].[ttn].[doc_comment]"},
	ShipperType:          whereHelpernull_String{field: "[dbo].[ttn].[shipper_type]"},
	ShipperClientRegID:   whereHelpernull_String{field: "[dbo].[ttn].[shipper_client_reg_id]"},
	ShipperInn:           whereHelpernull_String{field: "[dbo].[ttn].[shipper_inn]"},
	ShipperKPP:           whereHelpernull_String{field: "[dbo].[ttn].[shipper_kpp]"},
	ShipperFullName:      whereHelpernull_String{field: "[dbo].[ttn].[shipper_full_name]"},
	ShipperShortName:     whereHelpernull_String{field: "[dbo].[ttn].[shipper_short_name]"},
	ShipperCountryCode:   whereHelpernull_String{field: "[dbo].[ttn].[shipper_country_code]"},
	ShipperRegionCode:    whereHelpernull_String{field: "[dbo].[ttn].[shipper_region_code]"},
	ShipperDescription:   whereHelpernull_String{field: "[dbo].[ttn].[shipper_description]"},
	ConsigneeType:        whereHelpernull_String{field: "[dbo].[ttn].[consignee_type]"},
	ConsigneeClientRegID: whereHelpernull_String{field: "[dbo].[ttn].[consignee_client_reg_id]"},
	ConsigneeInn:         whereHelpernull_String{field: "[dbo].[ttn].[consignee_inn]"},
	ConsigneeKPP:         whereHelpernull_String{field: "[dbo].[ttn].[consignee_kpp]"},
	ConsigneeFullName:    whereHelpernull_String{field: "[dbo].[ttn].[consignee_full_name]"},
	ConsigneeShortName:   whereHelpernull_String{field: "[dbo].[ttn].[consignee_short_name]"},
	ConsigneeCountryCode: whereHelpernull_String{field: "[dbo].[ttn].[consignee_country_code]"},
	ConsigneeRegionCode:  whereHelpernull_String{field: "[dbo].[ttn].[consignee_region_code]"},
	ConsigneeDescription: whereHelpernull_String{field: "[dbo].[ttn].[consignee_description]"},
	TranType:             whereHelpernull_String{field: "[dbo].[ttn].[tran_type]"},
	TransportCompany:     whereHelpernull_String{field: "[dbo].[ttn].[transport_company]"},
	TransportCustomer:    whereHelpernull_String{field: "[dbo].[ttn].[transport_customer]"},
	TransportOwnership:   whereHelpernull_String{field: "[dbo].[ttn].[transport_ownership]"},
	TransportType:        whereHelpernull_String{field: "[dbo].[ttn].[transport_type]"},
	TransportDriver:      whereHelpernull_String{field: "[dbo].[ttn].[transport_driver]"},
	TransportTrailer:     whereHelpernull_String{field: "[dbo].[ttn].[transport_trailer]"},
	TransportRegNumber:   whereHelpernull_String{field: "[dbo].[ttn].[transport_reg_number]"},
	TransportForwarder:   whereHelpernull_String{field: "[dbo].[ttn].[transport_forwarder]"},
	TransportLoadPoint:   whereHelpernull_String{field: "[dbo].[ttn].[transport_load_point]"},
	TransportUnloadPoint: whereHelpernull_String{field: "[dbo].[ttn].[transport_unload_point]"},
	TransportRedirect:    whereHelpernull_String{field: "[dbo].[ttn].[transport_redirect]"},
	Version:              whereHelpernull_String{field: "[dbo].[ttn].[version]"},
	State:                whereHelpernull_String{field: "[dbo].[ttn].[state]"},
	Status:               whereHelpernull_String{field: "[dbo].[ttn].[status]"},
	ReplyID:              whereHelpernull_String{field: "[dbo].[ttn].[reply_id]"},
	Archive:              whereHelpernull_Int{field: "[dbo].[ttn].[archive]"},
	XML:                  whereHelpernull_String{field: "[dbo].[ttn].[xml]"},
}

// TTNRels is where relationship names are stored.
var TTNRels = struct {
}{}

// ttnR is where relationships are stored.
type ttnR struct {
}

// NewStruct creates a new relationship struct
func (*ttnR) NewStruct() *ttnR {
	return &ttnR{}
}

// ttnL is where Load methods for each relationship are stored.
type ttnL struct{}

var (
	ttnAllColumns            = []string{"id", "create_date", "ttn_type", "doc_identity", "doc_type", "doc_number", "doc_date", "doc_shipping_date", "doc_base", "doc_comment", "shipper_type", "shipper_client_reg_id", "shipper_inn", "shipper_kpp", "shipper_full_name", "shipper_short_name", "shipper_country_code", "shipper_region_code", "shipper_description", "consignee_type", "consignee_client_reg_id", "consignee_inn", "consignee_kpp", "consignee_full_name", "consignee_short_name", "consignee_country_code", "consignee_region_code", "consignee_description", "tran_type", "transport_company", "transport_customer", "transport_ownership", "transport_type", "transport_driver", "transport_trailer", "transport_reg_number", "transport_forwarder", "transport_load_point", "transport_unload_point", "transport_redirect", "version", "state", "status", "reply_id", "archive", "xml"}
	ttnColumnsWithoutDefault = []string{"create_date", "ttn_type", "doc_identity", "doc_type", "doc_number", "doc_date", "doc_shipping_date", "doc_base", "doc_comment", "shipper_type", "shipper_client_reg_id", "shipper_inn", "shipper_kpp", "shipper_full_name", "shipper_short_name", "shipper_country_code", "shipper_region_code", "shipper_description", "consignee_type", "consignee_client_reg_id", "consignee_inn", "consignee_kpp", "consignee_full_name", "consignee_short_name", "consignee_country_code", "consignee_region_code", "consignee_description", "tran_type", "transport_company", "transport_customer", "transport_ownership", "transport_type", "transport_driver", "transport_trailer", "transport_reg_number", "transport_forwarder", "transport_load_point", "transport_unload_point", "transport_redirect", "version", "state", "status", "reply_id", "archive", "xml"}
	ttnColumnsWithDefault    = []string{"id"}
	ttnPrimaryKeyColumns     = []string{"id"}
	ttnGeneratedColumns      = []string{"id"}
)

type (
	// TTNSlice is an alias for a slice of pointers to TTN.
	// This should almost always be used instead of []TTN.
	TTNSlice []*TTN
	// TTNHook is the signature for custom TTN hook methods
	TTNHook func(context.Context, boil.ContextExecutor, *TTN) error

	ttnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnType                 = reflect.TypeOf(&TTN{})
	ttnMapping              = queries.MakeStructMapping(ttnType)
	ttnPrimaryKeyMapping, _ = queries.BindMapping(ttnType, ttnMapping, ttnPrimaryKeyColumns)
	ttnInsertCacheMut       sync.RWMutex
	ttnInsertCache          = make(map[string]insertCache)
	ttnUpdateCacheMut       sync.RWMutex
	ttnUpdateCache          = make(map[string]updateCache)
	ttnUpsertCacheMut       sync.RWMutex
	ttnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnAfterSelectMu sync.Mutex
var ttnAfterSelectHooks []TTNHook

var ttnBeforeInsertMu sync.Mutex
var ttnBeforeInsertHooks []TTNHook
var ttnAfterInsertMu sync.Mutex
var ttnAfterInsertHooks []TTNHook

var ttnBeforeUpdateMu sync.Mutex
var ttnBeforeUpdateHooks []TTNHook
var ttnAfterUpdateMu sync.Mutex
var ttnAfterUpdateHooks []TTNHook

var ttnBeforeDeleteMu sync.Mutex
var ttnBeforeDeleteHooks []TTNHook
var ttnAfterDeleteMu sync.Mutex
var ttnAfterDeleteHooks []TTNHook

var ttnBeforeUpsertMu sync.Mutex
var ttnBeforeUpsertHooks []TTNHook
var ttnAfterUpsertMu sync.Mutex
var ttnAfterUpsertHooks []TTNHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTN) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTN) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTN) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTN) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTN) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTN) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTN) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTN) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTN) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNHook registers your hook function for all future operations.
func AddTTNHook(hookPoint boil.HookPoint, ttnHook TTNHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnAfterSelectMu.Lock()
		ttnAfterSelectHooks = append(ttnAfterSelectHooks, ttnHook)
		ttnAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnBeforeInsertMu.Lock()
		ttnBeforeInsertHooks = append(ttnBeforeInsertHooks, ttnHook)
		ttnBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnAfterInsertMu.Lock()
		ttnAfterInsertHooks = append(ttnAfterInsertHooks, ttnHook)
		ttnAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnBeforeUpdateMu.Lock()
		ttnBeforeUpdateHooks = append(ttnBeforeUpdateHooks, ttnHook)
		ttnBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnAfterUpdateMu.Lock()
		ttnAfterUpdateHooks = append(ttnAfterUpdateHooks, ttnHook)
		ttnAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnBeforeDeleteMu.Lock()
		ttnBeforeDeleteHooks = append(ttnBeforeDeleteHooks, ttnHook)
		ttnBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnAfterDeleteMu.Lock()
		ttnAfterDeleteHooks = append(ttnAfterDeleteHooks, ttnHook)
		ttnAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnBeforeUpsertMu.Lock()
		ttnBeforeUpsertHooks = append(ttnBeforeUpsertHooks, ttnHook)
		ttnBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnAfterUpsertMu.Lock()
		ttnAfterUpsertHooks = append(ttnAfterUpsertHooks, ttnHook)
		ttnAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttn record from the query using the global executor.
func (q ttnQuery) OneG(ctx context.Context) (*TTN, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttn record from the query.
func (q ttnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTN, error) {
	o := &TTN{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTN records from the query using the global executor.
func (q ttnQuery) AllG(ctx context.Context) (TTNSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTN records from the query.
func (q ttnQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNSlice, error) {
	var o []*TTN

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTN slice")
	}

	if len(ttnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTN records in the query using the global executor
func (q ttnQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTN records in the query.
func (q ttnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn exists")
	}

	return count > 0, nil
}

// TTNS retrieves all the records using an executor.
func TTNS(mods ...qm.QueryMod) ttnQuery {
	mods = append(mods, qm.From("[dbo].[ttn]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn].*"})
	}

	return ttnQuery{q}
}

// FindTTNG retrieves a single record by ID.
func FindTTNG(ctx context.Context, iD int, selectCols ...string) (*TTN, error) {
	return FindTTN(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTN retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTN(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTN, error) {
	ttnObj := &TTN{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn")
	}

	if err = ttnObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnObj, err
	}

	return ttnObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTN) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTN) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnInsertCacheMut.RLock()
	cache, cached := ttnInsertCache[key]
	ttnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnAllColumns,
			ttnColumnsWithDefault,
			ttnColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnType, ttnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnType, ttnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn")
	}

	if !cached {
		ttnInsertCacheMut.Lock()
		ttnInsertCache[key] = cache
		ttnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTN record using the global executor.
// See Update for more documentation.
func (o *TTN) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTN.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTN) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnUpdateCacheMut.RLock()
	cache, cached := ttnUpdateCache[key]
	ttnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnAllColumns,
			ttnPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnType, ttnMapping, append(wl, ttnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn")
	}

	if !cached {
		ttnUpdateCacheMut.Lock()
		ttnUpdateCache[key] = cache
		ttnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttn")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTN) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTN) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnUpsertCacheMut.RLock()
	cache, cached := ttnUpsertCache[key]
	ttnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnAllColumns,
			ttnColumnsWithDefault,
			ttnColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnAllColumns,
			ttnPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnGeneratedColumns)

		ret := strmangle.SetComplement(ttnAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn]", ttnPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnPrimaryKeyColumns))
		copy(whitelist, ttnPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnType, ttnMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnType, ttnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn")
	}

	if !cached {
		ttnUpsertCacheMut.Lock()
		ttnUpsertCache[key] = cache
		ttnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTN record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTN) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTN record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTN) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTN provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn")
	}

	if len(ttnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTN) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTN provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTN) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTN(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn].* FROM [dbo].[ttn] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNSlice")
	}

	*o = slice

	return nil
}

// TTNExistsG checks if the TTN row exists.
func TTNExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNExists(ctx, boil.GetContextDB(), iD)
}

// TTNExists checks if the TTN row exists.
func TTNExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn exists")
	}

	return exists, nil
}

// Exists checks if the TTN row exists.
func (o *TTN) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNExists(ctx, exec, o.ID)
}
