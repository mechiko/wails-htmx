// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Request is an object representing the database table.
type Request struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	Type       null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Value      null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Version    null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Status     null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID    null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	Archive    null.Int    `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	XMLQuery   null.String `boil:"xml_query" json:"xml_query,omitempty" toml:"xml_query" yaml:"xml_query,omitempty"`
	XMLReply   null.String `boil:"xml_reply" json:"xml_reply,omitempty" toml:"xml_reply" yaml:"xml_reply,omitempty"`

	R *requestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequestColumns = struct {
	ID         string
	CreateDate string
	Type       string
	Name       string
	Value      string
	Version    string
	Status     string
	ReplyID    string
	Archive    string
	XMLQuery   string
	XMLReply   string
}{
	ID:         "id",
	CreateDate: "create_date",
	Type:       "type",
	Name:       "name",
	Value:      "value",
	Version:    "version",
	Status:     "status",
	ReplyID:    "reply_id",
	Archive:    "archive",
	XMLQuery:   "xml_query",
	XMLReply:   "xml_reply",
}

var RequestTableColumns = struct {
	ID         string
	CreateDate string
	Type       string
	Name       string
	Value      string
	Version    string
	Status     string
	ReplyID    string
	Archive    string
	XMLQuery   string
	XMLReply   string
}{
	ID:         "requests.id",
	CreateDate: "requests.create_date",
	Type:       "requests.type",
	Name:       "requests.name",
	Value:      "requests.value",
	Version:    "requests.version",
	Status:     "requests.status",
	ReplyID:    "requests.reply_id",
	Archive:    "requests.archive",
	XMLQuery:   "requests.xml_query",
	XMLReply:   "requests.xml_reply",
}

// Generated where

var RequestWhere = struct {
	ID         whereHelperint
	CreateDate whereHelpernull_String
	Type       whereHelpernull_String
	Name       whereHelpernull_String
	Value      whereHelpernull_String
	Version    whereHelpernull_String
	Status     whereHelpernull_String
	ReplyID    whereHelpernull_String
	Archive    whereHelpernull_Int
	XMLQuery   whereHelpernull_String
	XMLReply   whereHelpernull_String
}{
	ID:         whereHelperint{field: "[dbo].[requests].[id]"},
	CreateDate: whereHelpernull_String{field: "[dbo].[requests].[create_date]"},
	Type:       whereHelpernull_String{field: "[dbo].[requests].[type]"},
	Name:       whereHelpernull_String{field: "[dbo].[requests].[name]"},
	Value:      whereHelpernull_String{field: "[dbo].[requests].[value]"},
	Version:    whereHelpernull_String{field: "[dbo].[requests].[version]"},
	Status:     whereHelpernull_String{field: "[dbo].[requests].[status]"},
	ReplyID:    whereHelpernull_String{field: "[dbo].[requests].[reply_id]"},
	Archive:    whereHelpernull_Int{field: "[dbo].[requests].[archive]"},
	XMLQuery:   whereHelpernull_String{field: "[dbo].[requests].[xml_query]"},
	XMLReply:   whereHelpernull_String{field: "[dbo].[requests].[xml_reply]"},
}

// RequestRels is where relationship names are stored.
var RequestRels = struct {
}{}

// requestR is where relationships are stored.
type requestR struct {
}

// NewStruct creates a new relationship struct
func (*requestR) NewStruct() *requestR {
	return &requestR{}
}

// requestL is where Load methods for each relationship are stored.
type requestL struct{}

var (
	requestAllColumns            = []string{"id", "create_date", "type", "name", "value", "version", "status", "reply_id", "archive", "xml_query", "xml_reply"}
	requestColumnsWithoutDefault = []string{"create_date", "type", "name", "value", "version", "status", "reply_id", "archive", "xml_query", "xml_reply"}
	requestColumnsWithDefault    = []string{"id"}
	requestPrimaryKeyColumns     = []string{"id"}
	requestGeneratedColumns      = []string{"id"}
)

type (
	// RequestSlice is an alias for a slice of pointers to Request.
	// This should almost always be used instead of []Request.
	RequestSlice []*Request
	// RequestHook is the signature for custom Request hook methods
	RequestHook func(context.Context, boil.ContextExecutor, *Request) error

	requestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requestType                 = reflect.TypeOf(&Request{})
	requestMapping              = queries.MakeStructMapping(requestType)
	requestPrimaryKeyMapping, _ = queries.BindMapping(requestType, requestMapping, requestPrimaryKeyColumns)
	requestInsertCacheMut       sync.RWMutex
	requestInsertCache          = make(map[string]insertCache)
	requestUpdateCacheMut       sync.RWMutex
	requestUpdateCache          = make(map[string]updateCache)
	requestUpsertCacheMut       sync.RWMutex
	requestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requestAfterSelectMu sync.Mutex
var requestAfterSelectHooks []RequestHook

var requestBeforeInsertMu sync.Mutex
var requestBeforeInsertHooks []RequestHook
var requestAfterInsertMu sync.Mutex
var requestAfterInsertHooks []RequestHook

var requestBeforeUpdateMu sync.Mutex
var requestBeforeUpdateHooks []RequestHook
var requestAfterUpdateMu sync.Mutex
var requestAfterUpdateHooks []RequestHook

var requestBeforeDeleteMu sync.Mutex
var requestBeforeDeleteHooks []RequestHook
var requestAfterDeleteMu sync.Mutex
var requestAfterDeleteHooks []RequestHook

var requestBeforeUpsertMu sync.Mutex
var requestBeforeUpsertHooks []RequestHook
var requestAfterUpsertMu sync.Mutex
var requestAfterUpsertHooks []RequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Request) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Request) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Request) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Request) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Request) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Request) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Request) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Request) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Request) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequestHook registers your hook function for all future operations.
func AddRequestHook(hookPoint boil.HookPoint, requestHook RequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		requestAfterSelectMu.Lock()
		requestAfterSelectHooks = append(requestAfterSelectHooks, requestHook)
		requestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		requestBeforeInsertMu.Lock()
		requestBeforeInsertHooks = append(requestBeforeInsertHooks, requestHook)
		requestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		requestAfterInsertMu.Lock()
		requestAfterInsertHooks = append(requestAfterInsertHooks, requestHook)
		requestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		requestBeforeUpdateMu.Lock()
		requestBeforeUpdateHooks = append(requestBeforeUpdateHooks, requestHook)
		requestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		requestAfterUpdateMu.Lock()
		requestAfterUpdateHooks = append(requestAfterUpdateHooks, requestHook)
		requestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		requestBeforeDeleteMu.Lock()
		requestBeforeDeleteHooks = append(requestBeforeDeleteHooks, requestHook)
		requestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		requestAfterDeleteMu.Lock()
		requestAfterDeleteHooks = append(requestAfterDeleteHooks, requestHook)
		requestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		requestBeforeUpsertMu.Lock()
		requestBeforeUpsertHooks = append(requestBeforeUpsertHooks, requestHook)
		requestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		requestAfterUpsertMu.Lock()
		requestAfterUpsertHooks = append(requestAfterUpsertHooks, requestHook)
		requestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single request record from the query using the global executor.
func (q requestQuery) OneG(ctx context.Context) (*Request, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single request record from the query.
func (q requestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Request, error) {
	o := &Request{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Request records from the query using the global executor.
func (q requestQuery) AllG(ctx context.Context) (RequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Request records from the query.
func (q requestQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestSlice, error) {
	var o []*Request

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to Request slice")
	}

	if len(requestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Request records in the query using the global executor
func (q requestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Request records in the query.
func (q requestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count requests rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q requestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q requestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if requests exists")
	}

	return count > 0, nil
}

// Requests retrieves all the records using an executor.
func Requests(mods ...qm.QueryMod) requestQuery {
	mods = append(mods, qm.From("[dbo].[requests]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[requests].*"})
	}

	return requestQuery{q}
}

// FindRequestG retrieves a single record by ID.
func FindRequestG(ctx context.Context, iD int, selectCols ...string) (*Request, error) {
	return FindRequest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequest(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Request, error) {
	requestObj := &Request{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[requests] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from requests")
	}

	if err = requestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return requestObj, err
	}

	return requestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Request) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Request) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no requests provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requestInsertCacheMut.RLock()
	cache, cached := requestInsertCache[key]
	requestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requestAllColumns,
			requestColumnsWithDefault,
			requestColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, requestGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(requestType, requestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requestType, requestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[requests] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[requests] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into requests")
	}

	if !cached {
		requestInsertCacheMut.Lock()
		requestInsertCache[key] = cache
		requestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Request record using the global executor.
// See Update for more documentation.
func (o *Request) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Request.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Request) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requestUpdateCacheMut.RLock()
	cache, cached := requestUpdateCache[key]
	requestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requestAllColumns,
			requestPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, requestGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[requests] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, requestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requestType, requestMapping, append(wl, requestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for requests")
	}

	if !cached {
		requestUpdateCacheMut.Lock()
		requestUpdateCache[key] = cache
		requestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q requestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q requestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for requests")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[requests] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, requestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in request slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all request")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Request) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Request) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no requests provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requestUpsertCacheMut.RLock()
	cache, cached := requestUpsertCache[key]
	requestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			requestAllColumns,
			requestColumnsWithDefault,
			requestColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, requestGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(requestPrimaryKeyColumns, v) && strmangle.ContainsAny(requestColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert requests, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			requestAllColumns,
			requestPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, requestGeneratedColumns)

		ret := strmangle.SetComplement(requestAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert requests, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[requests]", requestPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(requestPrimaryKeyColumns))
		copy(whitelist, requestPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(requestType, requestMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requestType, requestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert requests")
	}

	if !cached {
		requestUpsertCacheMut.Lock()
		requestUpsertCache[key] = cache
		requestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Request record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Request) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Request record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Request) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no Request provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requestPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[requests] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q requestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q requestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no requestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for requests")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[requests] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from request slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for requests")
	}

	if len(requestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Request) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no Request provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Request) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty RequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[requests].* FROM [dbo].[requests] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in RequestSlice")
	}

	*o = slice

	return nil
}

// RequestExistsG checks if the Request row exists.
func RequestExistsG(ctx context.Context, iD int) (bool, error) {
	return RequestExists(ctx, boil.GetContextDB(), iD)
}

// RequestExists checks if the Request row exists.
func RequestExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[requests] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if requests exists")
	}

	return exists, nil
}

// Exists checks if the Request row exists.
func (o *Request) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RequestExists(ctx, exec, o.ID)
}
