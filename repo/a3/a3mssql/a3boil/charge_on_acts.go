// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChargeOnAct is an object representing the database table.
type ChargeOnAct struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate       null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	DocIdentity      null.String `boil:"doc_identity" json:"doc_identity,omitempty" toml:"doc_identity" yaml:"doc_identity,omitempty"`
	DocType          null.String `boil:"doc_type" json:"doc_type,omitempty" toml:"doc_type" yaml:"doc_type,omitempty"`
	DocNumber        null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	DocDate          null.String `boil:"doc_date" json:"doc_date,omitempty" toml:"doc_date" yaml:"doc_date,omitempty"`
	DocComment       null.String `boil:"doc_comment" json:"doc_comment,omitempty" toml:"doc_comment" yaml:"doc_comment,omitempty"`
	WriteOffActRegID null.String `boil:"write_off_act_reg_id" json:"write_off_act_reg_id,omitempty" toml:"write_off_act_reg_id" yaml:"write_off_act_reg_id,omitempty"`
	Version          null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State            null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status           null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID          null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	Archive          null.Int    `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	XML              null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *chargeOnActR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chargeOnActL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChargeOnActColumns = struct {
	ID               string
	CreateDate       string
	DocIdentity      string
	DocType          string
	DocNumber        string
	DocDate          string
	DocComment       string
	WriteOffActRegID string
	Version          string
	State            string
	Status           string
	ReplyID          string
	Archive          string
	XML              string
}{
	ID:               "id",
	CreateDate:       "create_date",
	DocIdentity:      "doc_identity",
	DocType:          "doc_type",
	DocNumber:        "doc_number",
	DocDate:          "doc_date",
	DocComment:       "doc_comment",
	WriteOffActRegID: "write_off_act_reg_id",
	Version:          "version",
	State:            "state",
	Status:           "status",
	ReplyID:          "reply_id",
	Archive:          "archive",
	XML:              "xml",
}

var ChargeOnActTableColumns = struct {
	ID               string
	CreateDate       string
	DocIdentity      string
	DocType          string
	DocNumber        string
	DocDate          string
	DocComment       string
	WriteOffActRegID string
	Version          string
	State            string
	Status           string
	ReplyID          string
	Archive          string
	XML              string
}{
	ID:               "charge_on_acts.id",
	CreateDate:       "charge_on_acts.create_date",
	DocIdentity:      "charge_on_acts.doc_identity",
	DocType:          "charge_on_acts.doc_type",
	DocNumber:        "charge_on_acts.doc_number",
	DocDate:          "charge_on_acts.doc_date",
	DocComment:       "charge_on_acts.doc_comment",
	WriteOffActRegID: "charge_on_acts.write_off_act_reg_id",
	Version:          "charge_on_acts.version",
	State:            "charge_on_acts.state",
	Status:           "charge_on_acts.status",
	ReplyID:          "charge_on_acts.reply_id",
	Archive:          "charge_on_acts.archive",
	XML:              "charge_on_acts.xml",
}

// Generated where

var ChargeOnActWhere = struct {
	ID               whereHelperint
	CreateDate       whereHelpernull_String
	DocIdentity      whereHelpernull_String
	DocType          whereHelpernull_String
	DocNumber        whereHelpernull_String
	DocDate          whereHelpernull_String
	DocComment       whereHelpernull_String
	WriteOffActRegID whereHelpernull_String
	Version          whereHelpernull_String
	State            whereHelpernull_String
	Status           whereHelpernull_String
	ReplyID          whereHelpernull_String
	Archive          whereHelpernull_Int
	XML              whereHelpernull_String
}{
	ID:               whereHelperint{field: "[dbo].[charge_on_acts].[id]"},
	CreateDate:       whereHelpernull_String{field: "[dbo].[charge_on_acts].[create_date]"},
	DocIdentity:      whereHelpernull_String{field: "[dbo].[charge_on_acts].[doc_identity]"},
	DocType:          whereHelpernull_String{field: "[dbo].[charge_on_acts].[doc_type]"},
	DocNumber:        whereHelpernull_String{field: "[dbo].[charge_on_acts].[doc_number]"},
	DocDate:          whereHelpernull_String{field: "[dbo].[charge_on_acts].[doc_date]"},
	DocComment:       whereHelpernull_String{field: "[dbo].[charge_on_acts].[doc_comment]"},
	WriteOffActRegID: whereHelpernull_String{field: "[dbo].[charge_on_acts].[write_off_act_reg_id]"},
	Version:          whereHelpernull_String{field: "[dbo].[charge_on_acts].[version]"},
	State:            whereHelpernull_String{field: "[dbo].[charge_on_acts].[state]"},
	Status:           whereHelpernull_String{field: "[dbo].[charge_on_acts].[status]"},
	ReplyID:          whereHelpernull_String{field: "[dbo].[charge_on_acts].[reply_id]"},
	Archive:          whereHelpernull_Int{field: "[dbo].[charge_on_acts].[archive]"},
	XML:              whereHelpernull_String{field: "[dbo].[charge_on_acts].[xml]"},
}

// ChargeOnActRels is where relationship names are stored.
var ChargeOnActRels = struct {
}{}

// chargeOnActR is where relationships are stored.
type chargeOnActR struct {
}

// NewStruct creates a new relationship struct
func (*chargeOnActR) NewStruct() *chargeOnActR {
	return &chargeOnActR{}
}

// chargeOnActL is where Load methods for each relationship are stored.
type chargeOnActL struct{}

var (
	chargeOnActAllColumns            = []string{"id", "create_date", "doc_identity", "doc_type", "doc_number", "doc_date", "doc_comment", "write_off_act_reg_id", "version", "state", "status", "reply_id", "archive", "xml"}
	chargeOnActColumnsWithoutDefault = []string{"create_date", "doc_identity", "doc_type", "doc_number", "doc_date", "doc_comment", "write_off_act_reg_id", "version", "state", "status", "reply_id", "archive", "xml"}
	chargeOnActColumnsWithDefault    = []string{"id"}
	chargeOnActPrimaryKeyColumns     = []string{"id"}
	chargeOnActGeneratedColumns      = []string{"id"}
)

type (
	// ChargeOnActSlice is an alias for a slice of pointers to ChargeOnAct.
	// This should almost always be used instead of []ChargeOnAct.
	ChargeOnActSlice []*ChargeOnAct
	// ChargeOnActHook is the signature for custom ChargeOnAct hook methods
	ChargeOnActHook func(context.Context, boil.ContextExecutor, *ChargeOnAct) error

	chargeOnActQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chargeOnActType                 = reflect.TypeOf(&ChargeOnAct{})
	chargeOnActMapping              = queries.MakeStructMapping(chargeOnActType)
	chargeOnActPrimaryKeyMapping, _ = queries.BindMapping(chargeOnActType, chargeOnActMapping, chargeOnActPrimaryKeyColumns)
	chargeOnActInsertCacheMut       sync.RWMutex
	chargeOnActInsertCache          = make(map[string]insertCache)
	chargeOnActUpdateCacheMut       sync.RWMutex
	chargeOnActUpdateCache          = make(map[string]updateCache)
	chargeOnActUpsertCacheMut       sync.RWMutex
	chargeOnActUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chargeOnActAfterSelectMu sync.Mutex
var chargeOnActAfterSelectHooks []ChargeOnActHook

var chargeOnActBeforeInsertMu sync.Mutex
var chargeOnActBeforeInsertHooks []ChargeOnActHook
var chargeOnActAfterInsertMu sync.Mutex
var chargeOnActAfterInsertHooks []ChargeOnActHook

var chargeOnActBeforeUpdateMu sync.Mutex
var chargeOnActBeforeUpdateHooks []ChargeOnActHook
var chargeOnActAfterUpdateMu sync.Mutex
var chargeOnActAfterUpdateHooks []ChargeOnActHook

var chargeOnActBeforeDeleteMu sync.Mutex
var chargeOnActBeforeDeleteHooks []ChargeOnActHook
var chargeOnActAfterDeleteMu sync.Mutex
var chargeOnActAfterDeleteHooks []ChargeOnActHook

var chargeOnActBeforeUpsertMu sync.Mutex
var chargeOnActBeforeUpsertHooks []ChargeOnActHook
var chargeOnActAfterUpsertMu sync.Mutex
var chargeOnActAfterUpsertHooks []ChargeOnActHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChargeOnAct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChargeOnAct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChargeOnAct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChargeOnAct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChargeOnAct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChargeOnAct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChargeOnAct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChargeOnAct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChargeOnAct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnActAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChargeOnActHook registers your hook function for all future operations.
func AddChargeOnActHook(hookPoint boil.HookPoint, chargeOnActHook ChargeOnActHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chargeOnActAfterSelectMu.Lock()
		chargeOnActAfterSelectHooks = append(chargeOnActAfterSelectHooks, chargeOnActHook)
		chargeOnActAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chargeOnActBeforeInsertMu.Lock()
		chargeOnActBeforeInsertHooks = append(chargeOnActBeforeInsertHooks, chargeOnActHook)
		chargeOnActBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chargeOnActAfterInsertMu.Lock()
		chargeOnActAfterInsertHooks = append(chargeOnActAfterInsertHooks, chargeOnActHook)
		chargeOnActAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chargeOnActBeforeUpdateMu.Lock()
		chargeOnActBeforeUpdateHooks = append(chargeOnActBeforeUpdateHooks, chargeOnActHook)
		chargeOnActBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chargeOnActAfterUpdateMu.Lock()
		chargeOnActAfterUpdateHooks = append(chargeOnActAfterUpdateHooks, chargeOnActHook)
		chargeOnActAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chargeOnActBeforeDeleteMu.Lock()
		chargeOnActBeforeDeleteHooks = append(chargeOnActBeforeDeleteHooks, chargeOnActHook)
		chargeOnActBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chargeOnActAfterDeleteMu.Lock()
		chargeOnActAfterDeleteHooks = append(chargeOnActAfterDeleteHooks, chargeOnActHook)
		chargeOnActAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chargeOnActBeforeUpsertMu.Lock()
		chargeOnActBeforeUpsertHooks = append(chargeOnActBeforeUpsertHooks, chargeOnActHook)
		chargeOnActBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chargeOnActAfterUpsertMu.Lock()
		chargeOnActAfterUpsertHooks = append(chargeOnActAfterUpsertHooks, chargeOnActHook)
		chargeOnActAfterUpsertMu.Unlock()
	}
}

// OneG returns a single chargeOnAct record from the query using the global executor.
func (q chargeOnActQuery) OneG(ctx context.Context) (*ChargeOnAct, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single chargeOnAct record from the query.
func (q chargeOnActQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChargeOnAct, error) {
	o := &ChargeOnAct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for charge_on_acts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ChargeOnAct records from the query using the global executor.
func (q chargeOnActQuery) AllG(ctx context.Context) (ChargeOnActSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ChargeOnAct records from the query.
func (q chargeOnActQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChargeOnActSlice, error) {
	var o []*ChargeOnAct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ChargeOnAct slice")
	}

	if len(chargeOnActAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ChargeOnAct records in the query using the global executor
func (q chargeOnActQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ChargeOnAct records in the query.
func (q chargeOnActQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count charge_on_acts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q chargeOnActQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chargeOnActQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if charge_on_acts exists")
	}

	return count > 0, nil
}

// ChargeOnActs retrieves all the records using an executor.
func ChargeOnActs(mods ...qm.QueryMod) chargeOnActQuery {
	mods = append(mods, qm.From("[dbo].[charge_on_acts]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[charge_on_acts].*"})
	}

	return chargeOnActQuery{q}
}

// FindChargeOnActG retrieves a single record by ID.
func FindChargeOnActG(ctx context.Context, iD int, selectCols ...string) (*ChargeOnAct, error) {
	return FindChargeOnAct(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindChargeOnAct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChargeOnAct(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ChargeOnAct, error) {
	chargeOnActObj := &ChargeOnAct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[charge_on_acts] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chargeOnActObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from charge_on_acts")
	}

	if err = chargeOnActObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chargeOnActObj, err
	}

	return chargeOnActObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ChargeOnAct) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChargeOnAct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_acts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnActColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chargeOnActInsertCacheMut.RLock()
	cache, cached := chargeOnActInsertCache[key]
	chargeOnActInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chargeOnActAllColumns,
			chargeOnActColumnsWithDefault,
			chargeOnActColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chargeOnActGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chargeOnActType, chargeOnActMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chargeOnActType, chargeOnActMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[charge_on_acts] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[charge_on_acts] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into charge_on_acts")
	}

	if !cached {
		chargeOnActInsertCacheMut.Lock()
		chargeOnActInsertCache[key] = cache
		chargeOnActInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ChargeOnAct record using the global executor.
// See Update for more documentation.
func (o *ChargeOnAct) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ChargeOnAct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChargeOnAct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chargeOnActUpdateCacheMut.RLock()
	cache, cached := chargeOnActUpdateCache[key]
	chargeOnActUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chargeOnActAllColumns,
			chargeOnActPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chargeOnActGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update charge_on_acts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[charge_on_acts] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, chargeOnActPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chargeOnActType, chargeOnActMapping, append(wl, chargeOnActPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update charge_on_acts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for charge_on_acts")
	}

	if !cached {
		chargeOnActUpdateCacheMut.Lock()
		chargeOnActUpdateCache[key] = cache
		chargeOnActUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chargeOnActQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chargeOnActQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for charge_on_acts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for charge_on_acts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChargeOnActSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChargeOnActSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnActPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[charge_on_acts] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chargeOnActPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in chargeOnAct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all chargeOnAct")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ChargeOnAct) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ChargeOnAct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_acts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnActColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chargeOnActUpsertCacheMut.RLock()
	cache, cached := chargeOnActUpsertCache[key]
	chargeOnActUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chargeOnActAllColumns,
			chargeOnActColumnsWithDefault,
			chargeOnActColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, chargeOnActGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(chargeOnActPrimaryKeyColumns, v) && strmangle.ContainsAny(chargeOnActColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert charge_on_acts, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			chargeOnActAllColumns,
			chargeOnActPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, chargeOnActGeneratedColumns)

		ret := strmangle.SetComplement(chargeOnActAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert charge_on_acts, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[charge_on_acts]", chargeOnActPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(chargeOnActPrimaryKeyColumns))
		copy(whitelist, chargeOnActPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(chargeOnActType, chargeOnActMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chargeOnActType, chargeOnActMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert charge_on_acts")
	}

	if !cached {
		chargeOnActUpsertCacheMut.Lock()
		chargeOnActUpsertCache[key] = cache
		chargeOnActUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ChargeOnAct record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ChargeOnAct) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ChargeOnAct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChargeOnAct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ChargeOnAct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chargeOnActPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[charge_on_acts] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from charge_on_acts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for charge_on_acts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chargeOnActQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q chargeOnActQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no chargeOnActQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from charge_on_acts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_acts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChargeOnActSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChargeOnActSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chargeOnActBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnActPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[charge_on_acts] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chargeOnActPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from chargeOnAct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_acts")
	}

	if len(chargeOnActAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ChargeOnAct) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ChargeOnAct provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChargeOnAct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChargeOnAct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnActSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ChargeOnActSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnActSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChargeOnActSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnActPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[charge_on_acts].* FROM [dbo].[charge_on_acts] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chargeOnActPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ChargeOnActSlice")
	}

	*o = slice

	return nil
}

// ChargeOnActExistsG checks if the ChargeOnAct row exists.
func ChargeOnActExistsG(ctx context.Context, iD int) (bool, error) {
	return ChargeOnActExists(ctx, boil.GetContextDB(), iD)
}

// ChargeOnActExists checks if the ChargeOnAct row exists.
func ChargeOnActExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[charge_on_acts] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if charge_on_acts exists")
	}

	return exists, nil
}

// Exists checks if the ChargeOnAct row exists.
func (o *ChargeOnAct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChargeOnActExists(ctx, exec, o.ID)
}
