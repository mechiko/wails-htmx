// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Ticket is an object representing the database table.
type Ticket struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	TicketDate        null.String `boil:"ticket_date" json:"ticket_date,omitempty" toml:"ticket_date" yaml:"ticket_date,omitempty"`
	Iddomain          null.String `boil:"iddomain" json:"iddomain,omitempty" toml:"iddomain" yaml:"iddomain,omitempty"`
	DocID             null.String `boil:"doc_id" json:"doc_id,omitempty" toml:"doc_id" yaml:"doc_id,omitempty"`
	TransportID       null.String `boil:"transport_id" json:"transport_id,omitempty" toml:"transport_id" yaml:"transport_id,omitempty"`
	RegID             null.String `boil:"reg_id" json:"reg_id,omitempty" toml:"reg_id" yaml:"reg_id,omitempty"`
	DocHash           null.String `boil:"doc_hash" json:"doc_hash,omitempty" toml:"doc_hash" yaml:"doc_hash,omitempty"`
	DocType           null.String `boil:"doc_type" json:"doc_type,omitempty" toml:"doc_type" yaml:"doc_type,omitempty"`
	Conclusion        null.String `boil:"conclusion" json:"conclusion,omitempty" toml:"conclusion" yaml:"conclusion,omitempty"`
	ConclusionDate    null.String `boil:"conclusion_date" json:"conclusion_date,omitempty" toml:"conclusion_date" yaml:"conclusion_date,omitempty"`
	ConclusionComment null.String `boil:"conclusion_comment" json:"conclusion_comment,omitempty" toml:"conclusion_comment" yaml:"conclusion_comment,omitempty"`
	OperationName     null.String `boil:"operation_name" json:"operation_name,omitempty" toml:"operation_name" yaml:"operation_name,omitempty"`
	OperationResult   null.String `boil:"operation_result" json:"operation_result,omitempty" toml:"operation_result" yaml:"operation_result,omitempty"`
	OperationDate     null.String `boil:"operation_date" json:"operation_date,omitempty" toml:"operation_date" yaml:"operation_date,omitempty"`
	OperationComment  null.String `boil:"operation_comment" json:"operation_comment,omitempty" toml:"operation_comment" yaml:"operation_comment,omitempty"`
	XMLReply          null.String `boil:"xml_reply" json:"xml_reply,omitempty" toml:"xml_reply" yaml:"xml_reply,omitempty"`

	R *ticketR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ticketL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TicketColumns = struct {
	ID                string
	TicketDate        string
	Iddomain          string
	DocID             string
	TransportID       string
	RegID             string
	DocHash           string
	DocType           string
	Conclusion        string
	ConclusionDate    string
	ConclusionComment string
	OperationName     string
	OperationResult   string
	OperationDate     string
	OperationComment  string
	XMLReply          string
}{
	ID:                "id",
	TicketDate:        "ticket_date",
	Iddomain:          "iddomain",
	DocID:             "doc_id",
	TransportID:       "transport_id",
	RegID:             "reg_id",
	DocHash:           "doc_hash",
	DocType:           "doc_type",
	Conclusion:        "conclusion",
	ConclusionDate:    "conclusion_date",
	ConclusionComment: "conclusion_comment",
	OperationName:     "operation_name",
	OperationResult:   "operation_result",
	OperationDate:     "operation_date",
	OperationComment:  "operation_comment",
	XMLReply:          "xml_reply",
}

var TicketTableColumns = struct {
	ID                string
	TicketDate        string
	Iddomain          string
	DocID             string
	TransportID       string
	RegID             string
	DocHash           string
	DocType           string
	Conclusion        string
	ConclusionDate    string
	ConclusionComment string
	OperationName     string
	OperationResult   string
	OperationDate     string
	OperationComment  string
	XMLReply          string
}{
	ID:                "tickets.id",
	TicketDate:        "tickets.ticket_date",
	Iddomain:          "tickets.iddomain",
	DocID:             "tickets.doc_id",
	TransportID:       "tickets.transport_id",
	RegID:             "tickets.reg_id",
	DocHash:           "tickets.doc_hash",
	DocType:           "tickets.doc_type",
	Conclusion:        "tickets.conclusion",
	ConclusionDate:    "tickets.conclusion_date",
	ConclusionComment: "tickets.conclusion_comment",
	OperationName:     "tickets.operation_name",
	OperationResult:   "tickets.operation_result",
	OperationDate:     "tickets.operation_date",
	OperationComment:  "tickets.operation_comment",
	XMLReply:          "tickets.xml_reply",
}

// Generated where

var TicketWhere = struct {
	ID                whereHelperint
	TicketDate        whereHelpernull_String
	Iddomain          whereHelpernull_String
	DocID             whereHelpernull_String
	TransportID       whereHelpernull_String
	RegID             whereHelpernull_String
	DocHash           whereHelpernull_String
	DocType           whereHelpernull_String
	Conclusion        whereHelpernull_String
	ConclusionDate    whereHelpernull_String
	ConclusionComment whereHelpernull_String
	OperationName     whereHelpernull_String
	OperationResult   whereHelpernull_String
	OperationDate     whereHelpernull_String
	OperationComment  whereHelpernull_String
	XMLReply          whereHelpernull_String
}{
	ID:                whereHelperint{field: "[dbo].[tickets].[id]"},
	TicketDate:        whereHelpernull_String{field: "[dbo].[tickets].[ticket_date]"},
	Iddomain:          whereHelpernull_String{field: "[dbo].[tickets].[iddomain]"},
	DocID:             whereHelpernull_String{field: "[dbo].[tickets].[doc_id]"},
	TransportID:       whereHelpernull_String{field: "[dbo].[tickets].[transport_id]"},
	RegID:             whereHelpernull_String{field: "[dbo].[tickets].[reg_id]"},
	DocHash:           whereHelpernull_String{field: "[dbo].[tickets].[doc_hash]"},
	DocType:           whereHelpernull_String{field: "[dbo].[tickets].[doc_type]"},
	Conclusion:        whereHelpernull_String{field: "[dbo].[tickets].[conclusion]"},
	ConclusionDate:    whereHelpernull_String{field: "[dbo].[tickets].[conclusion_date]"},
	ConclusionComment: whereHelpernull_String{field: "[dbo].[tickets].[conclusion_comment]"},
	OperationName:     whereHelpernull_String{field: "[dbo].[tickets].[operation_name]"},
	OperationResult:   whereHelpernull_String{field: "[dbo].[tickets].[operation_result]"},
	OperationDate:     whereHelpernull_String{field: "[dbo].[tickets].[operation_date]"},
	OperationComment:  whereHelpernull_String{field: "[dbo].[tickets].[operation_comment]"},
	XMLReply:          whereHelpernull_String{field: "[dbo].[tickets].[xml_reply]"},
}

// TicketRels is where relationship names are stored.
var TicketRels = struct {
}{}

// ticketR is where relationships are stored.
type ticketR struct {
}

// NewStruct creates a new relationship struct
func (*ticketR) NewStruct() *ticketR {
	return &ticketR{}
}

// ticketL is where Load methods for each relationship are stored.
type ticketL struct{}

var (
	ticketAllColumns            = []string{"id", "ticket_date", "iddomain", "doc_id", "transport_id", "reg_id", "doc_hash", "doc_type", "conclusion", "conclusion_date", "conclusion_comment", "operation_name", "operation_result", "operation_date", "operation_comment", "xml_reply"}
	ticketColumnsWithoutDefault = []string{"ticket_date", "iddomain", "doc_id", "transport_id", "reg_id", "doc_hash", "doc_type", "conclusion", "conclusion_date", "conclusion_comment", "operation_name", "operation_result", "operation_date", "operation_comment", "xml_reply"}
	ticketColumnsWithDefault    = []string{"id"}
	ticketPrimaryKeyColumns     = []string{"id"}
	ticketGeneratedColumns      = []string{"id"}
)

type (
	// TicketSlice is an alias for a slice of pointers to Ticket.
	// This should almost always be used instead of []Ticket.
	TicketSlice []*Ticket
	// TicketHook is the signature for custom Ticket hook methods
	TicketHook func(context.Context, boil.ContextExecutor, *Ticket) error

	ticketQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ticketType                 = reflect.TypeOf(&Ticket{})
	ticketMapping              = queries.MakeStructMapping(ticketType)
	ticketPrimaryKeyMapping, _ = queries.BindMapping(ticketType, ticketMapping, ticketPrimaryKeyColumns)
	ticketInsertCacheMut       sync.RWMutex
	ticketInsertCache          = make(map[string]insertCache)
	ticketUpdateCacheMut       sync.RWMutex
	ticketUpdateCache          = make(map[string]updateCache)
	ticketUpsertCacheMut       sync.RWMutex
	ticketUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ticketAfterSelectMu sync.Mutex
var ticketAfterSelectHooks []TicketHook

var ticketBeforeInsertMu sync.Mutex
var ticketBeforeInsertHooks []TicketHook
var ticketAfterInsertMu sync.Mutex
var ticketAfterInsertHooks []TicketHook

var ticketBeforeUpdateMu sync.Mutex
var ticketBeforeUpdateHooks []TicketHook
var ticketAfterUpdateMu sync.Mutex
var ticketAfterUpdateHooks []TicketHook

var ticketBeforeDeleteMu sync.Mutex
var ticketBeforeDeleteHooks []TicketHook
var ticketAfterDeleteMu sync.Mutex
var ticketAfterDeleteHooks []TicketHook

var ticketBeforeUpsertMu sync.Mutex
var ticketBeforeUpsertHooks []TicketHook
var ticketAfterUpsertMu sync.Mutex
var ticketAfterUpsertHooks []TicketHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ticket) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ticket) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ticket) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ticket) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ticket) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ticket) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ticket) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ticket) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ticket) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTicketHook registers your hook function for all future operations.
func AddTicketHook(hookPoint boil.HookPoint, ticketHook TicketHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ticketAfterSelectMu.Lock()
		ticketAfterSelectHooks = append(ticketAfterSelectHooks, ticketHook)
		ticketAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ticketBeforeInsertMu.Lock()
		ticketBeforeInsertHooks = append(ticketBeforeInsertHooks, ticketHook)
		ticketBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ticketAfterInsertMu.Lock()
		ticketAfterInsertHooks = append(ticketAfterInsertHooks, ticketHook)
		ticketAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ticketBeforeUpdateMu.Lock()
		ticketBeforeUpdateHooks = append(ticketBeforeUpdateHooks, ticketHook)
		ticketBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ticketAfterUpdateMu.Lock()
		ticketAfterUpdateHooks = append(ticketAfterUpdateHooks, ticketHook)
		ticketAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ticketBeforeDeleteMu.Lock()
		ticketBeforeDeleteHooks = append(ticketBeforeDeleteHooks, ticketHook)
		ticketBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ticketAfterDeleteMu.Lock()
		ticketAfterDeleteHooks = append(ticketAfterDeleteHooks, ticketHook)
		ticketAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ticketBeforeUpsertMu.Lock()
		ticketBeforeUpsertHooks = append(ticketBeforeUpsertHooks, ticketHook)
		ticketBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ticketAfterUpsertMu.Lock()
		ticketAfterUpsertHooks = append(ticketAfterUpsertHooks, ticketHook)
		ticketAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ticket record from the query using the global executor.
func (q ticketQuery) OneG(ctx context.Context) (*Ticket, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ticket record from the query.
func (q ticketQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ticket, error) {
	o := &Ticket{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for tickets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Ticket records from the query using the global executor.
func (q ticketQuery) AllG(ctx context.Context) (TicketSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Ticket records from the query.
func (q ticketQuery) All(ctx context.Context, exec boil.ContextExecutor) (TicketSlice, error) {
	var o []*Ticket

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to Ticket slice")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Ticket records in the query using the global executor
func (q ticketQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Ticket records in the query.
func (q ticketQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count tickets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ticketQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ticketQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if tickets exists")
	}

	return count > 0, nil
}

// Tickets retrieves all the records using an executor.
func Tickets(mods ...qm.QueryMod) ticketQuery {
	mods = append(mods, qm.From("[dbo].[tickets]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[tickets].*"})
	}

	return ticketQuery{q}
}

// FindTicketG retrieves a single record by ID.
func FindTicketG(ctx context.Context, iD int, selectCols ...string) (*Ticket, error) {
	return FindTicket(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTicket retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicket(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Ticket, error) {
	ticketObj := &Ticket{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[tickets] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ticketObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from tickets")
	}

	if err = ticketObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ticketObj, err
	}

	return ticketObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Ticket) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ticket) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no tickets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ticketInsertCacheMut.RLock()
	cache, cached := ticketInsertCache[key]
	ticketInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ticketAllColumns,
			ticketColumnsWithDefault,
			ticketColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ticketGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ticketType, ticketMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ticketType, ticketMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[tickets] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[tickets] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into tickets")
	}

	if !cached {
		ticketInsertCacheMut.Lock()
		ticketInsertCache[key] = cache
		ticketInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Ticket record using the global executor.
// See Update for more documentation.
func (o *Ticket) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Ticket.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ticket) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ticketUpdateCacheMut.RLock()
	cache, cached := ticketUpdateCache[key]
	ticketUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ticketAllColumns,
			ticketPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ticketGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update tickets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[tickets] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ticketPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ticketType, ticketMapping, append(wl, ticketPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update tickets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for tickets")
	}

	if !cached {
		ticketUpdateCacheMut.Lock()
		ticketUpdateCache[key] = cache
		ticketUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ticketQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ticketQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for tickets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for tickets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TicketSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TicketSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[tickets] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ticketPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ticket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ticket")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Ticket) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Ticket) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no tickets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ticketUpsertCacheMut.RLock()
	cache, cached := ticketUpsertCache[key]
	ticketUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ticketAllColumns,
			ticketColumnsWithDefault,
			ticketColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ticketGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ticketPrimaryKeyColumns, v) && strmangle.ContainsAny(ticketColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert tickets, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ticketAllColumns,
			ticketPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ticketGeneratedColumns)

		ret := strmangle.SetComplement(ticketAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert tickets, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[tickets]", ticketPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ticketPrimaryKeyColumns))
		copy(whitelist, ticketPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ticketType, ticketMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ticketType, ticketMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert tickets")
	}

	if !cached {
		ticketUpsertCacheMut.Lock()
		ticketUpsertCache[key] = cache
		ticketUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Ticket record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Ticket) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Ticket record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ticket) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no Ticket provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ticketPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[tickets] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from tickets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for tickets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ticketQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ticketQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ticketQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from tickets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for tickets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TicketSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TicketSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ticketBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[tickets] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ticketPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ticket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for tickets")
	}

	if len(ticketAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Ticket) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no Ticket provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ticket) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicket(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TicketSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TicketSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[tickets].* FROM [dbo].[tickets] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ticketPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TicketSlice")
	}

	*o = slice

	return nil
}

// TicketExistsG checks if the Ticket row exists.
func TicketExistsG(ctx context.Context, iD int) (bool, error) {
	return TicketExists(ctx, boil.GetContextDB(), iD)
}

// TicketExists checks if the Ticket row exists.
func TicketExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[tickets] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if tickets exists")
	}

	return exists, nil
}

// Exists checks if the Ticket row exists.
func (o *Ticket) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TicketExists(ctx, exec, o.ID)
}
