// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNHistory is an object representing the database table.
type TTNHistory struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTN    null.Int    `boil:"id_ttn" json:"id_ttn,omitempty" toml:"id_ttn" yaml:"id_ttn,omitempty"`
	Identity null.String `boil:"identity" json:"identity,omitempty" toml:"identity" yaml:"identity,omitempty"`

	R *ttnHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNHistoryColumns = struct {
	ID       string
	IDTTN    string
	Identity string
}{
	ID:       "id",
	IDTTN:    "id_ttn",
	Identity: "identity",
}

var TTNHistoryTableColumns = struct {
	ID       string
	IDTTN    string
	Identity string
}{
	ID:       "ttn_histories.id",
	IDTTN:    "ttn_histories.id_ttn",
	Identity: "ttn_histories.identity",
}

// Generated where

var TTNHistoryWhere = struct {
	ID       whereHelperint
	IDTTN    whereHelpernull_Int
	Identity whereHelpernull_String
}{
	ID:       whereHelperint{field: "[dbo].[ttn_histories].[id]"},
	IDTTN:    whereHelpernull_Int{field: "[dbo].[ttn_histories].[id_ttn]"},
	Identity: whereHelpernull_String{field: "[dbo].[ttn_histories].[identity]"},
}

// TTNHistoryRels is where relationship names are stored.
var TTNHistoryRels = struct {
}{}

// ttnHistoryR is where relationships are stored.
type ttnHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*ttnHistoryR) NewStruct() *ttnHistoryR {
	return &ttnHistoryR{}
}

// ttnHistoryL is where Load methods for each relationship are stored.
type ttnHistoryL struct{}

var (
	ttnHistoryAllColumns            = []string{"id", "id_ttn", "identity"}
	ttnHistoryColumnsWithoutDefault = []string{"id_ttn", "identity"}
	ttnHistoryColumnsWithDefault    = []string{"id"}
	ttnHistoryPrimaryKeyColumns     = []string{"id"}
	ttnHistoryGeneratedColumns      = []string{"id"}
)

type (
	// TTNHistorySlice is an alias for a slice of pointers to TTNHistory.
	// This should almost always be used instead of []TTNHistory.
	TTNHistorySlice []*TTNHistory
	// TTNHistoryHook is the signature for custom TTNHistory hook methods
	TTNHistoryHook func(context.Context, boil.ContextExecutor, *TTNHistory) error

	ttnHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnHistoryType                 = reflect.TypeOf(&TTNHistory{})
	ttnHistoryMapping              = queries.MakeStructMapping(ttnHistoryType)
	ttnHistoryPrimaryKeyMapping, _ = queries.BindMapping(ttnHistoryType, ttnHistoryMapping, ttnHistoryPrimaryKeyColumns)
	ttnHistoryInsertCacheMut       sync.RWMutex
	ttnHistoryInsertCache          = make(map[string]insertCache)
	ttnHistoryUpdateCacheMut       sync.RWMutex
	ttnHistoryUpdateCache          = make(map[string]updateCache)
	ttnHistoryUpsertCacheMut       sync.RWMutex
	ttnHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnHistoryAfterSelectMu sync.Mutex
var ttnHistoryAfterSelectHooks []TTNHistoryHook

var ttnHistoryBeforeInsertMu sync.Mutex
var ttnHistoryBeforeInsertHooks []TTNHistoryHook
var ttnHistoryAfterInsertMu sync.Mutex
var ttnHistoryAfterInsertHooks []TTNHistoryHook

var ttnHistoryBeforeUpdateMu sync.Mutex
var ttnHistoryBeforeUpdateHooks []TTNHistoryHook
var ttnHistoryAfterUpdateMu sync.Mutex
var ttnHistoryAfterUpdateHooks []TTNHistoryHook

var ttnHistoryBeforeDeleteMu sync.Mutex
var ttnHistoryBeforeDeleteHooks []TTNHistoryHook
var ttnHistoryAfterDeleteMu sync.Mutex
var ttnHistoryAfterDeleteHooks []TTNHistoryHook

var ttnHistoryBeforeUpsertMu sync.Mutex
var ttnHistoryBeforeUpsertHooks []TTNHistoryHook
var ttnHistoryAfterUpsertMu sync.Mutex
var ttnHistoryAfterUpsertHooks []TTNHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNHistoryHook registers your hook function for all future operations.
func AddTTNHistoryHook(hookPoint boil.HookPoint, ttnHistoryHook TTNHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnHistoryAfterSelectMu.Lock()
		ttnHistoryAfterSelectHooks = append(ttnHistoryAfterSelectHooks, ttnHistoryHook)
		ttnHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnHistoryBeforeInsertMu.Lock()
		ttnHistoryBeforeInsertHooks = append(ttnHistoryBeforeInsertHooks, ttnHistoryHook)
		ttnHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnHistoryAfterInsertMu.Lock()
		ttnHistoryAfterInsertHooks = append(ttnHistoryAfterInsertHooks, ttnHistoryHook)
		ttnHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnHistoryBeforeUpdateMu.Lock()
		ttnHistoryBeforeUpdateHooks = append(ttnHistoryBeforeUpdateHooks, ttnHistoryHook)
		ttnHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnHistoryAfterUpdateMu.Lock()
		ttnHistoryAfterUpdateHooks = append(ttnHistoryAfterUpdateHooks, ttnHistoryHook)
		ttnHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnHistoryBeforeDeleteMu.Lock()
		ttnHistoryBeforeDeleteHooks = append(ttnHistoryBeforeDeleteHooks, ttnHistoryHook)
		ttnHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnHistoryAfterDeleteMu.Lock()
		ttnHistoryAfterDeleteHooks = append(ttnHistoryAfterDeleteHooks, ttnHistoryHook)
		ttnHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnHistoryBeforeUpsertMu.Lock()
		ttnHistoryBeforeUpsertHooks = append(ttnHistoryBeforeUpsertHooks, ttnHistoryHook)
		ttnHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnHistoryAfterUpsertMu.Lock()
		ttnHistoryAfterUpsertHooks = append(ttnHistoryAfterUpsertHooks, ttnHistoryHook)
		ttnHistoryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnHistory record from the query using the global executor.
func (q ttnHistoryQuery) OneG(ctx context.Context) (*TTNHistory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnHistory record from the query.
func (q ttnHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNHistory, error) {
	o := &TTNHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_histories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNHistory records from the query using the global executor.
func (q ttnHistoryQuery) AllG(ctx context.Context) (TTNHistorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNHistory records from the query.
func (q ttnHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNHistorySlice, error) {
	var o []*TTNHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNHistory slice")
	}

	if len(ttnHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNHistory records in the query using the global executor
func (q ttnHistoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNHistory records in the query.
func (q ttnHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_histories rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnHistoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_histories exists")
	}

	return count > 0, nil
}

// TTNHistories retrieves all the records using an executor.
func TTNHistories(mods ...qm.QueryMod) ttnHistoryQuery {
	mods = append(mods, qm.From("[dbo].[ttn_histories]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_histories].*"})
	}

	return ttnHistoryQuery{q}
}

// FindTTNHistoryG retrieves a single record by ID.
func FindTTNHistoryG(ctx context.Context, iD int, selectCols ...string) (*TTNHistory, error) {
	return FindTTNHistory(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNHistory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNHistory, error) {
	ttnHistoryObj := &TTNHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_histories] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_histories")
	}

	if err = ttnHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnHistoryObj, err
	}

	return ttnHistoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNHistory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_histories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnHistoryInsertCacheMut.RLock()
	cache, cached := ttnHistoryInsertCache[key]
	ttnHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnHistoryAllColumns,
			ttnHistoryColumnsWithDefault,
			ttnHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnHistoryGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnHistoryType, ttnHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnHistoryType, ttnHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_histories] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_histories] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_histories")
	}

	if !cached {
		ttnHistoryInsertCacheMut.Lock()
		ttnHistoryInsertCache[key] = cache
		ttnHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNHistory record using the global executor.
// See Update for more documentation.
func (o *TTNHistory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnHistoryUpdateCacheMut.RLock()
	cache, cached := ttnHistoryUpdateCache[key]
	ttnHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnHistoryAllColumns,
			ttnHistoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnHistoryGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_histories] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnHistoryType, ttnHistoryMapping, append(wl, ttnHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_histories")
	}

	if !cached {
		ttnHistoryUpdateCacheMut.Lock()
		ttnHistoryUpdateCache[key] = cache
		ttnHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnHistoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_histories")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNHistorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_histories] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnHistory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNHistory) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_histories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnHistoryUpsertCacheMut.RLock()
	cache, cached := ttnHistoryUpsertCache[key]
	ttnHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnHistoryAllColumns,
			ttnHistoryColumnsWithDefault,
			ttnHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnHistoryGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnHistoryPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnHistoryColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_histories, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnHistoryAllColumns,
			ttnHistoryPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnHistoryGeneratedColumns)

		ret := strmangle.SetComplement(ttnHistoryAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_histories, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_histories]", ttnHistoryPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnHistoryPrimaryKeyColumns))
		copy(whitelist, ttnHistoryPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnHistoryType, ttnHistoryMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnHistoryType, ttnHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_histories")
	}

	if !cached {
		ttnHistoryUpsertCacheMut.Lock()
		ttnHistoryUpsertCache[key] = cache
		ttnHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNHistory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnHistoryPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_histories] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_histories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnHistoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_histories")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNHistorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_histories] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_histories")
	}

	if len(ttnHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNHistory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNHistory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNHistorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNHistorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_histories].* FROM [dbo].[ttn_histories] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNHistorySlice")
	}

	*o = slice

	return nil
}

// TTNHistoryExistsG checks if the TTNHistory row exists.
func TTNHistoryExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNHistoryExists(ctx, boil.GetContextDB(), iD)
}

// TTNHistoryExists checks if the TTNHistory row exists.
func TTNHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_histories] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_histories exists")
	}

	return exists, nil
}

// Exists checks if the TTNHistory row exists.
func (o *TTNHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNHistoryExists(ctx, exec, o.ID)
}
