// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionProductsBox is an object representing the database table.
type ProductionProductsBox struct {
	ID                          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionProducts        null.Int    `boil:"id_production_products" json:"id_production_products,omitempty" toml:"id_production_products" yaml:"id_production_products,omitempty"`
	IDProductionProductsPallets null.Int    `boil:"id_production_products_pallets" json:"id_production_products_pallets,omitempty" toml:"id_production_products_pallets" yaml:"id_production_products_pallets,omitempty"`
	BoxNumber                   null.String `boil:"box_number" json:"box_number,omitempty" toml:"box_number" yaml:"box_number,omitempty"`

	R *productionProductsBoxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionProductsBoxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionProductsBoxColumns = struct {
	ID                          string
	IDProductionProducts        string
	IDProductionProductsPallets string
	BoxNumber                   string
}{
	ID:                          "id",
	IDProductionProducts:        "id_production_products",
	IDProductionProductsPallets: "id_production_products_pallets",
	BoxNumber:                   "box_number",
}

var ProductionProductsBoxTableColumns = struct {
	ID                          string
	IDProductionProducts        string
	IDProductionProductsPallets string
	BoxNumber                   string
}{
	ID:                          "production_products_boxes.id",
	IDProductionProducts:        "production_products_boxes.id_production_products",
	IDProductionProductsPallets: "production_products_boxes.id_production_products_pallets",
	BoxNumber:                   "production_products_boxes.box_number",
}

// Generated where

var ProductionProductsBoxWhere = struct {
	ID                          whereHelperint
	IDProductionProducts        whereHelpernull_Int
	IDProductionProductsPallets whereHelpernull_Int
	BoxNumber                   whereHelpernull_String
}{
	ID:                          whereHelperint{field: "[dbo].[production_products_boxes].[id]"},
	IDProductionProducts:        whereHelpernull_Int{field: "[dbo].[production_products_boxes].[id_production_products]"},
	IDProductionProductsPallets: whereHelpernull_Int{field: "[dbo].[production_products_boxes].[id_production_products_pallets]"},
	BoxNumber:                   whereHelpernull_String{field: "[dbo].[production_products_boxes].[box_number]"},
}

// ProductionProductsBoxRels is where relationship names are stored.
var ProductionProductsBoxRels = struct {
}{}

// productionProductsBoxR is where relationships are stored.
type productionProductsBoxR struct {
}

// NewStruct creates a new relationship struct
func (*productionProductsBoxR) NewStruct() *productionProductsBoxR {
	return &productionProductsBoxR{}
}

// productionProductsBoxL is where Load methods for each relationship are stored.
type productionProductsBoxL struct{}

var (
	productionProductsBoxAllColumns            = []string{"id", "id_production_products", "id_production_products_pallets", "box_number"}
	productionProductsBoxColumnsWithoutDefault = []string{"id_production_products", "id_production_products_pallets", "box_number"}
	productionProductsBoxColumnsWithDefault    = []string{"id"}
	productionProductsBoxPrimaryKeyColumns     = []string{"id"}
	productionProductsBoxGeneratedColumns      = []string{"id"}
)

type (
	// ProductionProductsBoxSlice is an alias for a slice of pointers to ProductionProductsBox.
	// This should almost always be used instead of []ProductionProductsBox.
	ProductionProductsBoxSlice []*ProductionProductsBox
	// ProductionProductsBoxHook is the signature for custom ProductionProductsBox hook methods
	ProductionProductsBoxHook func(context.Context, boil.ContextExecutor, *ProductionProductsBox) error

	productionProductsBoxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionProductsBoxType                 = reflect.TypeOf(&ProductionProductsBox{})
	productionProductsBoxMapping              = queries.MakeStructMapping(productionProductsBoxType)
	productionProductsBoxPrimaryKeyMapping, _ = queries.BindMapping(productionProductsBoxType, productionProductsBoxMapping, productionProductsBoxPrimaryKeyColumns)
	productionProductsBoxInsertCacheMut       sync.RWMutex
	productionProductsBoxInsertCache          = make(map[string]insertCache)
	productionProductsBoxUpdateCacheMut       sync.RWMutex
	productionProductsBoxUpdateCache          = make(map[string]updateCache)
	productionProductsBoxUpsertCacheMut       sync.RWMutex
	productionProductsBoxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionProductsBoxAfterSelectMu sync.Mutex
var productionProductsBoxAfterSelectHooks []ProductionProductsBoxHook

var productionProductsBoxBeforeInsertMu sync.Mutex
var productionProductsBoxBeforeInsertHooks []ProductionProductsBoxHook
var productionProductsBoxAfterInsertMu sync.Mutex
var productionProductsBoxAfterInsertHooks []ProductionProductsBoxHook

var productionProductsBoxBeforeUpdateMu sync.Mutex
var productionProductsBoxBeforeUpdateHooks []ProductionProductsBoxHook
var productionProductsBoxAfterUpdateMu sync.Mutex
var productionProductsBoxAfterUpdateHooks []ProductionProductsBoxHook

var productionProductsBoxBeforeDeleteMu sync.Mutex
var productionProductsBoxBeforeDeleteHooks []ProductionProductsBoxHook
var productionProductsBoxAfterDeleteMu sync.Mutex
var productionProductsBoxAfterDeleteHooks []ProductionProductsBoxHook

var productionProductsBoxBeforeUpsertMu sync.Mutex
var productionProductsBoxBeforeUpsertHooks []ProductionProductsBoxHook
var productionProductsBoxAfterUpsertMu sync.Mutex
var productionProductsBoxAfterUpsertHooks []ProductionProductsBoxHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionProductsBox) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionProductsBox) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionProductsBox) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionProductsBox) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionProductsBox) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionProductsBox) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionProductsBox) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionProductsBox) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionProductsBox) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsBoxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionProductsBoxHook registers your hook function for all future operations.
func AddProductionProductsBoxHook(hookPoint boil.HookPoint, productionProductsBoxHook ProductionProductsBoxHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionProductsBoxAfterSelectMu.Lock()
		productionProductsBoxAfterSelectHooks = append(productionProductsBoxAfterSelectHooks, productionProductsBoxHook)
		productionProductsBoxAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionProductsBoxBeforeInsertMu.Lock()
		productionProductsBoxBeforeInsertHooks = append(productionProductsBoxBeforeInsertHooks, productionProductsBoxHook)
		productionProductsBoxBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionProductsBoxAfterInsertMu.Lock()
		productionProductsBoxAfterInsertHooks = append(productionProductsBoxAfterInsertHooks, productionProductsBoxHook)
		productionProductsBoxAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionProductsBoxBeforeUpdateMu.Lock()
		productionProductsBoxBeforeUpdateHooks = append(productionProductsBoxBeforeUpdateHooks, productionProductsBoxHook)
		productionProductsBoxBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionProductsBoxAfterUpdateMu.Lock()
		productionProductsBoxAfterUpdateHooks = append(productionProductsBoxAfterUpdateHooks, productionProductsBoxHook)
		productionProductsBoxAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionProductsBoxBeforeDeleteMu.Lock()
		productionProductsBoxBeforeDeleteHooks = append(productionProductsBoxBeforeDeleteHooks, productionProductsBoxHook)
		productionProductsBoxBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionProductsBoxAfterDeleteMu.Lock()
		productionProductsBoxAfterDeleteHooks = append(productionProductsBoxAfterDeleteHooks, productionProductsBoxHook)
		productionProductsBoxAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionProductsBoxBeforeUpsertMu.Lock()
		productionProductsBoxBeforeUpsertHooks = append(productionProductsBoxBeforeUpsertHooks, productionProductsBoxHook)
		productionProductsBoxBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionProductsBoxAfterUpsertMu.Lock()
		productionProductsBoxAfterUpsertHooks = append(productionProductsBoxAfterUpsertHooks, productionProductsBoxHook)
		productionProductsBoxAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionProductsBox record from the query using the global executor.
func (q productionProductsBoxQuery) OneG(ctx context.Context) (*ProductionProductsBox, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionProductsBox record from the query.
func (q productionProductsBoxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionProductsBox, error) {
	o := &ProductionProductsBox{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_products_boxes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionProductsBox records from the query using the global executor.
func (q productionProductsBoxQuery) AllG(ctx context.Context) (ProductionProductsBoxSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionProductsBox records from the query.
func (q productionProductsBoxQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionProductsBoxSlice, error) {
	var o []*ProductionProductsBox

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionProductsBox slice")
	}

	if len(productionProductsBoxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionProductsBox records in the query using the global executor
func (q productionProductsBoxQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionProductsBox records in the query.
func (q productionProductsBoxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_products_boxes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionProductsBoxQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionProductsBoxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_products_boxes exists")
	}

	return count > 0, nil
}

// ProductionProductsBoxes retrieves all the records using an executor.
func ProductionProductsBoxes(mods ...qm.QueryMod) productionProductsBoxQuery {
	mods = append(mods, qm.From("[dbo].[production_products_boxes]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[production_products_boxes].*"})
	}

	return productionProductsBoxQuery{q}
}

// FindProductionProductsBoxG retrieves a single record by ID.
func FindProductionProductsBoxG(ctx context.Context, iD int, selectCols ...string) (*ProductionProductsBox, error) {
	return FindProductionProductsBox(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionProductsBox retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionProductsBox(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProductionProductsBox, error) {
	productionProductsBoxObj := &ProductionProductsBox{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[production_products_boxes] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionProductsBoxObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_products_boxes")
	}

	if err = productionProductsBoxObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionProductsBoxObj, err
	}

	return productionProductsBoxObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionProductsBox) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionProductsBox) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_products_boxes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionProductsBoxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionProductsBoxInsertCacheMut.RLock()
	cache, cached := productionProductsBoxInsertCache[key]
	productionProductsBoxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionProductsBoxAllColumns,
			productionProductsBoxColumnsWithDefault,
			productionProductsBoxColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionProductsBoxGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionProductsBoxType, productionProductsBoxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionProductsBoxType, productionProductsBoxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[production_products_boxes] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[production_products_boxes] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_products_boxes")
	}

	if !cached {
		productionProductsBoxInsertCacheMut.Lock()
		productionProductsBoxInsertCache[key] = cache
		productionProductsBoxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionProductsBox record using the global executor.
// See Update for more documentation.
func (o *ProductionProductsBox) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionProductsBox.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionProductsBox) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionProductsBoxUpdateCacheMut.RLock()
	cache, cached := productionProductsBoxUpdateCache[key]
	productionProductsBoxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionProductsBoxAllColumns,
			productionProductsBoxPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionProductsBoxGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_products_boxes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[production_products_boxes] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, productionProductsBoxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionProductsBoxType, productionProductsBoxMapping, append(wl, productionProductsBoxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_products_boxes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_products_boxes")
	}

	if !cached {
		productionProductsBoxUpdateCacheMut.Lock()
		productionProductsBoxUpdateCache[key] = cache
		productionProductsBoxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionProductsBoxQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionProductsBoxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_products_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_products_boxes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionProductsBoxSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionProductsBoxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductsBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[production_products_boxes] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productionProductsBoxPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionProductsBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionProductsBox")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionProductsBox) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ProductionProductsBox) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_products_boxes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionProductsBoxColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionProductsBoxUpsertCacheMut.RLock()
	cache, cached := productionProductsBoxUpsertCache[key]
	productionProductsBoxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productionProductsBoxAllColumns,
			productionProductsBoxColumnsWithDefault,
			productionProductsBoxColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, productionProductsBoxGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(productionProductsBoxPrimaryKeyColumns, v) && strmangle.ContainsAny(productionProductsBoxColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert production_products_boxes, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			productionProductsBoxAllColumns,
			productionProductsBoxPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productionProductsBoxGeneratedColumns)

		ret := strmangle.SetComplement(productionProductsBoxAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_products_boxes, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[production_products_boxes]", productionProductsBoxPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(productionProductsBoxPrimaryKeyColumns))
		copy(whitelist, productionProductsBoxPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(productionProductsBoxType, productionProductsBoxMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionProductsBoxType, productionProductsBoxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_products_boxes")
	}

	if !cached {
		productionProductsBoxUpsertCacheMut.Lock()
		productionProductsBoxUpsertCache[key] = cache
		productionProductsBoxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionProductsBox record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionProductsBox) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionProductsBox record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionProductsBox) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionProductsBox provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionProductsBoxPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[production_products_boxes] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_products_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_products_boxes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionProductsBoxQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionProductsBoxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionProductsBoxQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_products_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_products_boxes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionProductsBoxSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionProductsBoxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionProductsBoxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductsBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[production_products_boxes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productionProductsBoxPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionProductsBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_products_boxes")
	}

	if len(productionProductsBoxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionProductsBox) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionProductsBox provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionProductsBox) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionProductsBox(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionProductsBoxSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionProductsBoxSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionProductsBoxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionProductsBoxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductsBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[production_products_boxes].* FROM [dbo].[production_products_boxes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productionProductsBoxPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionProductsBoxSlice")
	}

	*o = slice

	return nil
}

// ProductionProductsBoxExistsG checks if the ProductionProductsBox row exists.
func ProductionProductsBoxExistsG(ctx context.Context, iD int) (bool, error) {
	return ProductionProductsBoxExists(ctx, boil.GetContextDB(), iD)
}

// ProductionProductsBoxExists checks if the ProductionProductsBox row exists.
func ProductionProductsBoxExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[production_products_boxes] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_products_boxes exists")
	}

	return exists, nil
}

// Exists checks if the ProductionProductsBox row exists.
func (o *ProductionProductsBox) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionProductsBoxExists(ctx, exec, o.ID)
}
