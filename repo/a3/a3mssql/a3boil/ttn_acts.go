// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNAct is an object representing the database table.
type TTNAct struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTN      null.Int    `boil:"id_ttn" json:"id_ttn,omitempty" toml:"id_ttn" yaml:"id_ttn,omitempty"`
	ActType    null.String `boil:"act_type" json:"act_type,omitempty" toml:"act_type" yaml:"act_type,omitempty"`
	ActNumber  null.String `boil:"act_number" json:"act_number,omitempty" toml:"act_number" yaml:"act_number,omitempty"`
	ActDate    null.String `boil:"act_date" json:"act_date,omitempty" toml:"act_date" yaml:"act_date,omitempty"`
	ActRegID   null.String `boil:"act_reg_id" json:"act_reg_id,omitempty" toml:"act_reg_id" yaml:"act_reg_id,omitempty"`
	ActComment null.String `boil:"act_comment" json:"act_comment,omitempty" toml:"act_comment" yaml:"act_comment,omitempty"`
	Status     null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID    null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	XML        null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *ttnActR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnActL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNActColumns = struct {
	ID         string
	IDTTN      string
	ActType    string
	ActNumber  string
	ActDate    string
	ActRegID   string
	ActComment string
	Status     string
	ReplyID    string
	XML        string
}{
	ID:         "id",
	IDTTN:      "id_ttn",
	ActType:    "act_type",
	ActNumber:  "act_number",
	ActDate:    "act_date",
	ActRegID:   "act_reg_id",
	ActComment: "act_comment",
	Status:     "status",
	ReplyID:    "reply_id",
	XML:        "xml",
}

var TTNActTableColumns = struct {
	ID         string
	IDTTN      string
	ActType    string
	ActNumber  string
	ActDate    string
	ActRegID   string
	ActComment string
	Status     string
	ReplyID    string
	XML        string
}{
	ID:         "ttn_acts.id",
	IDTTN:      "ttn_acts.id_ttn",
	ActType:    "ttn_acts.act_type",
	ActNumber:  "ttn_acts.act_number",
	ActDate:    "ttn_acts.act_date",
	ActRegID:   "ttn_acts.act_reg_id",
	ActComment: "ttn_acts.act_comment",
	Status:     "ttn_acts.status",
	ReplyID:    "ttn_acts.reply_id",
	XML:        "ttn_acts.xml",
}

// Generated where

var TTNActWhere = struct {
	ID         whereHelperint
	IDTTN      whereHelpernull_Int
	ActType    whereHelpernull_String
	ActNumber  whereHelpernull_String
	ActDate    whereHelpernull_String
	ActRegID   whereHelpernull_String
	ActComment whereHelpernull_String
	Status     whereHelpernull_String
	ReplyID    whereHelpernull_String
	XML        whereHelpernull_String
}{
	ID:         whereHelperint{field: "[dbo].[ttn_acts].[id]"},
	IDTTN:      whereHelpernull_Int{field: "[dbo].[ttn_acts].[id_ttn]"},
	ActType:    whereHelpernull_String{field: "[dbo].[ttn_acts].[act_type]"},
	ActNumber:  whereHelpernull_String{field: "[dbo].[ttn_acts].[act_number]"},
	ActDate:    whereHelpernull_String{field: "[dbo].[ttn_acts].[act_date]"},
	ActRegID:   whereHelpernull_String{field: "[dbo].[ttn_acts].[act_reg_id]"},
	ActComment: whereHelpernull_String{field: "[dbo].[ttn_acts].[act_comment]"},
	Status:     whereHelpernull_String{field: "[dbo].[ttn_acts].[status]"},
	ReplyID:    whereHelpernull_String{field: "[dbo].[ttn_acts].[reply_id]"},
	XML:        whereHelpernull_String{field: "[dbo].[ttn_acts].[xml]"},
}

// TTNActRels is where relationship names are stored.
var TTNActRels = struct {
}{}

// ttnActR is where relationships are stored.
type ttnActR struct {
}

// NewStruct creates a new relationship struct
func (*ttnActR) NewStruct() *ttnActR {
	return &ttnActR{}
}

// ttnActL is where Load methods for each relationship are stored.
type ttnActL struct{}

var (
	ttnActAllColumns            = []string{"id", "id_ttn", "act_type", "act_number", "act_date", "act_reg_id", "act_comment", "status", "reply_id", "xml"}
	ttnActColumnsWithoutDefault = []string{"id_ttn", "act_type", "act_number", "act_date", "act_reg_id", "act_comment", "status", "reply_id", "xml"}
	ttnActColumnsWithDefault    = []string{"id"}
	ttnActPrimaryKeyColumns     = []string{"id"}
	ttnActGeneratedColumns      = []string{"id"}
)

type (
	// TTNActSlice is an alias for a slice of pointers to TTNAct.
	// This should almost always be used instead of []TTNAct.
	TTNActSlice []*TTNAct
	// TTNActHook is the signature for custom TTNAct hook methods
	TTNActHook func(context.Context, boil.ContextExecutor, *TTNAct) error

	ttnActQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnActType                 = reflect.TypeOf(&TTNAct{})
	ttnActMapping              = queries.MakeStructMapping(ttnActType)
	ttnActPrimaryKeyMapping, _ = queries.BindMapping(ttnActType, ttnActMapping, ttnActPrimaryKeyColumns)
	ttnActInsertCacheMut       sync.RWMutex
	ttnActInsertCache          = make(map[string]insertCache)
	ttnActUpdateCacheMut       sync.RWMutex
	ttnActUpdateCache          = make(map[string]updateCache)
	ttnActUpsertCacheMut       sync.RWMutex
	ttnActUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnActAfterSelectMu sync.Mutex
var ttnActAfterSelectHooks []TTNActHook

var ttnActBeforeInsertMu sync.Mutex
var ttnActBeforeInsertHooks []TTNActHook
var ttnActAfterInsertMu sync.Mutex
var ttnActAfterInsertHooks []TTNActHook

var ttnActBeforeUpdateMu sync.Mutex
var ttnActBeforeUpdateHooks []TTNActHook
var ttnActAfterUpdateMu sync.Mutex
var ttnActAfterUpdateHooks []TTNActHook

var ttnActBeforeDeleteMu sync.Mutex
var ttnActBeforeDeleteHooks []TTNActHook
var ttnActAfterDeleteMu sync.Mutex
var ttnActAfterDeleteHooks []TTNActHook

var ttnActBeforeUpsertMu sync.Mutex
var ttnActBeforeUpsertHooks []TTNActHook
var ttnActAfterUpsertMu sync.Mutex
var ttnActAfterUpsertHooks []TTNActHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNAct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNAct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNAct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNAct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNAct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNAct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNAct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNAct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNAct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNActHook registers your hook function for all future operations.
func AddTTNActHook(hookPoint boil.HookPoint, ttnActHook TTNActHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnActAfterSelectMu.Lock()
		ttnActAfterSelectHooks = append(ttnActAfterSelectHooks, ttnActHook)
		ttnActAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnActBeforeInsertMu.Lock()
		ttnActBeforeInsertHooks = append(ttnActBeforeInsertHooks, ttnActHook)
		ttnActBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnActAfterInsertMu.Lock()
		ttnActAfterInsertHooks = append(ttnActAfterInsertHooks, ttnActHook)
		ttnActAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnActBeforeUpdateMu.Lock()
		ttnActBeforeUpdateHooks = append(ttnActBeforeUpdateHooks, ttnActHook)
		ttnActBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnActAfterUpdateMu.Lock()
		ttnActAfterUpdateHooks = append(ttnActAfterUpdateHooks, ttnActHook)
		ttnActAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnActBeforeDeleteMu.Lock()
		ttnActBeforeDeleteHooks = append(ttnActBeforeDeleteHooks, ttnActHook)
		ttnActBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnActAfterDeleteMu.Lock()
		ttnActAfterDeleteHooks = append(ttnActAfterDeleteHooks, ttnActHook)
		ttnActAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnActBeforeUpsertMu.Lock()
		ttnActBeforeUpsertHooks = append(ttnActBeforeUpsertHooks, ttnActHook)
		ttnActBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnActAfterUpsertMu.Lock()
		ttnActAfterUpsertHooks = append(ttnActAfterUpsertHooks, ttnActHook)
		ttnActAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnAct record from the query using the global executor.
func (q ttnActQuery) OneG(ctx context.Context) (*TTNAct, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnAct record from the query.
func (q ttnActQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNAct, error) {
	o := &TTNAct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_acts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNAct records from the query using the global executor.
func (q ttnActQuery) AllG(ctx context.Context) (TTNActSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNAct records from the query.
func (q ttnActQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNActSlice, error) {
	var o []*TTNAct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNAct slice")
	}

	if len(ttnActAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNAct records in the query using the global executor
func (q ttnActQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNAct records in the query.
func (q ttnActQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_acts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnActQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnActQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_acts exists")
	}

	return count > 0, nil
}

// TTNActs retrieves all the records using an executor.
func TTNActs(mods ...qm.QueryMod) ttnActQuery {
	mods = append(mods, qm.From("[dbo].[ttn_acts]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_acts].*"})
	}

	return ttnActQuery{q}
}

// FindTTNActG retrieves a single record by ID.
func FindTTNActG(ctx context.Context, iD int, selectCols ...string) (*TTNAct, error) {
	return FindTTNAct(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNAct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNAct(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNAct, error) {
	ttnActObj := &TTNAct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_acts] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnActObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_acts")
	}

	if err = ttnActObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnActObj, err
	}

	return ttnActObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNAct) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNAct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnActInsertCacheMut.RLock()
	cache, cached := ttnActInsertCache[key]
	ttnActInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnActAllColumns,
			ttnActColumnsWithDefault,
			ttnActColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnActGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnActType, ttnActMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnActType, ttnActMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_acts] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_acts] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_acts")
	}

	if !cached {
		ttnActInsertCacheMut.Lock()
		ttnActInsertCache[key] = cache
		ttnActInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNAct record using the global executor.
// See Update for more documentation.
func (o *TTNAct) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNAct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNAct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnActUpdateCacheMut.RLock()
	cache, cached := ttnActUpdateCache[key]
	ttnActUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnActAllColumns,
			ttnActPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnActGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_acts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_acts] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnActPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnActType, ttnActMapping, append(wl, ttnActPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_acts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_acts")
	}

	if !cached {
		ttnActUpdateCacheMut.Lock()
		ttnActUpdateCache[key] = cache
		ttnActUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnActQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnActQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_acts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_acts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNActSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNActSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_acts] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnActPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnAct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnAct")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNAct) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNAct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnActUpsertCacheMut.RLock()
	cache, cached := ttnActUpsertCache[key]
	ttnActUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnActAllColumns,
			ttnActColumnsWithDefault,
			ttnActColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnActGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnActPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnActColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnActAllColumns,
			ttnActPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnActGeneratedColumns)

		ret := strmangle.SetComplement(ttnActAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_acts]", ttnActPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnActPrimaryKeyColumns))
		copy(whitelist, ttnActPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnActType, ttnActMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnActType, ttnActMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_acts")
	}

	if !cached {
		ttnActUpsertCacheMut.Lock()
		ttnActUpsertCache[key] = cache
		ttnActUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNAct record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNAct) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNAct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNAct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNAct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnActPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_acts] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_acts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_acts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnActQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnActQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnActQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_acts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNActSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNActSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnActBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_acts] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnActPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnAct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts")
	}

	if len(ttnActAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNAct) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNAct provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNAct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNAct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNActSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNActSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_acts].* FROM [dbo].[ttn_acts] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnActPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNActSlice")
	}

	*o = slice

	return nil
}

// TTNActExistsG checks if the TTNAct row exists.
func TTNActExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNActExists(ctx, boil.GetContextDB(), iD)
}

// TTNActExists checks if the TTNAct row exists.
func TTNActExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_acts] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_acts exists")
	}

	return exists, nil
}

// Exists checks if the TTNAct row exists.
func (o *TTNAct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNActExists(ctx, exec, o.ID)
}
