// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeclarationCompany is an object representing the database table.
type DeclarationCompany struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type       null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	FullName   null.String `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	Inn        null.String `boil:"inn" json:"inn,omitempty" toml:"inn" yaml:"inn,omitempty"`
	KPP        null.String `boil:"kpp" json:"kpp,omitempty" toml:"kpp" yaml:"kpp,omitempty"`
	PostIndex  null.String `boil:"post_index" json:"post_index,omitempty" toml:"post_index" yaml:"post_index,omitempty"`
	RegionCode null.String `boil:"region_code" json:"region_code,omitempty" toml:"region_code" yaml:"region_code,omitempty"`
	District   null.String `boil:"district" json:"district,omitempty" toml:"district" yaml:"district,omitempty"`
	City       null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Locality   null.String `boil:"locality" json:"locality,omitempty" toml:"locality" yaml:"locality,omitempty"`
	Street     null.String `boil:"street" json:"street,omitempty" toml:"street" yaml:"street,omitempty"`
	House      null.String `boil:"house" json:"house,omitempty" toml:"house" yaml:"house,omitempty"`
	Building   null.String `boil:"building" json:"building,omitempty" toml:"building" yaml:"building,omitempty"`
	Letter     null.String `boil:"letter" json:"letter,omitempty" toml:"letter" yaml:"letter,omitempty"`
	Apartment  null.String `boil:"apartment" json:"apartment,omitempty" toml:"apartment" yaml:"apartment,omitempty"`
	Phone      null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	Email      null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`

	R *declarationCompanyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L declarationCompanyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeclarationCompanyColumns = struct {
	ID         string
	Type       string
	FullName   string
	Inn        string
	KPP        string
	PostIndex  string
	RegionCode string
	District   string
	City       string
	Locality   string
	Street     string
	House      string
	Building   string
	Letter     string
	Apartment  string
	Phone      string
	Email      string
}{
	ID:         "id",
	Type:       "type",
	FullName:   "full_name",
	Inn:        "inn",
	KPP:        "kpp",
	PostIndex:  "post_index",
	RegionCode: "region_code",
	District:   "district",
	City:       "city",
	Locality:   "locality",
	Street:     "street",
	House:      "house",
	Building:   "building",
	Letter:     "letter",
	Apartment:  "apartment",
	Phone:      "phone",
	Email:      "email",
}

var DeclarationCompanyTableColumns = struct {
	ID         string
	Type       string
	FullName   string
	Inn        string
	KPP        string
	PostIndex  string
	RegionCode string
	District   string
	City       string
	Locality   string
	Street     string
	House      string
	Building   string
	Letter     string
	Apartment  string
	Phone      string
	Email      string
}{
	ID:         "declaration_companies.id",
	Type:       "declaration_companies.type",
	FullName:   "declaration_companies.full_name",
	Inn:        "declaration_companies.inn",
	KPP:        "declaration_companies.kpp",
	PostIndex:  "declaration_companies.post_index",
	RegionCode: "declaration_companies.region_code",
	District:   "declaration_companies.district",
	City:       "declaration_companies.city",
	Locality:   "declaration_companies.locality",
	Street:     "declaration_companies.street",
	House:      "declaration_companies.house",
	Building:   "declaration_companies.building",
	Letter:     "declaration_companies.letter",
	Apartment:  "declaration_companies.apartment",
	Phone:      "declaration_companies.phone",
	Email:      "declaration_companies.email",
}

// Generated where

var DeclarationCompanyWhere = struct {
	ID         whereHelperint64
	Type       whereHelpernull_String
	FullName   whereHelpernull_String
	Inn        whereHelpernull_String
	KPP        whereHelpernull_String
	PostIndex  whereHelpernull_String
	RegionCode whereHelpernull_String
	District   whereHelpernull_String
	City       whereHelpernull_String
	Locality   whereHelpernull_String
	Street     whereHelpernull_String
	House      whereHelpernull_String
	Building   whereHelpernull_String
	Letter     whereHelpernull_String
	Apartment  whereHelpernull_String
	Phone      whereHelpernull_String
	Email      whereHelpernull_String
}{
	ID:         whereHelperint64{field: "\"declaration_companies\".\"id\""},
	Type:       whereHelpernull_String{field: "\"declaration_companies\".\"type\""},
	FullName:   whereHelpernull_String{field: "\"declaration_companies\".\"full_name\""},
	Inn:        whereHelpernull_String{field: "\"declaration_companies\".\"inn\""},
	KPP:        whereHelpernull_String{field: "\"declaration_companies\".\"kpp\""},
	PostIndex:  whereHelpernull_String{field: "\"declaration_companies\".\"post_index\""},
	RegionCode: whereHelpernull_String{field: "\"declaration_companies\".\"region_code\""},
	District:   whereHelpernull_String{field: "\"declaration_companies\".\"district\""},
	City:       whereHelpernull_String{field: "\"declaration_companies\".\"city\""},
	Locality:   whereHelpernull_String{field: "\"declaration_companies\".\"locality\""},
	Street:     whereHelpernull_String{field: "\"declaration_companies\".\"street\""},
	House:      whereHelpernull_String{field: "\"declaration_companies\".\"house\""},
	Building:   whereHelpernull_String{field: "\"declaration_companies\".\"building\""},
	Letter:     whereHelpernull_String{field: "\"declaration_companies\".\"letter\""},
	Apartment:  whereHelpernull_String{field: "\"declaration_companies\".\"apartment\""},
	Phone:      whereHelpernull_String{field: "\"declaration_companies\".\"phone\""},
	Email:      whereHelpernull_String{field: "\"declaration_companies\".\"email\""},
}

// DeclarationCompanyRels is where relationship names are stored.
var DeclarationCompanyRels = struct {
}{}

// declarationCompanyR is where relationships are stored.
type declarationCompanyR struct {
}

// NewStruct creates a new relationship struct
func (*declarationCompanyR) NewStruct() *declarationCompanyR {
	return &declarationCompanyR{}
}

// declarationCompanyL is where Load methods for each relationship are stored.
type declarationCompanyL struct{}

var (
	declarationCompanyAllColumns            = []string{"id", "type", "full_name", "inn", "kpp", "post_index", "region_code", "district", "city", "locality", "street", "house", "building", "letter", "apartment", "phone", "email"}
	declarationCompanyColumnsWithoutDefault = []string{}
	declarationCompanyColumnsWithDefault    = []string{"id", "type", "full_name", "inn", "kpp", "post_index", "region_code", "district", "city", "locality", "street", "house", "building", "letter", "apartment", "phone", "email"}
	declarationCompanyPrimaryKeyColumns     = []string{"id"}
	declarationCompanyGeneratedColumns      = []string{"id"}
)

type (
	// DeclarationCompanySlice is an alias for a slice of pointers to DeclarationCompany.
	// This should almost always be used instead of []DeclarationCompany.
	DeclarationCompanySlice []*DeclarationCompany
	// DeclarationCompanyHook is the signature for custom DeclarationCompany hook methods
	DeclarationCompanyHook func(context.Context, boil.ContextExecutor, *DeclarationCompany) error

	declarationCompanyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	declarationCompanyType                 = reflect.TypeOf(&DeclarationCompany{})
	declarationCompanyMapping              = queries.MakeStructMapping(declarationCompanyType)
	declarationCompanyPrimaryKeyMapping, _ = queries.BindMapping(declarationCompanyType, declarationCompanyMapping, declarationCompanyPrimaryKeyColumns)
	declarationCompanyInsertCacheMut       sync.RWMutex
	declarationCompanyInsertCache          = make(map[string]insertCache)
	declarationCompanyUpdateCacheMut       sync.RWMutex
	declarationCompanyUpdateCache          = make(map[string]updateCache)
	declarationCompanyUpsertCacheMut       sync.RWMutex
	declarationCompanyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var declarationCompanyAfterSelectMu sync.Mutex
var declarationCompanyAfterSelectHooks []DeclarationCompanyHook

var declarationCompanyBeforeInsertMu sync.Mutex
var declarationCompanyBeforeInsertHooks []DeclarationCompanyHook
var declarationCompanyAfterInsertMu sync.Mutex
var declarationCompanyAfterInsertHooks []DeclarationCompanyHook

var declarationCompanyBeforeUpdateMu sync.Mutex
var declarationCompanyBeforeUpdateHooks []DeclarationCompanyHook
var declarationCompanyAfterUpdateMu sync.Mutex
var declarationCompanyAfterUpdateHooks []DeclarationCompanyHook

var declarationCompanyBeforeDeleteMu sync.Mutex
var declarationCompanyBeforeDeleteHooks []DeclarationCompanyHook
var declarationCompanyAfterDeleteMu sync.Mutex
var declarationCompanyAfterDeleteHooks []DeclarationCompanyHook

var declarationCompanyBeforeUpsertMu sync.Mutex
var declarationCompanyBeforeUpsertHooks []DeclarationCompanyHook
var declarationCompanyAfterUpsertMu sync.Mutex
var declarationCompanyAfterUpsertHooks []DeclarationCompanyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeclarationCompany) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeclarationCompany) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeclarationCompany) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeclarationCompany) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeclarationCompany) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeclarationCompany) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeclarationCompany) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeclarationCompany) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeclarationCompany) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationCompanyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeclarationCompanyHook registers your hook function for all future operations.
func AddDeclarationCompanyHook(hookPoint boil.HookPoint, declarationCompanyHook DeclarationCompanyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		declarationCompanyAfterSelectMu.Lock()
		declarationCompanyAfterSelectHooks = append(declarationCompanyAfterSelectHooks, declarationCompanyHook)
		declarationCompanyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		declarationCompanyBeforeInsertMu.Lock()
		declarationCompanyBeforeInsertHooks = append(declarationCompanyBeforeInsertHooks, declarationCompanyHook)
		declarationCompanyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		declarationCompanyAfterInsertMu.Lock()
		declarationCompanyAfterInsertHooks = append(declarationCompanyAfterInsertHooks, declarationCompanyHook)
		declarationCompanyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		declarationCompanyBeforeUpdateMu.Lock()
		declarationCompanyBeforeUpdateHooks = append(declarationCompanyBeforeUpdateHooks, declarationCompanyHook)
		declarationCompanyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		declarationCompanyAfterUpdateMu.Lock()
		declarationCompanyAfterUpdateHooks = append(declarationCompanyAfterUpdateHooks, declarationCompanyHook)
		declarationCompanyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		declarationCompanyBeforeDeleteMu.Lock()
		declarationCompanyBeforeDeleteHooks = append(declarationCompanyBeforeDeleteHooks, declarationCompanyHook)
		declarationCompanyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		declarationCompanyAfterDeleteMu.Lock()
		declarationCompanyAfterDeleteHooks = append(declarationCompanyAfterDeleteHooks, declarationCompanyHook)
		declarationCompanyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		declarationCompanyBeforeUpsertMu.Lock()
		declarationCompanyBeforeUpsertHooks = append(declarationCompanyBeforeUpsertHooks, declarationCompanyHook)
		declarationCompanyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		declarationCompanyAfterUpsertMu.Lock()
		declarationCompanyAfterUpsertHooks = append(declarationCompanyAfterUpsertHooks, declarationCompanyHook)
		declarationCompanyAfterUpsertMu.Unlock()
	}
}

// OneG returns a single declarationCompany record from the query using the global executor.
func (q declarationCompanyQuery) OneG(ctx context.Context) (*DeclarationCompany, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single declarationCompany record from the query.
func (q declarationCompanyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeclarationCompany, error) {
	o := &DeclarationCompany{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for declaration_companies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DeclarationCompany records from the query using the global executor.
func (q declarationCompanyQuery) AllG(ctx context.Context) (DeclarationCompanySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeclarationCompany records from the query.
func (q declarationCompanyQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeclarationCompanySlice, error) {
	var o []*DeclarationCompany

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to DeclarationCompany slice")
	}

	if len(declarationCompanyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DeclarationCompany records in the query using the global executor
func (q declarationCompanyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeclarationCompany records in the query.
func (q declarationCompanyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count declaration_companies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q declarationCompanyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q declarationCompanyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if declaration_companies exists")
	}

	return count > 0, nil
}

// DeclarationCompanies retrieves all the records using an executor.
func DeclarationCompanies(mods ...qm.QueryMod) declarationCompanyQuery {
	mods = append(mods, qm.From("\"declaration_companies\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"declaration_companies\".*"})
	}

	return declarationCompanyQuery{q}
}

// FindDeclarationCompanyG retrieves a single record by ID.
func FindDeclarationCompanyG(ctx context.Context, iD int64, selectCols ...string) (*DeclarationCompany, error) {
	return FindDeclarationCompany(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeclarationCompany retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeclarationCompany(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DeclarationCompany, error) {
	declarationCompanyObj := &DeclarationCompany{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"declaration_companies\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, declarationCompanyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from declaration_companies")
	}

	if err = declarationCompanyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return declarationCompanyObj, err
	}

	return declarationCompanyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeclarationCompany) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeclarationCompany) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no declaration_companies provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(declarationCompanyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	declarationCompanyInsertCacheMut.RLock()
	cache, cached := declarationCompanyInsertCache[key]
	declarationCompanyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			declarationCompanyAllColumns,
			declarationCompanyColumnsWithDefault,
			declarationCompanyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, declarationCompanyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(declarationCompanyType, declarationCompanyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(declarationCompanyType, declarationCompanyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"declaration_companies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"declaration_companies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into declaration_companies")
	}

	if !cached {
		declarationCompanyInsertCacheMut.Lock()
		declarationCompanyInsertCache[key] = cache
		declarationCompanyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DeclarationCompany record using the global executor.
// See Update for more documentation.
func (o *DeclarationCompany) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeclarationCompany.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeclarationCompany) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	declarationCompanyUpdateCacheMut.RLock()
	cache, cached := declarationCompanyUpdateCache[key]
	declarationCompanyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			declarationCompanyAllColumns,
			declarationCompanyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, declarationCompanyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update declaration_companies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"declaration_companies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, declarationCompanyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(declarationCompanyType, declarationCompanyMapping, append(wl, declarationCompanyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update declaration_companies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for declaration_companies")
	}

	if !cached {
		declarationCompanyUpdateCacheMut.Lock()
		declarationCompanyUpdateCache[key] = cache
		declarationCompanyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q declarationCompanyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q declarationCompanyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for declaration_companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for declaration_companies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeclarationCompanySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeclarationCompanySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"declaration_companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, declarationCompanyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in declarationCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all declarationCompany")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeclarationCompany) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeclarationCompany) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no declaration_companies provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(declarationCompanyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	declarationCompanyUpsertCacheMut.RLock()
	cache, cached := declarationCompanyUpsertCache[key]
	declarationCompanyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			declarationCompanyAllColumns,
			declarationCompanyColumnsWithDefault,
			declarationCompanyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			declarationCompanyAllColumns,
			declarationCompanyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert declaration_companies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(declarationCompanyPrimaryKeyColumns))
			copy(conflict, declarationCompanyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"declaration_companies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(declarationCompanyType, declarationCompanyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(declarationCompanyType, declarationCompanyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert declaration_companies")
	}

	if !cached {
		declarationCompanyUpsertCacheMut.Lock()
		declarationCompanyUpsertCache[key] = cache
		declarationCompanyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DeclarationCompany record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeclarationCompany) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeclarationCompany record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeclarationCompany) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no DeclarationCompany provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), declarationCompanyPrimaryKeyMapping)
	sql := "DELETE FROM \"declaration_companies\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from declaration_companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for declaration_companies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q declarationCompanyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q declarationCompanyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no declarationCompanyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from declaration_companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for declaration_companies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeclarationCompanySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeclarationCompanySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(declarationCompanyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"declaration_companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, declarationCompanyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from declarationCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for declaration_companies")
	}

	if len(declarationCompanyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeclarationCompany) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no DeclarationCompany provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeclarationCompany) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeclarationCompany(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeclarationCompanySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty DeclarationCompanySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeclarationCompanySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeclarationCompanySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"declaration_companies\".* FROM \"declaration_companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, declarationCompanyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in DeclarationCompanySlice")
	}

	*o = slice

	return nil
}

// DeclarationCompanyExistsG checks if the DeclarationCompany row exists.
func DeclarationCompanyExistsG(ctx context.Context, iD int64) (bool, error) {
	return DeclarationCompanyExists(ctx, boil.GetContextDB(), iD)
}

// DeclarationCompanyExists checks if the DeclarationCompany row exists.
func DeclarationCompanyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"declaration_companies\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if declaration_companies exists")
	}

	return exists, nil
}

// Exists checks if the DeclarationCompany row exists.
func (o *DeclarationCompany) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeclarationCompanyExists(ctx, exec, o.ID)
}
