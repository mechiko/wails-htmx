// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WriteOffProduct is an object representing the database table.
type WriteOffProduct struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDWriteOffActs       null.Int64  `boil:"id_write_off_acts" json:"id_write_off_acts,omitempty" toml:"id_write_off_acts" yaml:"id_write_off_acts,omitempty"`
	ProductFullName      null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity      null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume     null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode       null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode          null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType      null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProductIdentity      null.String `boil:"product_identity" json:"product_identity,omitempty" toml:"product_identity" yaml:"product_identity,omitempty"`
	ProductQuantity      null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	ProductPrice         null.String `boil:"product_price" json:"product_price,omitempty" toml:"product_price" yaml:"product_price,omitempty"`
	ProductInformF1RegID null.String `boil:"product_inform_f1_reg_id" json:"product_inform_f1_reg_id,omitempty" toml:"product_inform_f1_reg_id" yaml:"product_inform_f1_reg_id,omitempty"`
	ProductInformF2RegID null.String `boil:"product_inform_f2_reg_id" json:"product_inform_f2_reg_id,omitempty" toml:"product_inform_f2_reg_id" yaml:"product_inform_f2_reg_id,omitempty"`
	ProducerType         null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID  null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn          null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP          null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName     null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName    null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode  null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode   null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription  null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *writeOffProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L writeOffProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WriteOffProductColumns = struct {
	ID                   string
	IDWriteOffActs       string
	ProductFullName      string
	ProductCapacity      string
	ProductAlcVolume     string
	ProductAlcCode       string
	ProductCode          string
	ProductUnitType      string
	ProductIdentity      string
	ProductQuantity      string
	ProductPrice         string
	ProductInformF1RegID string
	ProductInformF2RegID string
	ProducerType         string
	ProducerClientRegID  string
	ProducerInn          string
	ProducerKPP          string
	ProducerFullName     string
	ProducerShortName    string
	ProducerCountryCode  string
	ProducerRegionCode   string
	ProducerDescription  string
}{
	ID:                   "id",
	IDWriteOffActs:       "id_write_off_acts",
	ProductFullName:      "product_full_name",
	ProductCapacity:      "product_capacity",
	ProductAlcVolume:     "product_alc_volume",
	ProductAlcCode:       "product_alc_code",
	ProductCode:          "product_code",
	ProductUnitType:      "product_unit_type",
	ProductIdentity:      "product_identity",
	ProductQuantity:      "product_quantity",
	ProductPrice:         "product_price",
	ProductInformF1RegID: "product_inform_f1_reg_id",
	ProductInformF2RegID: "product_inform_f2_reg_id",
	ProducerType:         "producer_type",
	ProducerClientRegID:  "producer_client_reg_id",
	ProducerInn:          "producer_inn",
	ProducerKPP:          "producer_kpp",
	ProducerFullName:     "producer_full_name",
	ProducerShortName:    "producer_short_name",
	ProducerCountryCode:  "producer_country_code",
	ProducerRegionCode:   "producer_region_code",
	ProducerDescription:  "producer_description",
}

var WriteOffProductTableColumns = struct {
	ID                   string
	IDWriteOffActs       string
	ProductFullName      string
	ProductCapacity      string
	ProductAlcVolume     string
	ProductAlcCode       string
	ProductCode          string
	ProductUnitType      string
	ProductIdentity      string
	ProductQuantity      string
	ProductPrice         string
	ProductInformF1RegID string
	ProductInformF2RegID string
	ProducerType         string
	ProducerClientRegID  string
	ProducerInn          string
	ProducerKPP          string
	ProducerFullName     string
	ProducerShortName    string
	ProducerCountryCode  string
	ProducerRegionCode   string
	ProducerDescription  string
}{
	ID:                   "write_off_products.id",
	IDWriteOffActs:       "write_off_products.id_write_off_acts",
	ProductFullName:      "write_off_products.product_full_name",
	ProductCapacity:      "write_off_products.product_capacity",
	ProductAlcVolume:     "write_off_products.product_alc_volume",
	ProductAlcCode:       "write_off_products.product_alc_code",
	ProductCode:          "write_off_products.product_code",
	ProductUnitType:      "write_off_products.product_unit_type",
	ProductIdentity:      "write_off_products.product_identity",
	ProductQuantity:      "write_off_products.product_quantity",
	ProductPrice:         "write_off_products.product_price",
	ProductInformF1RegID: "write_off_products.product_inform_f1_reg_id",
	ProductInformF2RegID: "write_off_products.product_inform_f2_reg_id",
	ProducerType:         "write_off_products.producer_type",
	ProducerClientRegID:  "write_off_products.producer_client_reg_id",
	ProducerInn:          "write_off_products.producer_inn",
	ProducerKPP:          "write_off_products.producer_kpp",
	ProducerFullName:     "write_off_products.producer_full_name",
	ProducerShortName:    "write_off_products.producer_short_name",
	ProducerCountryCode:  "write_off_products.producer_country_code",
	ProducerRegionCode:   "write_off_products.producer_region_code",
	ProducerDescription:  "write_off_products.producer_description",
}

// Generated where

var WriteOffProductWhere = struct {
	ID                   whereHelperint64
	IDWriteOffActs       whereHelpernull_Int64
	ProductFullName      whereHelpernull_String
	ProductCapacity      whereHelpernull_String
	ProductAlcVolume     whereHelpernull_String
	ProductAlcCode       whereHelpernull_String
	ProductCode          whereHelpernull_String
	ProductUnitType      whereHelpernull_String
	ProductIdentity      whereHelpernull_String
	ProductQuantity      whereHelpernull_String
	ProductPrice         whereHelpernull_String
	ProductInformF1RegID whereHelpernull_String
	ProductInformF2RegID whereHelpernull_String
	ProducerType         whereHelpernull_String
	ProducerClientRegID  whereHelpernull_String
	ProducerInn          whereHelpernull_String
	ProducerKPP          whereHelpernull_String
	ProducerFullName     whereHelpernull_String
	ProducerShortName    whereHelpernull_String
	ProducerCountryCode  whereHelpernull_String
	ProducerRegionCode   whereHelpernull_String
	ProducerDescription  whereHelpernull_String
}{
	ID:                   whereHelperint64{field: "\"write_off_products\".\"id\""},
	IDWriteOffActs:       whereHelpernull_Int64{field: "\"write_off_products\".\"id_write_off_acts\""},
	ProductFullName:      whereHelpernull_String{field: "\"write_off_products\".\"product_full_name\""},
	ProductCapacity:      whereHelpernull_String{field: "\"write_off_products\".\"product_capacity\""},
	ProductAlcVolume:     whereHelpernull_String{field: "\"write_off_products\".\"product_alc_volume\""},
	ProductAlcCode:       whereHelpernull_String{field: "\"write_off_products\".\"product_alc_code\""},
	ProductCode:          whereHelpernull_String{field: "\"write_off_products\".\"product_code\""},
	ProductUnitType:      whereHelpernull_String{field: "\"write_off_products\".\"product_unit_type\""},
	ProductIdentity:      whereHelpernull_String{field: "\"write_off_products\".\"product_identity\""},
	ProductQuantity:      whereHelpernull_String{field: "\"write_off_products\".\"product_quantity\""},
	ProductPrice:         whereHelpernull_String{field: "\"write_off_products\".\"product_price\""},
	ProductInformF1RegID: whereHelpernull_String{field: "\"write_off_products\".\"product_inform_f1_reg_id\""},
	ProductInformF2RegID: whereHelpernull_String{field: "\"write_off_products\".\"product_inform_f2_reg_id\""},
	ProducerType:         whereHelpernull_String{field: "\"write_off_products\".\"producer_type\""},
	ProducerClientRegID:  whereHelpernull_String{field: "\"write_off_products\".\"producer_client_reg_id\""},
	ProducerInn:          whereHelpernull_String{field: "\"write_off_products\".\"producer_inn\""},
	ProducerKPP:          whereHelpernull_String{field: "\"write_off_products\".\"producer_kpp\""},
	ProducerFullName:     whereHelpernull_String{field: "\"write_off_products\".\"producer_full_name\""},
	ProducerShortName:    whereHelpernull_String{field: "\"write_off_products\".\"producer_short_name\""},
	ProducerCountryCode:  whereHelpernull_String{field: "\"write_off_products\".\"producer_country_code\""},
	ProducerRegionCode:   whereHelpernull_String{field: "\"write_off_products\".\"producer_region_code\""},
	ProducerDescription:  whereHelpernull_String{field: "\"write_off_products\".\"producer_description\""},
}

// WriteOffProductRels is where relationship names are stored.
var WriteOffProductRels = struct {
}{}

// writeOffProductR is where relationships are stored.
type writeOffProductR struct {
}

// NewStruct creates a new relationship struct
func (*writeOffProductR) NewStruct() *writeOffProductR {
	return &writeOffProductR{}
}

// writeOffProductL is where Load methods for each relationship are stored.
type writeOffProductL struct{}

var (
	writeOffProductAllColumns            = []string{"id", "id_write_off_acts", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "product_identity", "product_quantity", "product_price", "product_inform_f1_reg_id", "product_inform_f2_reg_id", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	writeOffProductColumnsWithoutDefault = []string{}
	writeOffProductColumnsWithDefault    = []string{"id", "id_write_off_acts", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "product_identity", "product_quantity", "product_price", "product_inform_f1_reg_id", "product_inform_f2_reg_id", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	writeOffProductPrimaryKeyColumns     = []string{"id"}
	writeOffProductGeneratedColumns      = []string{"id"}
)

type (
	// WriteOffProductSlice is an alias for a slice of pointers to WriteOffProduct.
	// This should almost always be used instead of []WriteOffProduct.
	WriteOffProductSlice []*WriteOffProduct
	// WriteOffProductHook is the signature for custom WriteOffProduct hook methods
	WriteOffProductHook func(context.Context, boil.ContextExecutor, *WriteOffProduct) error

	writeOffProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	writeOffProductType                 = reflect.TypeOf(&WriteOffProduct{})
	writeOffProductMapping              = queries.MakeStructMapping(writeOffProductType)
	writeOffProductPrimaryKeyMapping, _ = queries.BindMapping(writeOffProductType, writeOffProductMapping, writeOffProductPrimaryKeyColumns)
	writeOffProductInsertCacheMut       sync.RWMutex
	writeOffProductInsertCache          = make(map[string]insertCache)
	writeOffProductUpdateCacheMut       sync.RWMutex
	writeOffProductUpdateCache          = make(map[string]updateCache)
	writeOffProductUpsertCacheMut       sync.RWMutex
	writeOffProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var writeOffProductAfterSelectMu sync.Mutex
var writeOffProductAfterSelectHooks []WriteOffProductHook

var writeOffProductBeforeInsertMu sync.Mutex
var writeOffProductBeforeInsertHooks []WriteOffProductHook
var writeOffProductAfterInsertMu sync.Mutex
var writeOffProductAfterInsertHooks []WriteOffProductHook

var writeOffProductBeforeUpdateMu sync.Mutex
var writeOffProductBeforeUpdateHooks []WriteOffProductHook
var writeOffProductAfterUpdateMu sync.Mutex
var writeOffProductAfterUpdateHooks []WriteOffProductHook

var writeOffProductBeforeDeleteMu sync.Mutex
var writeOffProductBeforeDeleteHooks []WriteOffProductHook
var writeOffProductAfterDeleteMu sync.Mutex
var writeOffProductAfterDeleteHooks []WriteOffProductHook

var writeOffProductBeforeUpsertMu sync.Mutex
var writeOffProductBeforeUpsertHooks []WriteOffProductHook
var writeOffProductAfterUpsertMu sync.Mutex
var writeOffProductAfterUpsertHooks []WriteOffProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WriteOffProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WriteOffProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WriteOffProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WriteOffProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WriteOffProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WriteOffProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WriteOffProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WriteOffProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WriteOffProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWriteOffProductHook registers your hook function for all future operations.
func AddWriteOffProductHook(hookPoint boil.HookPoint, writeOffProductHook WriteOffProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		writeOffProductAfterSelectMu.Lock()
		writeOffProductAfterSelectHooks = append(writeOffProductAfterSelectHooks, writeOffProductHook)
		writeOffProductAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		writeOffProductBeforeInsertMu.Lock()
		writeOffProductBeforeInsertHooks = append(writeOffProductBeforeInsertHooks, writeOffProductHook)
		writeOffProductBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		writeOffProductAfterInsertMu.Lock()
		writeOffProductAfterInsertHooks = append(writeOffProductAfterInsertHooks, writeOffProductHook)
		writeOffProductAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		writeOffProductBeforeUpdateMu.Lock()
		writeOffProductBeforeUpdateHooks = append(writeOffProductBeforeUpdateHooks, writeOffProductHook)
		writeOffProductBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		writeOffProductAfterUpdateMu.Lock()
		writeOffProductAfterUpdateHooks = append(writeOffProductAfterUpdateHooks, writeOffProductHook)
		writeOffProductAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		writeOffProductBeforeDeleteMu.Lock()
		writeOffProductBeforeDeleteHooks = append(writeOffProductBeforeDeleteHooks, writeOffProductHook)
		writeOffProductBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		writeOffProductAfterDeleteMu.Lock()
		writeOffProductAfterDeleteHooks = append(writeOffProductAfterDeleteHooks, writeOffProductHook)
		writeOffProductAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		writeOffProductBeforeUpsertMu.Lock()
		writeOffProductBeforeUpsertHooks = append(writeOffProductBeforeUpsertHooks, writeOffProductHook)
		writeOffProductBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		writeOffProductAfterUpsertMu.Lock()
		writeOffProductAfterUpsertHooks = append(writeOffProductAfterUpsertHooks, writeOffProductHook)
		writeOffProductAfterUpsertMu.Unlock()
	}
}

// OneG returns a single writeOffProduct record from the query using the global executor.
func (q writeOffProductQuery) OneG(ctx context.Context) (*WriteOffProduct, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single writeOffProduct record from the query.
func (q writeOffProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WriteOffProduct, error) {
	o := &WriteOffProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for write_off_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all WriteOffProduct records from the query using the global executor.
func (q writeOffProductQuery) AllG(ctx context.Context) (WriteOffProductSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all WriteOffProduct records from the query.
func (q writeOffProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (WriteOffProductSlice, error) {
	var o []*WriteOffProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to WriteOffProduct slice")
	}

	if len(writeOffProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all WriteOffProduct records in the query using the global executor
func (q writeOffProductQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all WriteOffProduct records in the query.
func (q writeOffProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count write_off_products rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q writeOffProductQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q writeOffProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if write_off_products exists")
	}

	return count > 0, nil
}

// WriteOffProducts retrieves all the records using an executor.
func WriteOffProducts(mods ...qm.QueryMod) writeOffProductQuery {
	mods = append(mods, qm.From("\"write_off_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"write_off_products\".*"})
	}

	return writeOffProductQuery{q}
}

// FindWriteOffProductG retrieves a single record by ID.
func FindWriteOffProductG(ctx context.Context, iD int64, selectCols ...string) (*WriteOffProduct, error) {
	return FindWriteOffProduct(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindWriteOffProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWriteOffProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*WriteOffProduct, error) {
	writeOffProductObj := &WriteOffProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"write_off_products\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, writeOffProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from write_off_products")
	}

	if err = writeOffProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return writeOffProductObj, err
	}

	return writeOffProductObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WriteOffProduct) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WriteOffProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	writeOffProductInsertCacheMut.RLock()
	cache, cached := writeOffProductInsertCache[key]
	writeOffProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			writeOffProductAllColumns,
			writeOffProductColumnsWithDefault,
			writeOffProductColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, writeOffProductGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(writeOffProductType, writeOffProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(writeOffProductType, writeOffProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"write_off_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"write_off_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into write_off_products")
	}

	if !cached {
		writeOffProductInsertCacheMut.Lock()
		writeOffProductInsertCache[key] = cache
		writeOffProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single WriteOffProduct record using the global executor.
// See Update for more documentation.
func (o *WriteOffProduct) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the WriteOffProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WriteOffProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	writeOffProductUpdateCacheMut.RLock()
	cache, cached := writeOffProductUpdateCache[key]
	writeOffProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			writeOffProductAllColumns,
			writeOffProductPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, writeOffProductGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update write_off_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"write_off_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, writeOffProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(writeOffProductType, writeOffProductMapping, append(wl, writeOffProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update write_off_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for write_off_products")
	}

	if !cached {
		writeOffProductUpdateCacheMut.Lock()
		writeOffProductUpdateCache[key] = cache
		writeOffProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q writeOffProductQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q writeOffProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for write_off_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for write_off_products")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WriteOffProductSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WriteOffProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"write_off_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in writeOffProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all writeOffProduct")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WriteOffProduct) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WriteOffProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	writeOffProductUpsertCacheMut.RLock()
	cache, cached := writeOffProductUpsertCache[key]
	writeOffProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			writeOffProductAllColumns,
			writeOffProductColumnsWithDefault,
			writeOffProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			writeOffProductAllColumns,
			writeOffProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert write_off_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(writeOffProductPrimaryKeyColumns))
			copy(conflict, writeOffProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"write_off_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(writeOffProductType, writeOffProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(writeOffProductType, writeOffProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert write_off_products")
	}

	if !cached {
		writeOffProductUpsertCacheMut.Lock()
		writeOffProductUpsertCache[key] = cache
		writeOffProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single WriteOffProduct record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WriteOffProduct) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single WriteOffProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WriteOffProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no WriteOffProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), writeOffProductPrimaryKeyMapping)
	sql := "DELETE FROM \"write_off_products\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from write_off_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for write_off_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q writeOffProductQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q writeOffProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no writeOffProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from write_off_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_products")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WriteOffProductSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WriteOffProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(writeOffProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"write_off_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from writeOffProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_products")
	}

	if len(writeOffProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WriteOffProduct) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no WriteOffProduct provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WriteOffProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWriteOffProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffProductSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty WriteOffProductSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WriteOffProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"write_off_products\".* FROM \"write_off_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in WriteOffProductSlice")
	}

	*o = slice

	return nil
}

// WriteOffProductExistsG checks if the WriteOffProduct row exists.
func WriteOffProductExistsG(ctx context.Context, iD int64) (bool, error) {
	return WriteOffProductExists(ctx, boil.GetContextDB(), iD)
}

// WriteOffProductExists checks if the WriteOffProduct row exists.
func WriteOffProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"write_off_products\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if write_off_products exists")
	}

	return exists, nil
}

// Exists checks if the WriteOffProduct row exists.
func (o *WriteOffProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WriteOffProductExists(ctx, exec, o.ID)
}
