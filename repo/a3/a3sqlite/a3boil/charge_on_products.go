// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChargeOnProduct is an object representing the database table.
type ChargeOnProduct struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDChargeOnActs      null.Int64  `boil:"id_charge_on_acts" json:"id_charge_on_acts,omitempty" toml:"id_charge_on_acts" yaml:"id_charge_on_acts,omitempty"`
	ProductFullName     null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity     null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume    null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode      null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode         null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType     null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProductIddomain     null.String `boil:"product_iddomain" json:"product_iddomain,omitempty" toml:"product_iddomain" yaml:"product_iddomain,omitempty"`
	ProductQuantity     null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	ProducerType        null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn         null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP         null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName    null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName   null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode  null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`
	Form1Quantity       null.String `boil:"form1_quantity" json:"form1_quantity,omitempty" toml:"form1_quantity" yaml:"form1_quantity,omitempty"`
	Form1BottlingDate   null.String `boil:"form1_bottling_date" json:"form1_bottling_date,omitempty" toml:"form1_bottling_date" yaml:"form1_bottling_date,omitempty"`
	Form1TTNNumber      null.String `boil:"form1_ttn_number" json:"form1_ttn_number,omitempty" toml:"form1_ttn_number" yaml:"form1_ttn_number,omitempty"`
	Form1TTNDate        null.String `boil:"form1_ttn_date" json:"form1_ttn_date,omitempty" toml:"form1_ttn_date" yaml:"form1_ttn_date,omitempty"`
	Form1EgaisFixNumber null.String `boil:"form1_egais_fix_number" json:"form1_egais_fix_number,omitempty" toml:"form1_egais_fix_number" yaml:"form1_egais_fix_number,omitempty"`
	Form1EgaisFixDate   null.String `boil:"form1_egais_fix_date" json:"form1_egais_fix_date,omitempty" toml:"form1_egais_fix_date" yaml:"form1_egais_fix_date,omitempty"`

	R *chargeOnProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chargeOnProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChargeOnProductColumns = struct {
	ID                  string
	IDChargeOnActs      string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProductIddomain     string
	ProductQuantity     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
	Form1Quantity       string
	Form1BottlingDate   string
	Form1TTNNumber      string
	Form1TTNDate        string
	Form1EgaisFixNumber string
	Form1EgaisFixDate   string
}{
	ID:                  "id",
	IDChargeOnActs:      "id_charge_on_acts",
	ProductFullName:     "product_full_name",
	ProductCapacity:     "product_capacity",
	ProductAlcVolume:    "product_alc_volume",
	ProductAlcCode:      "product_alc_code",
	ProductCode:         "product_code",
	ProductUnitType:     "product_unit_type",
	ProductIddomain:     "product_iddomain",
	ProductQuantity:     "product_quantity",
	ProducerType:        "producer_type",
	ProducerClientRegID: "producer_client_reg_id",
	ProducerInn:         "producer_inn",
	ProducerKPP:         "producer_kpp",
	ProducerFullName:    "producer_full_name",
	ProducerShortName:   "producer_short_name",
	ProducerCountryCode: "producer_country_code",
	ProducerRegionCode:  "producer_region_code",
	ProducerDescription: "producer_description",
	Form1Quantity:       "form1_quantity",
	Form1BottlingDate:   "form1_bottling_date",
	Form1TTNNumber:      "form1_ttn_number",
	Form1TTNDate:        "form1_ttn_date",
	Form1EgaisFixNumber: "form1_egais_fix_number",
	Form1EgaisFixDate:   "form1_egais_fix_date",
}

var ChargeOnProductTableColumns = struct {
	ID                  string
	IDChargeOnActs      string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProductIddomain     string
	ProductQuantity     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
	Form1Quantity       string
	Form1BottlingDate   string
	Form1TTNNumber      string
	Form1TTNDate        string
	Form1EgaisFixNumber string
	Form1EgaisFixDate   string
}{
	ID:                  "charge_on_products.id",
	IDChargeOnActs:      "charge_on_products.id_charge_on_acts",
	ProductFullName:     "charge_on_products.product_full_name",
	ProductCapacity:     "charge_on_products.product_capacity",
	ProductAlcVolume:    "charge_on_products.product_alc_volume",
	ProductAlcCode:      "charge_on_products.product_alc_code",
	ProductCode:         "charge_on_products.product_code",
	ProductUnitType:     "charge_on_products.product_unit_type",
	ProductIddomain:     "charge_on_products.product_iddomain",
	ProductQuantity:     "charge_on_products.product_quantity",
	ProducerType:        "charge_on_products.producer_type",
	ProducerClientRegID: "charge_on_products.producer_client_reg_id",
	ProducerInn:         "charge_on_products.producer_inn",
	ProducerKPP:         "charge_on_products.producer_kpp",
	ProducerFullName:    "charge_on_products.producer_full_name",
	ProducerShortName:   "charge_on_products.producer_short_name",
	ProducerCountryCode: "charge_on_products.producer_country_code",
	ProducerRegionCode:  "charge_on_products.producer_region_code",
	ProducerDescription: "charge_on_products.producer_description",
	Form1Quantity:       "charge_on_products.form1_quantity",
	Form1BottlingDate:   "charge_on_products.form1_bottling_date",
	Form1TTNNumber:      "charge_on_products.form1_ttn_number",
	Form1TTNDate:        "charge_on_products.form1_ttn_date",
	Form1EgaisFixNumber: "charge_on_products.form1_egais_fix_number",
	Form1EgaisFixDate:   "charge_on_products.form1_egais_fix_date",
}

// Generated where

var ChargeOnProductWhere = struct {
	ID                  whereHelperint64
	IDChargeOnActs      whereHelpernull_Int64
	ProductFullName     whereHelpernull_String
	ProductCapacity     whereHelpernull_String
	ProductAlcVolume    whereHelpernull_String
	ProductAlcCode      whereHelpernull_String
	ProductCode         whereHelpernull_String
	ProductUnitType     whereHelpernull_String
	ProductIddomain     whereHelpernull_String
	ProductQuantity     whereHelpernull_String
	ProducerType        whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	ProducerInn         whereHelpernull_String
	ProducerKPP         whereHelpernull_String
	ProducerFullName    whereHelpernull_String
	ProducerShortName   whereHelpernull_String
	ProducerCountryCode whereHelpernull_String
	ProducerRegionCode  whereHelpernull_String
	ProducerDescription whereHelpernull_String
	Form1Quantity       whereHelpernull_String
	Form1BottlingDate   whereHelpernull_String
	Form1TTNNumber      whereHelpernull_String
	Form1TTNDate        whereHelpernull_String
	Form1EgaisFixNumber whereHelpernull_String
	Form1EgaisFixDate   whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"charge_on_products\".\"id\""},
	IDChargeOnActs:      whereHelpernull_Int64{field: "\"charge_on_products\".\"id_charge_on_acts\""},
	ProductFullName:     whereHelpernull_String{field: "\"charge_on_products\".\"product_full_name\""},
	ProductCapacity:     whereHelpernull_String{field: "\"charge_on_products\".\"product_capacity\""},
	ProductAlcVolume:    whereHelpernull_String{field: "\"charge_on_products\".\"product_alc_volume\""},
	ProductAlcCode:      whereHelpernull_String{field: "\"charge_on_products\".\"product_alc_code\""},
	ProductCode:         whereHelpernull_String{field: "\"charge_on_products\".\"product_code\""},
	ProductUnitType:     whereHelpernull_String{field: "\"charge_on_products\".\"product_unit_type\""},
	ProductIddomain:     whereHelpernull_String{field: "\"charge_on_products\".\"product_iddomain\""},
	ProductQuantity:     whereHelpernull_String{field: "\"charge_on_products\".\"product_quantity\""},
	ProducerType:        whereHelpernull_String{field: "\"charge_on_products\".\"producer_type\""},
	ProducerClientRegID: whereHelpernull_String{field: "\"charge_on_products\".\"producer_client_reg_id\""},
	ProducerInn:         whereHelpernull_String{field: "\"charge_on_products\".\"producer_inn\""},
	ProducerKPP:         whereHelpernull_String{field: "\"charge_on_products\".\"producer_kpp\""},
	ProducerFullName:    whereHelpernull_String{field: "\"charge_on_products\".\"producer_full_name\""},
	ProducerShortName:   whereHelpernull_String{field: "\"charge_on_products\".\"producer_short_name\""},
	ProducerCountryCode: whereHelpernull_String{field: "\"charge_on_products\".\"producer_country_code\""},
	ProducerRegionCode:  whereHelpernull_String{field: "\"charge_on_products\".\"producer_region_code\""},
	ProducerDescription: whereHelpernull_String{field: "\"charge_on_products\".\"producer_description\""},
	Form1Quantity:       whereHelpernull_String{field: "\"charge_on_products\".\"form1_quantity\""},
	Form1BottlingDate:   whereHelpernull_String{field: "\"charge_on_products\".\"form1_bottling_date\""},
	Form1TTNNumber:      whereHelpernull_String{field: "\"charge_on_products\".\"form1_ttn_number\""},
	Form1TTNDate:        whereHelpernull_String{field: "\"charge_on_products\".\"form1_ttn_date\""},
	Form1EgaisFixNumber: whereHelpernull_String{field: "\"charge_on_products\".\"form1_egais_fix_number\""},
	Form1EgaisFixDate:   whereHelpernull_String{field: "\"charge_on_products\".\"form1_egais_fix_date\""},
}

// ChargeOnProductRels is where relationship names are stored.
var ChargeOnProductRels = struct {
}{}

// chargeOnProductR is where relationships are stored.
type chargeOnProductR struct {
}

// NewStruct creates a new relationship struct
func (*chargeOnProductR) NewStruct() *chargeOnProductR {
	return &chargeOnProductR{}
}

// chargeOnProductL is where Load methods for each relationship are stored.
type chargeOnProductL struct{}

var (
	chargeOnProductAllColumns            = []string{"id", "id_charge_on_acts", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "product_iddomain", "product_quantity", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description", "form1_quantity", "form1_bottling_date", "form1_ttn_number", "form1_ttn_date", "form1_egais_fix_number", "form1_egais_fix_date"}
	chargeOnProductColumnsWithoutDefault = []string{}
	chargeOnProductColumnsWithDefault    = []string{"id", "id_charge_on_acts", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "product_iddomain", "product_quantity", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description", "form1_quantity", "form1_bottling_date", "form1_ttn_number", "form1_ttn_date", "form1_egais_fix_number", "form1_egais_fix_date"}
	chargeOnProductPrimaryKeyColumns     = []string{"id"}
	chargeOnProductGeneratedColumns      = []string{"id"}
)

type (
	// ChargeOnProductSlice is an alias for a slice of pointers to ChargeOnProduct.
	// This should almost always be used instead of []ChargeOnProduct.
	ChargeOnProductSlice []*ChargeOnProduct
	// ChargeOnProductHook is the signature for custom ChargeOnProduct hook methods
	ChargeOnProductHook func(context.Context, boil.ContextExecutor, *ChargeOnProduct) error

	chargeOnProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chargeOnProductType                 = reflect.TypeOf(&ChargeOnProduct{})
	chargeOnProductMapping              = queries.MakeStructMapping(chargeOnProductType)
	chargeOnProductPrimaryKeyMapping, _ = queries.BindMapping(chargeOnProductType, chargeOnProductMapping, chargeOnProductPrimaryKeyColumns)
	chargeOnProductInsertCacheMut       sync.RWMutex
	chargeOnProductInsertCache          = make(map[string]insertCache)
	chargeOnProductUpdateCacheMut       sync.RWMutex
	chargeOnProductUpdateCache          = make(map[string]updateCache)
	chargeOnProductUpsertCacheMut       sync.RWMutex
	chargeOnProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chargeOnProductAfterSelectMu sync.Mutex
var chargeOnProductAfterSelectHooks []ChargeOnProductHook

var chargeOnProductBeforeInsertMu sync.Mutex
var chargeOnProductBeforeInsertHooks []ChargeOnProductHook
var chargeOnProductAfterInsertMu sync.Mutex
var chargeOnProductAfterInsertHooks []ChargeOnProductHook

var chargeOnProductBeforeUpdateMu sync.Mutex
var chargeOnProductBeforeUpdateHooks []ChargeOnProductHook
var chargeOnProductAfterUpdateMu sync.Mutex
var chargeOnProductAfterUpdateHooks []ChargeOnProductHook

var chargeOnProductBeforeDeleteMu sync.Mutex
var chargeOnProductBeforeDeleteHooks []ChargeOnProductHook
var chargeOnProductAfterDeleteMu sync.Mutex
var chargeOnProductAfterDeleteHooks []ChargeOnProductHook

var chargeOnProductBeforeUpsertMu sync.Mutex
var chargeOnProductBeforeUpsertHooks []ChargeOnProductHook
var chargeOnProductAfterUpsertMu sync.Mutex
var chargeOnProductAfterUpsertHooks []ChargeOnProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChargeOnProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChargeOnProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChargeOnProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChargeOnProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChargeOnProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChargeOnProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChargeOnProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChargeOnProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChargeOnProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChargeOnProductHook registers your hook function for all future operations.
func AddChargeOnProductHook(hookPoint boil.HookPoint, chargeOnProductHook ChargeOnProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chargeOnProductAfterSelectMu.Lock()
		chargeOnProductAfterSelectHooks = append(chargeOnProductAfterSelectHooks, chargeOnProductHook)
		chargeOnProductAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chargeOnProductBeforeInsertMu.Lock()
		chargeOnProductBeforeInsertHooks = append(chargeOnProductBeforeInsertHooks, chargeOnProductHook)
		chargeOnProductBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chargeOnProductAfterInsertMu.Lock()
		chargeOnProductAfterInsertHooks = append(chargeOnProductAfterInsertHooks, chargeOnProductHook)
		chargeOnProductAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chargeOnProductBeforeUpdateMu.Lock()
		chargeOnProductBeforeUpdateHooks = append(chargeOnProductBeforeUpdateHooks, chargeOnProductHook)
		chargeOnProductBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chargeOnProductAfterUpdateMu.Lock()
		chargeOnProductAfterUpdateHooks = append(chargeOnProductAfterUpdateHooks, chargeOnProductHook)
		chargeOnProductAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chargeOnProductBeforeDeleteMu.Lock()
		chargeOnProductBeforeDeleteHooks = append(chargeOnProductBeforeDeleteHooks, chargeOnProductHook)
		chargeOnProductBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chargeOnProductAfterDeleteMu.Lock()
		chargeOnProductAfterDeleteHooks = append(chargeOnProductAfterDeleteHooks, chargeOnProductHook)
		chargeOnProductAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chargeOnProductBeforeUpsertMu.Lock()
		chargeOnProductBeforeUpsertHooks = append(chargeOnProductBeforeUpsertHooks, chargeOnProductHook)
		chargeOnProductBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chargeOnProductAfterUpsertMu.Lock()
		chargeOnProductAfterUpsertHooks = append(chargeOnProductAfterUpsertHooks, chargeOnProductHook)
		chargeOnProductAfterUpsertMu.Unlock()
	}
}

// OneG returns a single chargeOnProduct record from the query using the global executor.
func (q chargeOnProductQuery) OneG(ctx context.Context) (*ChargeOnProduct, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single chargeOnProduct record from the query.
func (q chargeOnProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChargeOnProduct, error) {
	o := &ChargeOnProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for charge_on_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ChargeOnProduct records from the query using the global executor.
func (q chargeOnProductQuery) AllG(ctx context.Context) (ChargeOnProductSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ChargeOnProduct records from the query.
func (q chargeOnProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChargeOnProductSlice, error) {
	var o []*ChargeOnProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ChargeOnProduct slice")
	}

	if len(chargeOnProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ChargeOnProduct records in the query using the global executor
func (q chargeOnProductQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ChargeOnProduct records in the query.
func (q chargeOnProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count charge_on_products rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q chargeOnProductQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chargeOnProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if charge_on_products exists")
	}

	return count > 0, nil
}

// ChargeOnProducts retrieves all the records using an executor.
func ChargeOnProducts(mods ...qm.QueryMod) chargeOnProductQuery {
	mods = append(mods, qm.From("\"charge_on_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"charge_on_products\".*"})
	}

	return chargeOnProductQuery{q}
}

// FindChargeOnProductG retrieves a single record by ID.
func FindChargeOnProductG(ctx context.Context, iD int64, selectCols ...string) (*ChargeOnProduct, error) {
	return FindChargeOnProduct(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindChargeOnProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChargeOnProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ChargeOnProduct, error) {
	chargeOnProductObj := &ChargeOnProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"charge_on_products\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chargeOnProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from charge_on_products")
	}

	if err = chargeOnProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chargeOnProductObj, err
	}

	return chargeOnProductObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ChargeOnProduct) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChargeOnProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chargeOnProductInsertCacheMut.RLock()
	cache, cached := chargeOnProductInsertCache[key]
	chargeOnProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chargeOnProductAllColumns,
			chargeOnProductColumnsWithDefault,
			chargeOnProductColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chargeOnProductGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chargeOnProductType, chargeOnProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chargeOnProductType, chargeOnProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"charge_on_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"charge_on_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into charge_on_products")
	}

	if !cached {
		chargeOnProductInsertCacheMut.Lock()
		chargeOnProductInsertCache[key] = cache
		chargeOnProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ChargeOnProduct record using the global executor.
// See Update for more documentation.
func (o *ChargeOnProduct) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ChargeOnProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChargeOnProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chargeOnProductUpdateCacheMut.RLock()
	cache, cached := chargeOnProductUpdateCache[key]
	chargeOnProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chargeOnProductAllColumns,
			chargeOnProductPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chargeOnProductGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update charge_on_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"charge_on_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chargeOnProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chargeOnProductType, chargeOnProductMapping, append(wl, chargeOnProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update charge_on_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for charge_on_products")
	}

	if !cached {
		chargeOnProductUpdateCacheMut.Lock()
		chargeOnProductUpdateCache[key] = cache
		chargeOnProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chargeOnProductQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chargeOnProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for charge_on_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for charge_on_products")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChargeOnProductSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChargeOnProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"charge_on_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargeOnProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in chargeOnProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all chargeOnProduct")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ChargeOnProduct) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChargeOnProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chargeOnProductUpsertCacheMut.RLock()
	cache, cached := chargeOnProductUpsertCache[key]
	chargeOnProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chargeOnProductAllColumns,
			chargeOnProductColumnsWithDefault,
			chargeOnProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chargeOnProductAllColumns,
			chargeOnProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert charge_on_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chargeOnProductPrimaryKeyColumns))
			copy(conflict, chargeOnProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"charge_on_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chargeOnProductType, chargeOnProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chargeOnProductType, chargeOnProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert charge_on_products")
	}

	if !cached {
		chargeOnProductUpsertCacheMut.Lock()
		chargeOnProductUpsertCache[key] = cache
		chargeOnProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ChargeOnProduct record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ChargeOnProduct) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ChargeOnProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChargeOnProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ChargeOnProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chargeOnProductPrimaryKeyMapping)
	sql := "DELETE FROM \"charge_on_products\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from charge_on_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for charge_on_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chargeOnProductQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q chargeOnProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no chargeOnProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from charge_on_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_products")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChargeOnProductSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChargeOnProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chargeOnProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"charge_on_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargeOnProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from chargeOnProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_products")
	}

	if len(chargeOnProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ChargeOnProduct) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ChargeOnProduct provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChargeOnProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChargeOnProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnProductSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ChargeOnProductSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChargeOnProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"charge_on_products\".* FROM \"charge_on_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargeOnProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ChargeOnProductSlice")
	}

	*o = slice

	return nil
}

// ChargeOnProductExistsG checks if the ChargeOnProduct row exists.
func ChargeOnProductExistsG(ctx context.Context, iD int64) (bool, error) {
	return ChargeOnProductExists(ctx, boil.GetContextDB(), iD)
}

// ChargeOnProductExists checks if the ChargeOnProduct row exists.
func ChargeOnProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"charge_on_products\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if charge_on_products exists")
	}

	return exists, nil
}

// Exists checks if the ChargeOnProduct row exists.
func (o *ChargeOnProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChargeOnProductExists(ctx, exec, o.ID)
}
