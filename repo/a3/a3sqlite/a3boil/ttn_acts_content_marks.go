// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNActsContentMark is an object representing the database table.
type TTNActsContentMark struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTNActsContent null.Int64  `boil:"id_ttn_acts_content" json:"id_ttn_acts_content,omitempty" toml:"id_ttn_acts_content" yaml:"id_ttn_acts_content,omitempty"`
	Mark             null.String `boil:"mark" json:"mark,omitempty" toml:"mark" yaml:"mark,omitempty"`

	R *ttnActsContentMarkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnActsContentMarkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNActsContentMarkColumns = struct {
	ID               string
	IDTTNActsContent string
	Mark             string
}{
	ID:               "id",
	IDTTNActsContent: "id_ttn_acts_content",
	Mark:             "mark",
}

var TTNActsContentMarkTableColumns = struct {
	ID               string
	IDTTNActsContent string
	Mark             string
}{
	ID:               "ttn_acts_content_marks.id",
	IDTTNActsContent: "ttn_acts_content_marks.id_ttn_acts_content",
	Mark:             "ttn_acts_content_marks.mark",
}

// Generated where

var TTNActsContentMarkWhere = struct {
	ID               whereHelperint64
	IDTTNActsContent whereHelpernull_Int64
	Mark             whereHelpernull_String
}{
	ID:               whereHelperint64{field: "\"ttn_acts_content_marks\".\"id\""},
	IDTTNActsContent: whereHelpernull_Int64{field: "\"ttn_acts_content_marks\".\"id_ttn_acts_content\""},
	Mark:             whereHelpernull_String{field: "\"ttn_acts_content_marks\".\"mark\""},
}

// TTNActsContentMarkRels is where relationship names are stored.
var TTNActsContentMarkRels = struct {
}{}

// ttnActsContentMarkR is where relationships are stored.
type ttnActsContentMarkR struct {
}

// NewStruct creates a new relationship struct
func (*ttnActsContentMarkR) NewStruct() *ttnActsContentMarkR {
	return &ttnActsContentMarkR{}
}

// ttnActsContentMarkL is where Load methods for each relationship are stored.
type ttnActsContentMarkL struct{}

var (
	ttnActsContentMarkAllColumns            = []string{"id", "id_ttn_acts_content", "mark"}
	ttnActsContentMarkColumnsWithoutDefault = []string{}
	ttnActsContentMarkColumnsWithDefault    = []string{"id", "id_ttn_acts_content", "mark"}
	ttnActsContentMarkPrimaryKeyColumns     = []string{"id"}
	ttnActsContentMarkGeneratedColumns      = []string{"id"}
)

type (
	// TTNActsContentMarkSlice is an alias for a slice of pointers to TTNActsContentMark.
	// This should almost always be used instead of []TTNActsContentMark.
	TTNActsContentMarkSlice []*TTNActsContentMark
	// TTNActsContentMarkHook is the signature for custom TTNActsContentMark hook methods
	TTNActsContentMarkHook func(context.Context, boil.ContextExecutor, *TTNActsContentMark) error

	ttnActsContentMarkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnActsContentMarkType                 = reflect.TypeOf(&TTNActsContentMark{})
	ttnActsContentMarkMapping              = queries.MakeStructMapping(ttnActsContentMarkType)
	ttnActsContentMarkPrimaryKeyMapping, _ = queries.BindMapping(ttnActsContentMarkType, ttnActsContentMarkMapping, ttnActsContentMarkPrimaryKeyColumns)
	ttnActsContentMarkInsertCacheMut       sync.RWMutex
	ttnActsContentMarkInsertCache          = make(map[string]insertCache)
	ttnActsContentMarkUpdateCacheMut       sync.RWMutex
	ttnActsContentMarkUpdateCache          = make(map[string]updateCache)
	ttnActsContentMarkUpsertCacheMut       sync.RWMutex
	ttnActsContentMarkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnActsContentMarkAfterSelectMu sync.Mutex
var ttnActsContentMarkAfterSelectHooks []TTNActsContentMarkHook

var ttnActsContentMarkBeforeInsertMu sync.Mutex
var ttnActsContentMarkBeforeInsertHooks []TTNActsContentMarkHook
var ttnActsContentMarkAfterInsertMu sync.Mutex
var ttnActsContentMarkAfterInsertHooks []TTNActsContentMarkHook

var ttnActsContentMarkBeforeUpdateMu sync.Mutex
var ttnActsContentMarkBeforeUpdateHooks []TTNActsContentMarkHook
var ttnActsContentMarkAfterUpdateMu sync.Mutex
var ttnActsContentMarkAfterUpdateHooks []TTNActsContentMarkHook

var ttnActsContentMarkBeforeDeleteMu sync.Mutex
var ttnActsContentMarkBeforeDeleteHooks []TTNActsContentMarkHook
var ttnActsContentMarkAfterDeleteMu sync.Mutex
var ttnActsContentMarkAfterDeleteHooks []TTNActsContentMarkHook

var ttnActsContentMarkBeforeUpsertMu sync.Mutex
var ttnActsContentMarkBeforeUpsertHooks []TTNActsContentMarkHook
var ttnActsContentMarkAfterUpsertMu sync.Mutex
var ttnActsContentMarkAfterUpsertHooks []TTNActsContentMarkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNActsContentMark) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNActsContentMark) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNActsContentMark) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNActsContentMark) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNActsContentMark) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNActsContentMark) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNActsContentMark) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNActsContentMark) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNActsContentMark) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsContentMarkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNActsContentMarkHook registers your hook function for all future operations.
func AddTTNActsContentMarkHook(hookPoint boil.HookPoint, ttnActsContentMarkHook TTNActsContentMarkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnActsContentMarkAfterSelectMu.Lock()
		ttnActsContentMarkAfterSelectHooks = append(ttnActsContentMarkAfterSelectHooks, ttnActsContentMarkHook)
		ttnActsContentMarkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnActsContentMarkBeforeInsertMu.Lock()
		ttnActsContentMarkBeforeInsertHooks = append(ttnActsContentMarkBeforeInsertHooks, ttnActsContentMarkHook)
		ttnActsContentMarkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnActsContentMarkAfterInsertMu.Lock()
		ttnActsContentMarkAfterInsertHooks = append(ttnActsContentMarkAfterInsertHooks, ttnActsContentMarkHook)
		ttnActsContentMarkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnActsContentMarkBeforeUpdateMu.Lock()
		ttnActsContentMarkBeforeUpdateHooks = append(ttnActsContentMarkBeforeUpdateHooks, ttnActsContentMarkHook)
		ttnActsContentMarkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnActsContentMarkAfterUpdateMu.Lock()
		ttnActsContentMarkAfterUpdateHooks = append(ttnActsContentMarkAfterUpdateHooks, ttnActsContentMarkHook)
		ttnActsContentMarkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnActsContentMarkBeforeDeleteMu.Lock()
		ttnActsContentMarkBeforeDeleteHooks = append(ttnActsContentMarkBeforeDeleteHooks, ttnActsContentMarkHook)
		ttnActsContentMarkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnActsContentMarkAfterDeleteMu.Lock()
		ttnActsContentMarkAfterDeleteHooks = append(ttnActsContentMarkAfterDeleteHooks, ttnActsContentMarkHook)
		ttnActsContentMarkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnActsContentMarkBeforeUpsertMu.Lock()
		ttnActsContentMarkBeforeUpsertHooks = append(ttnActsContentMarkBeforeUpsertHooks, ttnActsContentMarkHook)
		ttnActsContentMarkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnActsContentMarkAfterUpsertMu.Lock()
		ttnActsContentMarkAfterUpsertHooks = append(ttnActsContentMarkAfterUpsertHooks, ttnActsContentMarkHook)
		ttnActsContentMarkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnActsContentMark record from the query using the global executor.
func (q ttnActsContentMarkQuery) OneG(ctx context.Context) (*TTNActsContentMark, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnActsContentMark record from the query.
func (q ttnActsContentMarkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNActsContentMark, error) {
	o := &TTNActsContentMark{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_acts_content_marks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNActsContentMark records from the query using the global executor.
func (q ttnActsContentMarkQuery) AllG(ctx context.Context) (TTNActsContentMarkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNActsContentMark records from the query.
func (q ttnActsContentMarkQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNActsContentMarkSlice, error) {
	var o []*TTNActsContentMark

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNActsContentMark slice")
	}

	if len(ttnActsContentMarkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNActsContentMark records in the query using the global executor
func (q ttnActsContentMarkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNActsContentMark records in the query.
func (q ttnActsContentMarkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_acts_content_marks rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnActsContentMarkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnActsContentMarkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_acts_content_marks exists")
	}

	return count > 0, nil
}

// TTNActsContentMarks retrieves all the records using an executor.
func TTNActsContentMarks(mods ...qm.QueryMod) ttnActsContentMarkQuery {
	mods = append(mods, qm.From("\"ttn_acts_content_marks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ttn_acts_content_marks\".*"})
	}

	return ttnActsContentMarkQuery{q}
}

// FindTTNActsContentMarkG retrieves a single record by ID.
func FindTTNActsContentMarkG(ctx context.Context, iD int64, selectCols ...string) (*TTNActsContentMark, error) {
	return FindTTNActsContentMark(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNActsContentMark retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNActsContentMark(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TTNActsContentMark, error) {
	ttnActsContentMarkObj := &TTNActsContentMark{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ttn_acts_content_marks\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnActsContentMarkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_acts_content_marks")
	}

	if err = ttnActsContentMarkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnActsContentMarkObj, err
	}

	return ttnActsContentMarkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNActsContentMark) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNActsContentMark) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts_content_marks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActsContentMarkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnActsContentMarkInsertCacheMut.RLock()
	cache, cached := ttnActsContentMarkInsertCache[key]
	ttnActsContentMarkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnActsContentMarkAllColumns,
			ttnActsContentMarkColumnsWithDefault,
			ttnActsContentMarkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnActsContentMarkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnActsContentMarkType, ttnActsContentMarkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnActsContentMarkType, ttnActsContentMarkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ttn_acts_content_marks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ttn_acts_content_marks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_acts_content_marks")
	}

	if !cached {
		ttnActsContentMarkInsertCacheMut.Lock()
		ttnActsContentMarkInsertCache[key] = cache
		ttnActsContentMarkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNActsContentMark record using the global executor.
// See Update for more documentation.
func (o *TTNActsContentMark) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNActsContentMark.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNActsContentMark) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnActsContentMarkUpdateCacheMut.RLock()
	cache, cached := ttnActsContentMarkUpdateCache[key]
	ttnActsContentMarkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnActsContentMarkAllColumns,
			ttnActsContentMarkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnActsContentMarkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_acts_content_marks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ttn_acts_content_marks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ttnActsContentMarkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnActsContentMarkType, ttnActsContentMarkMapping, append(wl, ttnActsContentMarkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_acts_content_marks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_acts_content_marks")
	}

	if !cached {
		ttnActsContentMarkUpdateCacheMut.Lock()
		ttnActsContentMarkUpdateCache[key] = cache
		ttnActsContentMarkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnActsContentMarkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnActsContentMarkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_acts_content_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_acts_content_marks")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNActsContentMarkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNActsContentMarkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsContentMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ttn_acts_content_marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnActsContentMarkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnActsContentMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnActsContentMark")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNActsContentMark) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TTNActsContentMark) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts_content_marks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActsContentMarkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnActsContentMarkUpsertCacheMut.RLock()
	cache, cached := ttnActsContentMarkUpsertCache[key]
	ttnActsContentMarkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ttnActsContentMarkAllColumns,
			ttnActsContentMarkColumnsWithDefault,
			ttnActsContentMarkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ttnActsContentMarkAllColumns,
			ttnActsContentMarkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts_content_marks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ttnActsContentMarkPrimaryKeyColumns))
			copy(conflict, ttnActsContentMarkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ttn_acts_content_marks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ttnActsContentMarkType, ttnActsContentMarkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnActsContentMarkType, ttnActsContentMarkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_acts_content_marks")
	}

	if !cached {
		ttnActsContentMarkUpsertCacheMut.Lock()
		ttnActsContentMarkUpsertCache[key] = cache
		ttnActsContentMarkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNActsContentMark record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNActsContentMark) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNActsContentMark record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNActsContentMark) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNActsContentMark provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnActsContentMarkPrimaryKeyMapping)
	sql := "DELETE FROM \"ttn_acts_content_marks\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_acts_content_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_acts_content_marks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnActsContentMarkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnActsContentMarkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnActsContentMarkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_acts_content_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts_content_marks")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNActsContentMarkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNActsContentMarkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnActsContentMarkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsContentMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ttn_acts_content_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnActsContentMarkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnActsContentMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts_content_marks")
	}

	if len(ttnActsContentMarkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNActsContentMark) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNActsContentMark provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNActsContentMark) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNActsContentMark(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActsContentMarkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNActsContentMarkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActsContentMarkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNActsContentMarkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsContentMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ttn_acts_content_marks\".* FROM \"ttn_acts_content_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnActsContentMarkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNActsContentMarkSlice")
	}

	*o = slice

	return nil
}

// TTNActsContentMarkExistsG checks if the TTNActsContentMark row exists.
func TTNActsContentMarkExistsG(ctx context.Context, iD int64) (bool, error) {
	return TTNActsContentMarkExists(ctx, boil.GetContextDB(), iD)
}

// TTNActsContentMarkExists checks if the TTNActsContentMark row exists.
func TTNActsContentMarkExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ttn_acts_content_marks\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_acts_content_marks exists")
	}

	return exists, nil
}

// Exists checks if the TTNActsContentMark row exists.
func (o *TTNActsContentMark) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNActsContentMarkExists(ctx, exec, o.ID)
}
