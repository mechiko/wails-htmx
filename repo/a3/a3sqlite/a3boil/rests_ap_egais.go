// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RestsApEgais is an object representing the database table.
type RestsApEgais struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDRequests           null.Int64  `boil:"id_requests" json:"id_requests,omitempty" toml:"id_requests" yaml:"id_requests,omitempty"`
	ProductFullName      null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity      null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume     null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode       null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode          null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType      null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProductQuantity      null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	ProductInformF1RegID null.String `boil:"product_inform_f1_reg_id" json:"product_inform_f1_reg_id,omitempty" toml:"product_inform_f1_reg_id" yaml:"product_inform_f1_reg_id,omitempty"`
	ProductInformF2RegID null.String `boil:"product_inform_f2_reg_id" json:"product_inform_f2_reg_id,omitempty" toml:"product_inform_f2_reg_id" yaml:"product_inform_f2_reg_id,omitempty"`
	ProducerType         null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID  null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn          null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP          null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName     null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName    null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode  null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode   null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription  null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`
	RestsApDate          null.String `boil:"rests_ap_date" json:"rests_ap_date,omitempty" toml:"rests_ap_date" yaml:"rests_ap_date,omitempty"`

	R *restsApEgaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restsApEgaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestsApEgaisColumns = struct {
	ID                   string
	IDRequests           string
	ProductFullName      string
	ProductCapacity      string
	ProductAlcVolume     string
	ProductAlcCode       string
	ProductCode          string
	ProductUnitType      string
	ProductQuantity      string
	ProductInformF1RegID string
	ProductInformF2RegID string
	ProducerType         string
	ProducerClientRegID  string
	ProducerInn          string
	ProducerKPP          string
	ProducerFullName     string
	ProducerShortName    string
	ProducerCountryCode  string
	ProducerRegionCode   string
	ProducerDescription  string
	RestsApDate          string
}{
	ID:                   "id",
	IDRequests:           "id_requests",
	ProductFullName:      "product_full_name",
	ProductCapacity:      "product_capacity",
	ProductAlcVolume:     "product_alc_volume",
	ProductAlcCode:       "product_alc_code",
	ProductCode:          "product_code",
	ProductUnitType:      "product_unit_type",
	ProductQuantity:      "product_quantity",
	ProductInformF1RegID: "product_inform_f1_reg_id",
	ProductInformF2RegID: "product_inform_f2_reg_id",
	ProducerType:         "producer_type",
	ProducerClientRegID:  "producer_client_reg_id",
	ProducerInn:          "producer_inn",
	ProducerKPP:          "producer_kpp",
	ProducerFullName:     "producer_full_name",
	ProducerShortName:    "producer_short_name",
	ProducerCountryCode:  "producer_country_code",
	ProducerRegionCode:   "producer_region_code",
	ProducerDescription:  "producer_description",
	RestsApDate:          "rests_ap_date",
}

var RestsApEgaisTableColumns = struct {
	ID                   string
	IDRequests           string
	ProductFullName      string
	ProductCapacity      string
	ProductAlcVolume     string
	ProductAlcCode       string
	ProductCode          string
	ProductUnitType      string
	ProductQuantity      string
	ProductInformF1RegID string
	ProductInformF2RegID string
	ProducerType         string
	ProducerClientRegID  string
	ProducerInn          string
	ProducerKPP          string
	ProducerFullName     string
	ProducerShortName    string
	ProducerCountryCode  string
	ProducerRegionCode   string
	ProducerDescription  string
	RestsApDate          string
}{
	ID:                   "rests_ap_egais.id",
	IDRequests:           "rests_ap_egais.id_requests",
	ProductFullName:      "rests_ap_egais.product_full_name",
	ProductCapacity:      "rests_ap_egais.product_capacity",
	ProductAlcVolume:     "rests_ap_egais.product_alc_volume",
	ProductAlcCode:       "rests_ap_egais.product_alc_code",
	ProductCode:          "rests_ap_egais.product_code",
	ProductUnitType:      "rests_ap_egais.product_unit_type",
	ProductQuantity:      "rests_ap_egais.product_quantity",
	ProductInformF1RegID: "rests_ap_egais.product_inform_f1_reg_id",
	ProductInformF2RegID: "rests_ap_egais.product_inform_f2_reg_id",
	ProducerType:         "rests_ap_egais.producer_type",
	ProducerClientRegID:  "rests_ap_egais.producer_client_reg_id",
	ProducerInn:          "rests_ap_egais.producer_inn",
	ProducerKPP:          "rests_ap_egais.producer_kpp",
	ProducerFullName:     "rests_ap_egais.producer_full_name",
	ProducerShortName:    "rests_ap_egais.producer_short_name",
	ProducerCountryCode:  "rests_ap_egais.producer_country_code",
	ProducerRegionCode:   "rests_ap_egais.producer_region_code",
	ProducerDescription:  "rests_ap_egais.producer_description",
	RestsApDate:          "rests_ap_egais.rests_ap_date",
}

// Generated where

var RestsApEgaisWhere = struct {
	ID                   whereHelperint64
	IDRequests           whereHelpernull_Int64
	ProductFullName      whereHelpernull_String
	ProductCapacity      whereHelpernull_String
	ProductAlcVolume     whereHelpernull_String
	ProductAlcCode       whereHelpernull_String
	ProductCode          whereHelpernull_String
	ProductUnitType      whereHelpernull_String
	ProductQuantity      whereHelpernull_String
	ProductInformF1RegID whereHelpernull_String
	ProductInformF2RegID whereHelpernull_String
	ProducerType         whereHelpernull_String
	ProducerClientRegID  whereHelpernull_String
	ProducerInn          whereHelpernull_String
	ProducerKPP          whereHelpernull_String
	ProducerFullName     whereHelpernull_String
	ProducerShortName    whereHelpernull_String
	ProducerCountryCode  whereHelpernull_String
	ProducerRegionCode   whereHelpernull_String
	ProducerDescription  whereHelpernull_String
	RestsApDate          whereHelpernull_String
}{
	ID:                   whereHelperint64{field: "\"rests_ap_egais\".\"id\""},
	IDRequests:           whereHelpernull_Int64{field: "\"rests_ap_egais\".\"id_requests\""},
	ProductFullName:      whereHelpernull_String{field: "\"rests_ap_egais\".\"product_full_name\""},
	ProductCapacity:      whereHelpernull_String{field: "\"rests_ap_egais\".\"product_capacity\""},
	ProductAlcVolume:     whereHelpernull_String{field: "\"rests_ap_egais\".\"product_alc_volume\""},
	ProductAlcCode:       whereHelpernull_String{field: "\"rests_ap_egais\".\"product_alc_code\""},
	ProductCode:          whereHelpernull_String{field: "\"rests_ap_egais\".\"product_code\""},
	ProductUnitType:      whereHelpernull_String{field: "\"rests_ap_egais\".\"product_unit_type\""},
	ProductQuantity:      whereHelpernull_String{field: "\"rests_ap_egais\".\"product_quantity\""},
	ProductInformF1RegID: whereHelpernull_String{field: "\"rests_ap_egais\".\"product_inform_f1_reg_id\""},
	ProductInformF2RegID: whereHelpernull_String{field: "\"rests_ap_egais\".\"product_inform_f2_reg_id\""},
	ProducerType:         whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_type\""},
	ProducerClientRegID:  whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_client_reg_id\""},
	ProducerInn:          whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_inn\""},
	ProducerKPP:          whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_kpp\""},
	ProducerFullName:     whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_full_name\""},
	ProducerShortName:    whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_short_name\""},
	ProducerCountryCode:  whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_country_code\""},
	ProducerRegionCode:   whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_region_code\""},
	ProducerDescription:  whereHelpernull_String{field: "\"rests_ap_egais\".\"producer_description\""},
	RestsApDate:          whereHelpernull_String{field: "\"rests_ap_egais\".\"rests_ap_date\""},
}

// RestsApEgaisRels is where relationship names are stored.
var RestsApEgaisRels = struct {
}{}

// restsApEgaisR is where relationships are stored.
type restsApEgaisR struct {
}

// NewStruct creates a new relationship struct
func (*restsApEgaisR) NewStruct() *restsApEgaisR {
	return &restsApEgaisR{}
}

// restsApEgaisL is where Load methods for each relationship are stored.
type restsApEgaisL struct{}

var (
	restsApEgaisAllColumns            = []string{"id", "id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "product_quantity", "product_inform_f1_reg_id", "product_inform_f2_reg_id", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description", "rests_ap_date"}
	restsApEgaisColumnsWithoutDefault = []string{}
	restsApEgaisColumnsWithDefault    = []string{"id", "id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "product_quantity", "product_inform_f1_reg_id", "product_inform_f2_reg_id", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description", "rests_ap_date"}
	restsApEgaisPrimaryKeyColumns     = []string{"id"}
	restsApEgaisGeneratedColumns      = []string{"id"}
)

type (
	// RestsApEgaisSlice is an alias for a slice of pointers to RestsApEgais.
	// This should almost always be used instead of []RestsApEgais.
	RestsApEgaisSlice []*RestsApEgais
	// RestsApEgaisHook is the signature for custom RestsApEgais hook methods
	RestsApEgaisHook func(context.Context, boil.ContextExecutor, *RestsApEgais) error

	restsApEgaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restsApEgaisType                 = reflect.TypeOf(&RestsApEgais{})
	restsApEgaisMapping              = queries.MakeStructMapping(restsApEgaisType)
	restsApEgaisPrimaryKeyMapping, _ = queries.BindMapping(restsApEgaisType, restsApEgaisMapping, restsApEgaisPrimaryKeyColumns)
	restsApEgaisInsertCacheMut       sync.RWMutex
	restsApEgaisInsertCache          = make(map[string]insertCache)
	restsApEgaisUpdateCacheMut       sync.RWMutex
	restsApEgaisUpdateCache          = make(map[string]updateCache)
	restsApEgaisUpsertCacheMut       sync.RWMutex
	restsApEgaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restsApEgaisAfterSelectMu sync.Mutex
var restsApEgaisAfterSelectHooks []RestsApEgaisHook

var restsApEgaisBeforeInsertMu sync.Mutex
var restsApEgaisBeforeInsertHooks []RestsApEgaisHook
var restsApEgaisAfterInsertMu sync.Mutex
var restsApEgaisAfterInsertHooks []RestsApEgaisHook

var restsApEgaisBeforeUpdateMu sync.Mutex
var restsApEgaisBeforeUpdateHooks []RestsApEgaisHook
var restsApEgaisAfterUpdateMu sync.Mutex
var restsApEgaisAfterUpdateHooks []RestsApEgaisHook

var restsApEgaisBeforeDeleteMu sync.Mutex
var restsApEgaisBeforeDeleteHooks []RestsApEgaisHook
var restsApEgaisAfterDeleteMu sync.Mutex
var restsApEgaisAfterDeleteHooks []RestsApEgaisHook

var restsApEgaisBeforeUpsertMu sync.Mutex
var restsApEgaisBeforeUpsertHooks []RestsApEgaisHook
var restsApEgaisAfterUpsertMu sync.Mutex
var restsApEgaisAfterUpsertHooks []RestsApEgaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RestsApEgais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RestsApEgais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RestsApEgais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RestsApEgais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RestsApEgais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RestsApEgais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RestsApEgais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RestsApEgais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RestsApEgais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsApEgaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestsApEgaisHook registers your hook function for all future operations.
func AddRestsApEgaisHook(hookPoint boil.HookPoint, restsApEgaisHook RestsApEgaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		restsApEgaisAfterSelectMu.Lock()
		restsApEgaisAfterSelectHooks = append(restsApEgaisAfterSelectHooks, restsApEgaisHook)
		restsApEgaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		restsApEgaisBeforeInsertMu.Lock()
		restsApEgaisBeforeInsertHooks = append(restsApEgaisBeforeInsertHooks, restsApEgaisHook)
		restsApEgaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		restsApEgaisAfterInsertMu.Lock()
		restsApEgaisAfterInsertHooks = append(restsApEgaisAfterInsertHooks, restsApEgaisHook)
		restsApEgaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		restsApEgaisBeforeUpdateMu.Lock()
		restsApEgaisBeforeUpdateHooks = append(restsApEgaisBeforeUpdateHooks, restsApEgaisHook)
		restsApEgaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		restsApEgaisAfterUpdateMu.Lock()
		restsApEgaisAfterUpdateHooks = append(restsApEgaisAfterUpdateHooks, restsApEgaisHook)
		restsApEgaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		restsApEgaisBeforeDeleteMu.Lock()
		restsApEgaisBeforeDeleteHooks = append(restsApEgaisBeforeDeleteHooks, restsApEgaisHook)
		restsApEgaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		restsApEgaisAfterDeleteMu.Lock()
		restsApEgaisAfterDeleteHooks = append(restsApEgaisAfterDeleteHooks, restsApEgaisHook)
		restsApEgaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		restsApEgaisBeforeUpsertMu.Lock()
		restsApEgaisBeforeUpsertHooks = append(restsApEgaisBeforeUpsertHooks, restsApEgaisHook)
		restsApEgaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		restsApEgaisAfterUpsertMu.Lock()
		restsApEgaisAfterUpsertHooks = append(restsApEgaisAfterUpsertHooks, restsApEgaisHook)
		restsApEgaisAfterUpsertMu.Unlock()
	}
}

// OneG returns a single restsApEgais record from the query using the global executor.
func (q restsApEgaisQuery) OneG(ctx context.Context) (*RestsApEgais, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single restsApEgais record from the query.
func (q restsApEgaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RestsApEgais, error) {
	o := &RestsApEgais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for rests_ap_egais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RestsApEgais records from the query using the global executor.
func (q restsApEgaisQuery) AllG(ctx context.Context) (RestsApEgaisSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RestsApEgais records from the query.
func (q restsApEgaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestsApEgaisSlice, error) {
	var o []*RestsApEgais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to RestsApEgais slice")
	}

	if len(restsApEgaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RestsApEgais records in the query using the global executor
func (q restsApEgaisQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RestsApEgais records in the query.
func (q restsApEgaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count rests_ap_egais rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q restsApEgaisQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q restsApEgaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if rests_ap_egais exists")
	}

	return count > 0, nil
}

// RestsApEgaiss retrieves all the records using an executor.
func RestsApEgaiss(mods ...qm.QueryMod) restsApEgaisQuery {
	mods = append(mods, qm.From("\"rests_ap_egais\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rests_ap_egais\".*"})
	}

	return restsApEgaisQuery{q}
}

// FindRestsApEgaisG retrieves a single record by ID.
func FindRestsApEgaisG(ctx context.Context, iD int64, selectCols ...string) (*RestsApEgais, error) {
	return FindRestsApEgais(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRestsApEgais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestsApEgais(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RestsApEgais, error) {
	restsApEgaisObj := &RestsApEgais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rests_ap_egais\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restsApEgaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from rests_ap_egais")
	}

	if err = restsApEgaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restsApEgaisObj, err
	}

	return restsApEgaisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RestsApEgais) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RestsApEgais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no rests_ap_egais provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restsApEgaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restsApEgaisInsertCacheMut.RLock()
	cache, cached := restsApEgaisInsertCache[key]
	restsApEgaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restsApEgaisAllColumns,
			restsApEgaisColumnsWithDefault,
			restsApEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, restsApEgaisGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(restsApEgaisType, restsApEgaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restsApEgaisType, restsApEgaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rests_ap_egais\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rests_ap_egais\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into rests_ap_egais")
	}

	if !cached {
		restsApEgaisInsertCacheMut.Lock()
		restsApEgaisInsertCache[key] = cache
		restsApEgaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RestsApEgais record using the global executor.
// See Update for more documentation.
func (o *RestsApEgais) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RestsApEgais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RestsApEgais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restsApEgaisUpdateCacheMut.RLock()
	cache, cached := restsApEgaisUpdateCache[key]
	restsApEgaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restsApEgaisAllColumns,
			restsApEgaisPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, restsApEgaisGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update rests_ap_egais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rests_ap_egais\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, restsApEgaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restsApEgaisType, restsApEgaisMapping, append(wl, restsApEgaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update rests_ap_egais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for rests_ap_egais")
	}

	if !cached {
		restsApEgaisUpdateCacheMut.Lock()
		restsApEgaisUpdateCache[key] = cache
		restsApEgaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q restsApEgaisQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q restsApEgaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for rests_ap_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for rests_ap_egais")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RestsApEgaisSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestsApEgaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsApEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rests_ap_egais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restsApEgaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in restsApEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all restsApEgais")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RestsApEgais) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RestsApEgais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no rests_ap_egais provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restsApEgaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restsApEgaisUpsertCacheMut.RLock()
	cache, cached := restsApEgaisUpsertCache[key]
	restsApEgaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restsApEgaisAllColumns,
			restsApEgaisColumnsWithDefault,
			restsApEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restsApEgaisAllColumns,
			restsApEgaisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert rests_ap_egais, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restsApEgaisPrimaryKeyColumns))
			copy(conflict, restsApEgaisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"rests_ap_egais\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restsApEgaisType, restsApEgaisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restsApEgaisType, restsApEgaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert rests_ap_egais")
	}

	if !cached {
		restsApEgaisUpsertCacheMut.Lock()
		restsApEgaisUpsertCache[key] = cache
		restsApEgaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RestsApEgais record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RestsApEgais) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RestsApEgais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RestsApEgais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no RestsApEgais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restsApEgaisPrimaryKeyMapping)
	sql := "DELETE FROM \"rests_ap_egais\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from rests_ap_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for rests_ap_egais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q restsApEgaisQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q restsApEgaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no restsApEgaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from rests_ap_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for rests_ap_egais")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RestsApEgaisSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestsApEgaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restsApEgaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsApEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rests_ap_egais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restsApEgaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from restsApEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for rests_ap_egais")
	}

	if len(restsApEgaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RestsApEgais) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no RestsApEgais provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RestsApEgais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestsApEgais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestsApEgaisSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty RestsApEgaisSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestsApEgaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestsApEgaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsApEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rests_ap_egais\".* FROM \"rests_ap_egais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restsApEgaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in RestsApEgaisSlice")
	}

	*o = slice

	return nil
}

// RestsApEgaisExistsG checks if the RestsApEgais row exists.
func RestsApEgaisExistsG(ctx context.Context, iD int64) (bool, error) {
	return RestsApEgaisExists(ctx, boil.GetContextDB(), iD)
}

// RestsApEgaisExists checks if the RestsApEgais row exists.
func RestsApEgaisExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rests_ap_egais\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if rests_ap_egais exists")
	}

	return exists, nil
}

// Exists checks if the RestsApEgais row exists.
func (o *RestsApEgais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RestsApEgaisExists(ctx, exec, o.ID)
}
