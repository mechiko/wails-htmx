// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImportReport is an object representing the database table.
type ImportReport struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate          null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	DocIdentity         null.String `boil:"doc_identity" json:"doc_identity,omitempty" toml:"doc_identity" yaml:"doc_identity,omitempty"`
	DocNumber           null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	DocDate             null.String `boil:"doc_date" json:"doc_date,omitempty" toml:"doc_date" yaml:"doc_date,omitempty"`
	DocImportedDate     null.String `boil:"doc_imported_date" json:"doc_imported_date,omitempty" toml:"doc_imported_date" yaml:"doc_imported_date,omitempty"`
	ContractNumber      null.String `boil:"contract_number" json:"contract_number,omitempty" toml:"contract_number" yaml:"contract_number,omitempty"`
	ContractDate        null.String `boil:"contract_date" json:"contract_date,omitempty" toml:"contract_date" yaml:"contract_date,omitempty"`
	GTDNumber           null.String `boil:"gtd_number" json:"gtd_number,omitempty" toml:"gtd_number" yaml:"gtd_number,omitempty"`
	GTDDate             null.String `boil:"gtd_date" json:"gtd_date,omitempty" toml:"gtd_date" yaml:"gtd_date,omitempty"`
	DocComment          null.String `boil:"doc_comment" json:"doc_comment,omitempty" toml:"doc_comment" yaml:"doc_comment,omitempty"`
	ImporterType        null.String `boil:"importer_type" json:"importer_type,omitempty" toml:"importer_type" yaml:"importer_type,omitempty"`
	ImporterClientRegID null.String `boil:"importer_client_reg_id" json:"importer_client_reg_id,omitempty" toml:"importer_client_reg_id" yaml:"importer_client_reg_id,omitempty"`
	ImporterInn         null.String `boil:"importer_inn" json:"importer_inn,omitempty" toml:"importer_inn" yaml:"importer_inn,omitempty"`
	ImporterKPP         null.String `boil:"importer_kpp" json:"importer_kpp,omitempty" toml:"importer_kpp" yaml:"importer_kpp,omitempty"`
	ImporterFullName    null.String `boil:"importer_full_name" json:"importer_full_name,omitempty" toml:"importer_full_name" yaml:"importer_full_name,omitempty"`
	ImporterShortName   null.String `boil:"importer_short_name" json:"importer_short_name,omitempty" toml:"importer_short_name" yaml:"importer_short_name,omitempty"`
	ImporterCountryCode null.String `boil:"importer_country_code" json:"importer_country_code,omitempty" toml:"importer_country_code" yaml:"importer_country_code,omitempty"`
	ImporterRegionCode  null.String `boil:"importer_region_code" json:"importer_region_code,omitempty" toml:"importer_region_code" yaml:"importer_region_code,omitempty"`
	ImporterDescription null.String `boil:"importer_description" json:"importer_description,omitempty" toml:"importer_description" yaml:"importer_description,omitempty"`
	SupplierType        null.String `boil:"supplier_type" json:"supplier_type,omitempty" toml:"supplier_type" yaml:"supplier_type,omitempty"`
	SupplierClientRegID null.String `boil:"supplier_client_reg_id" json:"supplier_client_reg_id,omitempty" toml:"supplier_client_reg_id" yaml:"supplier_client_reg_id,omitempty"`
	SupplierInn         null.String `boil:"supplier_inn" json:"supplier_inn,omitempty" toml:"supplier_inn" yaml:"supplier_inn,omitempty"`
	SupplierKPP         null.String `boil:"supplier_kpp" json:"supplier_kpp,omitempty" toml:"supplier_kpp" yaml:"supplier_kpp,omitempty"`
	SupplierFullName    null.String `boil:"supplier_full_name" json:"supplier_full_name,omitempty" toml:"supplier_full_name" yaml:"supplier_full_name,omitempty"`
	SupplierShortName   null.String `boil:"supplier_short_name" json:"supplier_short_name,omitempty" toml:"supplier_short_name" yaml:"supplier_short_name,omitempty"`
	SupplierCountryCode null.String `boil:"supplier_country_code" json:"supplier_country_code,omitempty" toml:"supplier_country_code" yaml:"supplier_country_code,omitempty"`
	SupplierRegionCode  null.String `boil:"supplier_region_code" json:"supplier_region_code,omitempty" toml:"supplier_region_code" yaml:"supplier_region_code,omitempty"`
	SupplierDescription null.String `boil:"supplier_description" json:"supplier_description,omitempty" toml:"supplier_description" yaml:"supplier_description,omitempty"`
	Version             null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State               null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status              null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID             null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	Archive             null.Int64  `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	XML                 null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *importReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L importReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImportReportColumns = struct {
	ID                  string
	CreateDate          string
	DocIdentity         string
	DocNumber           string
	DocDate             string
	DocImportedDate     string
	ContractNumber      string
	ContractDate        string
	GTDNumber           string
	GTDDate             string
	DocComment          string
	ImporterType        string
	ImporterClientRegID string
	ImporterInn         string
	ImporterKPP         string
	ImporterFullName    string
	ImporterShortName   string
	ImporterCountryCode string
	ImporterRegionCode  string
	ImporterDescription string
	SupplierType        string
	SupplierClientRegID string
	SupplierInn         string
	SupplierKPP         string
	SupplierFullName    string
	SupplierShortName   string
	SupplierCountryCode string
	SupplierRegionCode  string
	SupplierDescription string
	Version             string
	State               string
	Status              string
	ReplyID             string
	Archive             string
	XML                 string
}{
	ID:                  "id",
	CreateDate:          "create_date",
	DocIdentity:         "doc_identity",
	DocNumber:           "doc_number",
	DocDate:             "doc_date",
	DocImportedDate:     "doc_imported_date",
	ContractNumber:      "contract_number",
	ContractDate:        "contract_date",
	GTDNumber:           "gtd_number",
	GTDDate:             "gtd_date",
	DocComment:          "doc_comment",
	ImporterType:        "importer_type",
	ImporterClientRegID: "importer_client_reg_id",
	ImporterInn:         "importer_inn",
	ImporterKPP:         "importer_kpp",
	ImporterFullName:    "importer_full_name",
	ImporterShortName:   "importer_short_name",
	ImporterCountryCode: "importer_country_code",
	ImporterRegionCode:  "importer_region_code",
	ImporterDescription: "importer_description",
	SupplierType:        "supplier_type",
	SupplierClientRegID: "supplier_client_reg_id",
	SupplierInn:         "supplier_inn",
	SupplierKPP:         "supplier_kpp",
	SupplierFullName:    "supplier_full_name",
	SupplierShortName:   "supplier_short_name",
	SupplierCountryCode: "supplier_country_code",
	SupplierRegionCode:  "supplier_region_code",
	SupplierDescription: "supplier_description",
	Version:             "version",
	State:               "state",
	Status:              "status",
	ReplyID:             "reply_id",
	Archive:             "archive",
	XML:                 "xml",
}

var ImportReportTableColumns = struct {
	ID                  string
	CreateDate          string
	DocIdentity         string
	DocNumber           string
	DocDate             string
	DocImportedDate     string
	ContractNumber      string
	ContractDate        string
	GTDNumber           string
	GTDDate             string
	DocComment          string
	ImporterType        string
	ImporterClientRegID string
	ImporterInn         string
	ImporterKPP         string
	ImporterFullName    string
	ImporterShortName   string
	ImporterCountryCode string
	ImporterRegionCode  string
	ImporterDescription string
	SupplierType        string
	SupplierClientRegID string
	SupplierInn         string
	SupplierKPP         string
	SupplierFullName    string
	SupplierShortName   string
	SupplierCountryCode string
	SupplierRegionCode  string
	SupplierDescription string
	Version             string
	State               string
	Status              string
	ReplyID             string
	Archive             string
	XML                 string
}{
	ID:                  "import_reports.id",
	CreateDate:          "import_reports.create_date",
	DocIdentity:         "import_reports.doc_identity",
	DocNumber:           "import_reports.doc_number",
	DocDate:             "import_reports.doc_date",
	DocImportedDate:     "import_reports.doc_imported_date",
	ContractNumber:      "import_reports.contract_number",
	ContractDate:        "import_reports.contract_date",
	GTDNumber:           "import_reports.gtd_number",
	GTDDate:             "import_reports.gtd_date",
	DocComment:          "import_reports.doc_comment",
	ImporterType:        "import_reports.importer_type",
	ImporterClientRegID: "import_reports.importer_client_reg_id",
	ImporterInn:         "import_reports.importer_inn",
	ImporterKPP:         "import_reports.importer_kpp",
	ImporterFullName:    "import_reports.importer_full_name",
	ImporterShortName:   "import_reports.importer_short_name",
	ImporterCountryCode: "import_reports.importer_country_code",
	ImporterRegionCode:  "import_reports.importer_region_code",
	ImporterDescription: "import_reports.importer_description",
	SupplierType:        "import_reports.supplier_type",
	SupplierClientRegID: "import_reports.supplier_client_reg_id",
	SupplierInn:         "import_reports.supplier_inn",
	SupplierKPP:         "import_reports.supplier_kpp",
	SupplierFullName:    "import_reports.supplier_full_name",
	SupplierShortName:   "import_reports.supplier_short_name",
	SupplierCountryCode: "import_reports.supplier_country_code",
	SupplierRegionCode:  "import_reports.supplier_region_code",
	SupplierDescription: "import_reports.supplier_description",
	Version:             "import_reports.version",
	State:               "import_reports.state",
	Status:              "import_reports.status",
	ReplyID:             "import_reports.reply_id",
	Archive:             "import_reports.archive",
	XML:                 "import_reports.xml",
}

// Generated where

var ImportReportWhere = struct {
	ID                  whereHelperint64
	CreateDate          whereHelpernull_String
	DocIdentity         whereHelpernull_String
	DocNumber           whereHelpernull_String
	DocDate             whereHelpernull_String
	DocImportedDate     whereHelpernull_String
	ContractNumber      whereHelpernull_String
	ContractDate        whereHelpernull_String
	GTDNumber           whereHelpernull_String
	GTDDate             whereHelpernull_String
	DocComment          whereHelpernull_String
	ImporterType        whereHelpernull_String
	ImporterClientRegID whereHelpernull_String
	ImporterInn         whereHelpernull_String
	ImporterKPP         whereHelpernull_String
	ImporterFullName    whereHelpernull_String
	ImporterShortName   whereHelpernull_String
	ImporterCountryCode whereHelpernull_String
	ImporterRegionCode  whereHelpernull_String
	ImporterDescription whereHelpernull_String
	SupplierType        whereHelpernull_String
	SupplierClientRegID whereHelpernull_String
	SupplierInn         whereHelpernull_String
	SupplierKPP         whereHelpernull_String
	SupplierFullName    whereHelpernull_String
	SupplierShortName   whereHelpernull_String
	SupplierCountryCode whereHelpernull_String
	SupplierRegionCode  whereHelpernull_String
	SupplierDescription whereHelpernull_String
	Version             whereHelpernull_String
	State               whereHelpernull_String
	Status              whereHelpernull_String
	ReplyID             whereHelpernull_String
	Archive             whereHelpernull_Int64
	XML                 whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"import_reports\".\"id\""},
	CreateDate:          whereHelpernull_String{field: "\"import_reports\".\"create_date\""},
	DocIdentity:         whereHelpernull_String{field: "\"import_reports\".\"doc_identity\""},
	DocNumber:           whereHelpernull_String{field: "\"import_reports\".\"doc_number\""},
	DocDate:             whereHelpernull_String{field: "\"import_reports\".\"doc_date\""},
	DocImportedDate:     whereHelpernull_String{field: "\"import_reports\".\"doc_imported_date\""},
	ContractNumber:      whereHelpernull_String{field: "\"import_reports\".\"contract_number\""},
	ContractDate:        whereHelpernull_String{field: "\"import_reports\".\"contract_date\""},
	GTDNumber:           whereHelpernull_String{field: "\"import_reports\".\"gtd_number\""},
	GTDDate:             whereHelpernull_String{field: "\"import_reports\".\"gtd_date\""},
	DocComment:          whereHelpernull_String{field: "\"import_reports\".\"doc_comment\""},
	ImporterType:        whereHelpernull_String{field: "\"import_reports\".\"importer_type\""},
	ImporterClientRegID: whereHelpernull_String{field: "\"import_reports\".\"importer_client_reg_id\""},
	ImporterInn:         whereHelpernull_String{field: "\"import_reports\".\"importer_inn\""},
	ImporterKPP:         whereHelpernull_String{field: "\"import_reports\".\"importer_kpp\""},
	ImporterFullName:    whereHelpernull_String{field: "\"import_reports\".\"importer_full_name\""},
	ImporterShortName:   whereHelpernull_String{field: "\"import_reports\".\"importer_short_name\""},
	ImporterCountryCode: whereHelpernull_String{field: "\"import_reports\".\"importer_country_code\""},
	ImporterRegionCode:  whereHelpernull_String{field: "\"import_reports\".\"importer_region_code\""},
	ImporterDescription: whereHelpernull_String{field: "\"import_reports\".\"importer_description\""},
	SupplierType:        whereHelpernull_String{field: "\"import_reports\".\"supplier_type\""},
	SupplierClientRegID: whereHelpernull_String{field: "\"import_reports\".\"supplier_client_reg_id\""},
	SupplierInn:         whereHelpernull_String{field: "\"import_reports\".\"supplier_inn\""},
	SupplierKPP:         whereHelpernull_String{field: "\"import_reports\".\"supplier_kpp\""},
	SupplierFullName:    whereHelpernull_String{field: "\"import_reports\".\"supplier_full_name\""},
	SupplierShortName:   whereHelpernull_String{field: "\"import_reports\".\"supplier_short_name\""},
	SupplierCountryCode: whereHelpernull_String{field: "\"import_reports\".\"supplier_country_code\""},
	SupplierRegionCode:  whereHelpernull_String{field: "\"import_reports\".\"supplier_region_code\""},
	SupplierDescription: whereHelpernull_String{field: "\"import_reports\".\"supplier_description\""},
	Version:             whereHelpernull_String{field: "\"import_reports\".\"version\""},
	State:               whereHelpernull_String{field: "\"import_reports\".\"state\""},
	Status:              whereHelpernull_String{field: "\"import_reports\".\"status\""},
	ReplyID:             whereHelpernull_String{field: "\"import_reports\".\"reply_id\""},
	Archive:             whereHelpernull_Int64{field: "\"import_reports\".\"archive\""},
	XML:                 whereHelpernull_String{field: "\"import_reports\".\"xml\""},
}

// ImportReportRels is where relationship names are stored.
var ImportReportRels = struct {
}{}

// importReportR is where relationships are stored.
type importReportR struct {
}

// NewStruct creates a new relationship struct
func (*importReportR) NewStruct() *importReportR {
	return &importReportR{}
}

// importReportL is where Load methods for each relationship are stored.
type importReportL struct{}

var (
	importReportAllColumns            = []string{"id", "create_date", "doc_identity", "doc_number", "doc_date", "doc_imported_date", "contract_number", "contract_date", "gtd_number", "gtd_date", "doc_comment", "importer_type", "importer_client_reg_id", "importer_inn", "importer_kpp", "importer_full_name", "importer_short_name", "importer_country_code", "importer_region_code", "importer_description", "supplier_type", "supplier_client_reg_id", "supplier_inn", "supplier_kpp", "supplier_full_name", "supplier_short_name", "supplier_country_code", "supplier_region_code", "supplier_description", "version", "state", "status", "reply_id", "archive", "xml"}
	importReportColumnsWithoutDefault = []string{}
	importReportColumnsWithDefault    = []string{"id", "create_date", "doc_identity", "doc_number", "doc_date", "doc_imported_date", "contract_number", "contract_date", "gtd_number", "gtd_date", "doc_comment", "importer_type", "importer_client_reg_id", "importer_inn", "importer_kpp", "importer_full_name", "importer_short_name", "importer_country_code", "importer_region_code", "importer_description", "supplier_type", "supplier_client_reg_id", "supplier_inn", "supplier_kpp", "supplier_full_name", "supplier_short_name", "supplier_country_code", "supplier_region_code", "supplier_description", "version", "state", "status", "reply_id", "archive", "xml"}
	importReportPrimaryKeyColumns     = []string{"id"}
	importReportGeneratedColumns      = []string{"id"}
)

type (
	// ImportReportSlice is an alias for a slice of pointers to ImportReport.
	// This should almost always be used instead of []ImportReport.
	ImportReportSlice []*ImportReport
	// ImportReportHook is the signature for custom ImportReport hook methods
	ImportReportHook func(context.Context, boil.ContextExecutor, *ImportReport) error

	importReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	importReportType                 = reflect.TypeOf(&ImportReport{})
	importReportMapping              = queries.MakeStructMapping(importReportType)
	importReportPrimaryKeyMapping, _ = queries.BindMapping(importReportType, importReportMapping, importReportPrimaryKeyColumns)
	importReportInsertCacheMut       sync.RWMutex
	importReportInsertCache          = make(map[string]insertCache)
	importReportUpdateCacheMut       sync.RWMutex
	importReportUpdateCache          = make(map[string]updateCache)
	importReportUpsertCacheMut       sync.RWMutex
	importReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var importReportAfterSelectMu sync.Mutex
var importReportAfterSelectHooks []ImportReportHook

var importReportBeforeInsertMu sync.Mutex
var importReportBeforeInsertHooks []ImportReportHook
var importReportAfterInsertMu sync.Mutex
var importReportAfterInsertHooks []ImportReportHook

var importReportBeforeUpdateMu sync.Mutex
var importReportBeforeUpdateHooks []ImportReportHook
var importReportAfterUpdateMu sync.Mutex
var importReportAfterUpdateHooks []ImportReportHook

var importReportBeforeDeleteMu sync.Mutex
var importReportBeforeDeleteHooks []ImportReportHook
var importReportAfterDeleteMu sync.Mutex
var importReportAfterDeleteHooks []ImportReportHook

var importReportBeforeUpsertMu sync.Mutex
var importReportBeforeUpsertHooks []ImportReportHook
var importReportAfterUpsertMu sync.Mutex
var importReportAfterUpsertHooks []ImportReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImportReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImportReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImportReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImportReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImportReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImportReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImportReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImportReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImportReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImportReportHook registers your hook function for all future operations.
func AddImportReportHook(hookPoint boil.HookPoint, importReportHook ImportReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		importReportAfterSelectMu.Lock()
		importReportAfterSelectHooks = append(importReportAfterSelectHooks, importReportHook)
		importReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		importReportBeforeInsertMu.Lock()
		importReportBeforeInsertHooks = append(importReportBeforeInsertHooks, importReportHook)
		importReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		importReportAfterInsertMu.Lock()
		importReportAfterInsertHooks = append(importReportAfterInsertHooks, importReportHook)
		importReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		importReportBeforeUpdateMu.Lock()
		importReportBeforeUpdateHooks = append(importReportBeforeUpdateHooks, importReportHook)
		importReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		importReportAfterUpdateMu.Lock()
		importReportAfterUpdateHooks = append(importReportAfterUpdateHooks, importReportHook)
		importReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		importReportBeforeDeleteMu.Lock()
		importReportBeforeDeleteHooks = append(importReportBeforeDeleteHooks, importReportHook)
		importReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		importReportAfterDeleteMu.Lock()
		importReportAfterDeleteHooks = append(importReportAfterDeleteHooks, importReportHook)
		importReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		importReportBeforeUpsertMu.Lock()
		importReportBeforeUpsertHooks = append(importReportBeforeUpsertHooks, importReportHook)
		importReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		importReportAfterUpsertMu.Lock()
		importReportAfterUpsertHooks = append(importReportAfterUpsertHooks, importReportHook)
		importReportAfterUpsertMu.Unlock()
	}
}

// OneG returns a single importReport record from the query using the global executor.
func (q importReportQuery) OneG(ctx context.Context) (*ImportReport, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single importReport record from the query.
func (q importReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ImportReport, error) {
	o := &ImportReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for import_reports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ImportReport records from the query using the global executor.
func (q importReportQuery) AllG(ctx context.Context) (ImportReportSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ImportReport records from the query.
func (q importReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImportReportSlice, error) {
	var o []*ImportReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ImportReport slice")
	}

	if len(importReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ImportReport records in the query using the global executor
func (q importReportQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ImportReport records in the query.
func (q importReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count import_reports rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q importReportQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q importReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if import_reports exists")
	}

	return count > 0, nil
}

// ImportReports retrieves all the records using an executor.
func ImportReports(mods ...qm.QueryMod) importReportQuery {
	mods = append(mods, qm.From("\"import_reports\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"import_reports\".*"})
	}

	return importReportQuery{q}
}

// FindImportReportG retrieves a single record by ID.
func FindImportReportG(ctx context.Context, iD int64, selectCols ...string) (*ImportReport, error) {
	return FindImportReport(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindImportReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImportReport(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ImportReport, error) {
	importReportObj := &ImportReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"import_reports\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, importReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from import_reports")
	}

	if err = importReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return importReportObj, err
	}

	return importReportObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ImportReport) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImportReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_reports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	importReportInsertCacheMut.RLock()
	cache, cached := importReportInsertCache[key]
	importReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			importReportAllColumns,
			importReportColumnsWithDefault,
			importReportColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, importReportGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(importReportType, importReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(importReportType, importReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"import_reports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"import_reports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into import_reports")
	}

	if !cached {
		importReportInsertCacheMut.Lock()
		importReportInsertCache[key] = cache
		importReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ImportReport record using the global executor.
// See Update for more documentation.
func (o *ImportReport) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ImportReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImportReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	importReportUpdateCacheMut.RLock()
	cache, cached := importReportUpdateCache[key]
	importReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			importReportAllColumns,
			importReportPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, importReportGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update import_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"import_reports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, importReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(importReportType, importReportMapping, append(wl, importReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update import_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for import_reports")
	}

	if !cached {
		importReportUpdateCacheMut.Lock()
		importReportUpdateCache[key] = cache
		importReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q importReportQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q importReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for import_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for import_reports")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ImportReportSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImportReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"import_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in importReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all importReport")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ImportReport) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImportReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_reports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	importReportUpsertCacheMut.RLock()
	cache, cached := importReportUpsertCache[key]
	importReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			importReportAllColumns,
			importReportColumnsWithDefault,
			importReportColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			importReportAllColumns,
			importReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert import_reports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(importReportPrimaryKeyColumns))
			copy(conflict, importReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"import_reports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(importReportType, importReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(importReportType, importReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert import_reports")
	}

	if !cached {
		importReportUpsertCacheMut.Lock()
		importReportUpsertCache[key] = cache
		importReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ImportReport record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ImportReport) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ImportReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImportReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ImportReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), importReportPrimaryKeyMapping)
	sql := "DELETE FROM \"import_reports\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from import_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for import_reports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q importReportQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q importReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no importReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from import_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_reports")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ImportReportSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImportReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(importReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"import_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from importReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_reports")
	}

	if len(importReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ImportReport) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ImportReport provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImportReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImportReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportReportSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ImportReportSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImportReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"import_reports\".* FROM \"import_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ImportReportSlice")
	}

	*o = slice

	return nil
}

// ImportReportExistsG checks if the ImportReport row exists.
func ImportReportExistsG(ctx context.Context, iD int64) (bool, error) {
	return ImportReportExists(ctx, boil.GetContextDB(), iD)
}

// ImportReportExists checks if the ImportReport row exists.
func ImportReportExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"import_reports\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if import_reports exists")
	}

	return exists, nil
}

// Exists checks if the ImportReport row exists.
func (o *ImportReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImportReportExists(ctx, exec, o.ID)
}
