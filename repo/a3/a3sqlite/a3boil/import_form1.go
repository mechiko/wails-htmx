// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImportForm1 is an object representing the database table.
type ImportForm1 struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDImportReports   null.Int64  `boil:"id_import_reports" json:"id_import_reports,omitempty" toml:"id_import_reports" yaml:"id_import_reports,omitempty"`
	DocIdentity       null.String `boil:"doc_identity" json:"doc_identity,omitempty" toml:"doc_identity" yaml:"doc_identity,omitempty"`
	DocRegID          null.String `boil:"doc_reg_id" json:"doc_reg_id,omitempty" toml:"doc_reg_id" yaml:"doc_reg_id,omitempty"`
	ClientType        null.String `boil:"client_type" json:"client_type,omitempty" toml:"client_type" yaml:"client_type,omitempty"`
	ClientRegID       null.String `boil:"client_reg_id" json:"client_reg_id,omitempty" toml:"client_reg_id" yaml:"client_reg_id,omitempty"`
	ClientInn         null.String `boil:"client_inn" json:"client_inn,omitempty" toml:"client_inn" yaml:"client_inn,omitempty"`
	ClientKPP         null.String `boil:"client_kpp" json:"client_kpp,omitempty" toml:"client_kpp" yaml:"client_kpp,omitempty"`
	ClientFullName    null.String `boil:"client_full_name" json:"client_full_name,omitempty" toml:"client_full_name" yaml:"client_full_name,omitempty"`
	ClientShortName   null.String `boil:"client_short_name" json:"client_short_name,omitempty" toml:"client_short_name" yaml:"client_short_name,omitempty"`
	ClientCountryCode null.String `boil:"client_country_code" json:"client_country_code,omitempty" toml:"client_country_code" yaml:"client_country_code,omitempty"`
	ClientRegionCode  null.String `boil:"client_region_code" json:"client_region_code,omitempty" toml:"client_region_code" yaml:"client_region_code,omitempty"`
	ClientDescription null.String `boil:"client_description" json:"client_description,omitempty" toml:"client_description" yaml:"client_description,omitempty"`
	XML               null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *importForm1R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L importForm1L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImportForm1Columns = struct {
	ID                string
	IDImportReports   string
	DocIdentity       string
	DocRegID          string
	ClientType        string
	ClientRegID       string
	ClientInn         string
	ClientKPP         string
	ClientFullName    string
	ClientShortName   string
	ClientCountryCode string
	ClientRegionCode  string
	ClientDescription string
	XML               string
}{
	ID:                "id",
	IDImportReports:   "id_import_reports",
	DocIdentity:       "doc_identity",
	DocRegID:          "doc_reg_id",
	ClientType:        "client_type",
	ClientRegID:       "client_reg_id",
	ClientInn:         "client_inn",
	ClientKPP:         "client_kpp",
	ClientFullName:    "client_full_name",
	ClientShortName:   "client_short_name",
	ClientCountryCode: "client_country_code",
	ClientRegionCode:  "client_region_code",
	ClientDescription: "client_description",
	XML:               "xml",
}

var ImportForm1TableColumns = struct {
	ID                string
	IDImportReports   string
	DocIdentity       string
	DocRegID          string
	ClientType        string
	ClientRegID       string
	ClientInn         string
	ClientKPP         string
	ClientFullName    string
	ClientShortName   string
	ClientCountryCode string
	ClientRegionCode  string
	ClientDescription string
	XML               string
}{
	ID:                "import_form1.id",
	IDImportReports:   "import_form1.id_import_reports",
	DocIdentity:       "import_form1.doc_identity",
	DocRegID:          "import_form1.doc_reg_id",
	ClientType:        "import_form1.client_type",
	ClientRegID:       "import_form1.client_reg_id",
	ClientInn:         "import_form1.client_inn",
	ClientKPP:         "import_form1.client_kpp",
	ClientFullName:    "import_form1.client_full_name",
	ClientShortName:   "import_form1.client_short_name",
	ClientCountryCode: "import_form1.client_country_code",
	ClientRegionCode:  "import_form1.client_region_code",
	ClientDescription: "import_form1.client_description",
	XML:               "import_form1.xml",
}

// Generated where

var ImportForm1Where = struct {
	ID                whereHelperint64
	IDImportReports   whereHelpernull_Int64
	DocIdentity       whereHelpernull_String
	DocRegID          whereHelpernull_String
	ClientType        whereHelpernull_String
	ClientRegID       whereHelpernull_String
	ClientInn         whereHelpernull_String
	ClientKPP         whereHelpernull_String
	ClientFullName    whereHelpernull_String
	ClientShortName   whereHelpernull_String
	ClientCountryCode whereHelpernull_String
	ClientRegionCode  whereHelpernull_String
	ClientDescription whereHelpernull_String
	XML               whereHelpernull_String
}{
	ID:                whereHelperint64{field: "\"import_form1\".\"id\""},
	IDImportReports:   whereHelpernull_Int64{field: "\"import_form1\".\"id_import_reports\""},
	DocIdentity:       whereHelpernull_String{field: "\"import_form1\".\"doc_identity\""},
	DocRegID:          whereHelpernull_String{field: "\"import_form1\".\"doc_reg_id\""},
	ClientType:        whereHelpernull_String{field: "\"import_form1\".\"client_type\""},
	ClientRegID:       whereHelpernull_String{field: "\"import_form1\".\"client_reg_id\""},
	ClientInn:         whereHelpernull_String{field: "\"import_form1\".\"client_inn\""},
	ClientKPP:         whereHelpernull_String{field: "\"import_form1\".\"client_kpp\""},
	ClientFullName:    whereHelpernull_String{field: "\"import_form1\".\"client_full_name\""},
	ClientShortName:   whereHelpernull_String{field: "\"import_form1\".\"client_short_name\""},
	ClientCountryCode: whereHelpernull_String{field: "\"import_form1\".\"client_country_code\""},
	ClientRegionCode:  whereHelpernull_String{field: "\"import_form1\".\"client_region_code\""},
	ClientDescription: whereHelpernull_String{field: "\"import_form1\".\"client_description\""},
	XML:               whereHelpernull_String{field: "\"import_form1\".\"xml\""},
}

// ImportForm1Rels is where relationship names are stored.
var ImportForm1Rels = struct {
}{}

// importForm1R is where relationships are stored.
type importForm1R struct {
}

// NewStruct creates a new relationship struct
func (*importForm1R) NewStruct() *importForm1R {
	return &importForm1R{}
}

// importForm1L is where Load methods for each relationship are stored.
type importForm1L struct{}

var (
	importForm1AllColumns            = []string{"id", "id_import_reports", "doc_identity", "doc_reg_id", "client_type", "client_reg_id", "client_inn", "client_kpp", "client_full_name", "client_short_name", "client_country_code", "client_region_code", "client_description", "xml"}
	importForm1ColumnsWithoutDefault = []string{}
	importForm1ColumnsWithDefault    = []string{"id", "id_import_reports", "doc_identity", "doc_reg_id", "client_type", "client_reg_id", "client_inn", "client_kpp", "client_full_name", "client_short_name", "client_country_code", "client_region_code", "client_description", "xml"}
	importForm1PrimaryKeyColumns     = []string{"id"}
	importForm1GeneratedColumns      = []string{"id"}
)

type (
	// ImportForm1Slice is an alias for a slice of pointers to ImportForm1.
	// This should almost always be used instead of []ImportForm1.
	ImportForm1Slice []*ImportForm1
	// ImportForm1Hook is the signature for custom ImportForm1 hook methods
	ImportForm1Hook func(context.Context, boil.ContextExecutor, *ImportForm1) error

	importForm1Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	importForm1Type                 = reflect.TypeOf(&ImportForm1{})
	importForm1Mapping              = queries.MakeStructMapping(importForm1Type)
	importForm1PrimaryKeyMapping, _ = queries.BindMapping(importForm1Type, importForm1Mapping, importForm1PrimaryKeyColumns)
	importForm1InsertCacheMut       sync.RWMutex
	importForm1InsertCache          = make(map[string]insertCache)
	importForm1UpdateCacheMut       sync.RWMutex
	importForm1UpdateCache          = make(map[string]updateCache)
	importForm1UpsertCacheMut       sync.RWMutex
	importForm1UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var importForm1AfterSelectMu sync.Mutex
var importForm1AfterSelectHooks []ImportForm1Hook

var importForm1BeforeInsertMu sync.Mutex
var importForm1BeforeInsertHooks []ImportForm1Hook
var importForm1AfterInsertMu sync.Mutex
var importForm1AfterInsertHooks []ImportForm1Hook

var importForm1BeforeUpdateMu sync.Mutex
var importForm1BeforeUpdateHooks []ImportForm1Hook
var importForm1AfterUpdateMu sync.Mutex
var importForm1AfterUpdateHooks []ImportForm1Hook

var importForm1BeforeDeleteMu sync.Mutex
var importForm1BeforeDeleteHooks []ImportForm1Hook
var importForm1AfterDeleteMu sync.Mutex
var importForm1AfterDeleteHooks []ImportForm1Hook

var importForm1BeforeUpsertMu sync.Mutex
var importForm1BeforeUpsertHooks []ImportForm1Hook
var importForm1AfterUpsertMu sync.Mutex
var importForm1AfterUpsertHooks []ImportForm1Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImportForm1) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImportForm1) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImportForm1) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImportForm1) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImportForm1) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImportForm1) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImportForm1) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImportForm1) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImportForm1) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importForm1AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImportForm1Hook registers your hook function for all future operations.
func AddImportForm1Hook(hookPoint boil.HookPoint, importForm1Hook ImportForm1Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		importForm1AfterSelectMu.Lock()
		importForm1AfterSelectHooks = append(importForm1AfterSelectHooks, importForm1Hook)
		importForm1AfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		importForm1BeforeInsertMu.Lock()
		importForm1BeforeInsertHooks = append(importForm1BeforeInsertHooks, importForm1Hook)
		importForm1BeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		importForm1AfterInsertMu.Lock()
		importForm1AfterInsertHooks = append(importForm1AfterInsertHooks, importForm1Hook)
		importForm1AfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		importForm1BeforeUpdateMu.Lock()
		importForm1BeforeUpdateHooks = append(importForm1BeforeUpdateHooks, importForm1Hook)
		importForm1BeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		importForm1AfterUpdateMu.Lock()
		importForm1AfterUpdateHooks = append(importForm1AfterUpdateHooks, importForm1Hook)
		importForm1AfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		importForm1BeforeDeleteMu.Lock()
		importForm1BeforeDeleteHooks = append(importForm1BeforeDeleteHooks, importForm1Hook)
		importForm1BeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		importForm1AfterDeleteMu.Lock()
		importForm1AfterDeleteHooks = append(importForm1AfterDeleteHooks, importForm1Hook)
		importForm1AfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		importForm1BeforeUpsertMu.Lock()
		importForm1BeforeUpsertHooks = append(importForm1BeforeUpsertHooks, importForm1Hook)
		importForm1BeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		importForm1AfterUpsertMu.Lock()
		importForm1AfterUpsertHooks = append(importForm1AfterUpsertHooks, importForm1Hook)
		importForm1AfterUpsertMu.Unlock()
	}
}

// OneG returns a single importForm1 record from the query using the global executor.
func (q importForm1Query) OneG(ctx context.Context) (*ImportForm1, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single importForm1 record from the query.
func (q importForm1Query) One(ctx context.Context, exec boil.ContextExecutor) (*ImportForm1, error) {
	o := &ImportForm1{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for import_form1")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ImportForm1 records from the query using the global executor.
func (q importForm1Query) AllG(ctx context.Context) (ImportForm1Slice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ImportForm1 records from the query.
func (q importForm1Query) All(ctx context.Context, exec boil.ContextExecutor) (ImportForm1Slice, error) {
	var o []*ImportForm1

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ImportForm1 slice")
	}

	if len(importForm1AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ImportForm1 records in the query using the global executor
func (q importForm1Query) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ImportForm1 records in the query.
func (q importForm1Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count import_form1 rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q importForm1Query) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q importForm1Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if import_form1 exists")
	}

	return count > 0, nil
}

// ImportForm1s retrieves all the records using an executor.
func ImportForm1s(mods ...qm.QueryMod) importForm1Query {
	mods = append(mods, qm.From("\"import_form1\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"import_form1\".*"})
	}

	return importForm1Query{q}
}

// FindImportForm1G retrieves a single record by ID.
func FindImportForm1G(ctx context.Context, iD int64, selectCols ...string) (*ImportForm1, error) {
	return FindImportForm1(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindImportForm1 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImportForm1(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ImportForm1, error) {
	importForm1Obj := &ImportForm1{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"import_form1\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, importForm1Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from import_form1")
	}

	if err = importForm1Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return importForm1Obj, err
	}

	return importForm1Obj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ImportForm1) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImportForm1) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_form1 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importForm1ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	importForm1InsertCacheMut.RLock()
	cache, cached := importForm1InsertCache[key]
	importForm1InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			importForm1AllColumns,
			importForm1ColumnsWithDefault,
			importForm1ColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, importForm1GeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(importForm1Type, importForm1Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(importForm1Type, importForm1Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"import_form1\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"import_form1\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into import_form1")
	}

	if !cached {
		importForm1InsertCacheMut.Lock()
		importForm1InsertCache[key] = cache
		importForm1InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ImportForm1 record using the global executor.
// See Update for more documentation.
func (o *ImportForm1) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ImportForm1.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImportForm1) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	importForm1UpdateCacheMut.RLock()
	cache, cached := importForm1UpdateCache[key]
	importForm1UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			importForm1AllColumns,
			importForm1PrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, importForm1GeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update import_form1, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"import_form1\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, importForm1PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(importForm1Type, importForm1Mapping, append(wl, importForm1PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update import_form1 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for import_form1")
	}

	if !cached {
		importForm1UpdateCacheMut.Lock()
		importForm1UpdateCache[key] = cache
		importForm1UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q importForm1Query) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q importForm1Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for import_form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for import_form1")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ImportForm1Slice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImportForm1Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importForm1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"import_form1\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importForm1PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in importForm1 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all importForm1")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ImportForm1) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImportForm1) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_form1 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importForm1ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	importForm1UpsertCacheMut.RLock()
	cache, cached := importForm1UpsertCache[key]
	importForm1UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			importForm1AllColumns,
			importForm1ColumnsWithDefault,
			importForm1ColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			importForm1AllColumns,
			importForm1PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert import_form1, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(importForm1PrimaryKeyColumns))
			copy(conflict, importForm1PrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"import_form1\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(importForm1Type, importForm1Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(importForm1Type, importForm1Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert import_form1")
	}

	if !cached {
		importForm1UpsertCacheMut.Lock()
		importForm1UpsertCache[key] = cache
		importForm1UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ImportForm1 record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ImportForm1) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ImportForm1 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImportForm1) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ImportForm1 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), importForm1PrimaryKeyMapping)
	sql := "DELETE FROM \"import_form1\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from import_form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for import_form1")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q importForm1Query) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q importForm1Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no importForm1Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from import_form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_form1")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ImportForm1Slice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImportForm1Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(importForm1BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importForm1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"import_form1\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importForm1PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from importForm1 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_form1")
	}

	if len(importForm1AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ImportForm1) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ImportForm1 provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImportForm1) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImportForm1(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportForm1Slice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ImportForm1Slice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportForm1Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImportForm1Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importForm1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"import_form1\".* FROM \"import_form1\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importForm1PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ImportForm1Slice")
	}

	*o = slice

	return nil
}

// ImportForm1ExistsG checks if the ImportForm1 row exists.
func ImportForm1ExistsG(ctx context.Context, iD int64) (bool, error) {
	return ImportForm1Exists(ctx, boil.GetContextDB(), iD)
}

// ImportForm1Exists checks if the ImportForm1 row exists.
func ImportForm1Exists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"import_form1\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if import_form1 exists")
	}

	return exists, nil
}

// Exists checks if the ImportForm1 row exists.
func (o *ImportForm1) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImportForm1Exists(ctx, exec, o.ID)
}
