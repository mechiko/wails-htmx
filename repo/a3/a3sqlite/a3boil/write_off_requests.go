// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WriteOffRequest is an object representing the database table.
type WriteOffRequest struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDWriteOffActs null.Int64  `boil:"id_write_off_acts" json:"id_write_off_acts,omitempty" toml:"id_write_off_acts" yaml:"id_write_off_acts,omitempty"`
	ClientRegID    null.String `boil:"client_reg_id" json:"client_reg_id,omitempty" toml:"client_reg_id" yaml:"client_reg_id,omitempty"`
	RequestNumber  null.String `boil:"request_number" json:"request_number,omitempty" toml:"request_number" yaml:"request_number,omitempty"`
	RequestDate    null.String `boil:"request_date" json:"request_date,omitempty" toml:"request_date" yaml:"request_date,omitempty"`
	RequestRegID   null.String `boil:"request_reg_id" json:"request_reg_id,omitempty" toml:"request_reg_id" yaml:"request_reg_id,omitempty"`
	Status         null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID        null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`

	R *writeOffRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L writeOffRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WriteOffRequestColumns = struct {
	ID             string
	IDWriteOffActs string
	ClientRegID    string
	RequestNumber  string
	RequestDate    string
	RequestRegID   string
	Status         string
	ReplyID        string
}{
	ID:             "id",
	IDWriteOffActs: "id_write_off_acts",
	ClientRegID:    "client_reg_id",
	RequestNumber:  "request_number",
	RequestDate:    "request_date",
	RequestRegID:   "request_reg_id",
	Status:         "status",
	ReplyID:        "reply_id",
}

var WriteOffRequestTableColumns = struct {
	ID             string
	IDWriteOffActs string
	ClientRegID    string
	RequestNumber  string
	RequestDate    string
	RequestRegID   string
	Status         string
	ReplyID        string
}{
	ID:             "write_off_requests.id",
	IDWriteOffActs: "write_off_requests.id_write_off_acts",
	ClientRegID:    "write_off_requests.client_reg_id",
	RequestNumber:  "write_off_requests.request_number",
	RequestDate:    "write_off_requests.request_date",
	RequestRegID:   "write_off_requests.request_reg_id",
	Status:         "write_off_requests.status",
	ReplyID:        "write_off_requests.reply_id",
}

// Generated where

var WriteOffRequestWhere = struct {
	ID             whereHelperint64
	IDWriteOffActs whereHelpernull_Int64
	ClientRegID    whereHelpernull_String
	RequestNumber  whereHelpernull_String
	RequestDate    whereHelpernull_String
	RequestRegID   whereHelpernull_String
	Status         whereHelpernull_String
	ReplyID        whereHelpernull_String
}{
	ID:             whereHelperint64{field: "\"write_off_requests\".\"id\""},
	IDWriteOffActs: whereHelpernull_Int64{field: "\"write_off_requests\".\"id_write_off_acts\""},
	ClientRegID:    whereHelpernull_String{field: "\"write_off_requests\".\"client_reg_id\""},
	RequestNumber:  whereHelpernull_String{field: "\"write_off_requests\".\"request_number\""},
	RequestDate:    whereHelpernull_String{field: "\"write_off_requests\".\"request_date\""},
	RequestRegID:   whereHelpernull_String{field: "\"write_off_requests\".\"request_reg_id\""},
	Status:         whereHelpernull_String{field: "\"write_off_requests\".\"status\""},
	ReplyID:        whereHelpernull_String{field: "\"write_off_requests\".\"reply_id\""},
}

// WriteOffRequestRels is where relationship names are stored.
var WriteOffRequestRels = struct {
}{}

// writeOffRequestR is where relationships are stored.
type writeOffRequestR struct {
}

// NewStruct creates a new relationship struct
func (*writeOffRequestR) NewStruct() *writeOffRequestR {
	return &writeOffRequestR{}
}

// writeOffRequestL is where Load methods for each relationship are stored.
type writeOffRequestL struct{}

var (
	writeOffRequestAllColumns            = []string{"id", "id_write_off_acts", "client_reg_id", "request_number", "request_date", "request_reg_id", "status", "reply_id"}
	writeOffRequestColumnsWithoutDefault = []string{}
	writeOffRequestColumnsWithDefault    = []string{"id", "id_write_off_acts", "client_reg_id", "request_number", "request_date", "request_reg_id", "status", "reply_id"}
	writeOffRequestPrimaryKeyColumns     = []string{"id"}
	writeOffRequestGeneratedColumns      = []string{"id"}
)

type (
	// WriteOffRequestSlice is an alias for a slice of pointers to WriteOffRequest.
	// This should almost always be used instead of []WriteOffRequest.
	WriteOffRequestSlice []*WriteOffRequest
	// WriteOffRequestHook is the signature for custom WriteOffRequest hook methods
	WriteOffRequestHook func(context.Context, boil.ContextExecutor, *WriteOffRequest) error

	writeOffRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	writeOffRequestType                 = reflect.TypeOf(&WriteOffRequest{})
	writeOffRequestMapping              = queries.MakeStructMapping(writeOffRequestType)
	writeOffRequestPrimaryKeyMapping, _ = queries.BindMapping(writeOffRequestType, writeOffRequestMapping, writeOffRequestPrimaryKeyColumns)
	writeOffRequestInsertCacheMut       sync.RWMutex
	writeOffRequestInsertCache          = make(map[string]insertCache)
	writeOffRequestUpdateCacheMut       sync.RWMutex
	writeOffRequestUpdateCache          = make(map[string]updateCache)
	writeOffRequestUpsertCacheMut       sync.RWMutex
	writeOffRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var writeOffRequestAfterSelectMu sync.Mutex
var writeOffRequestAfterSelectHooks []WriteOffRequestHook

var writeOffRequestBeforeInsertMu sync.Mutex
var writeOffRequestBeforeInsertHooks []WriteOffRequestHook
var writeOffRequestAfterInsertMu sync.Mutex
var writeOffRequestAfterInsertHooks []WriteOffRequestHook

var writeOffRequestBeforeUpdateMu sync.Mutex
var writeOffRequestBeforeUpdateHooks []WriteOffRequestHook
var writeOffRequestAfterUpdateMu sync.Mutex
var writeOffRequestAfterUpdateHooks []WriteOffRequestHook

var writeOffRequestBeforeDeleteMu sync.Mutex
var writeOffRequestBeforeDeleteHooks []WriteOffRequestHook
var writeOffRequestAfterDeleteMu sync.Mutex
var writeOffRequestAfterDeleteHooks []WriteOffRequestHook

var writeOffRequestBeforeUpsertMu sync.Mutex
var writeOffRequestBeforeUpsertHooks []WriteOffRequestHook
var writeOffRequestAfterUpsertMu sync.Mutex
var writeOffRequestAfterUpsertHooks []WriteOffRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WriteOffRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WriteOffRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WriteOffRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WriteOffRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WriteOffRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WriteOffRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WriteOffRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WriteOffRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WriteOffRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWriteOffRequestHook registers your hook function for all future operations.
func AddWriteOffRequestHook(hookPoint boil.HookPoint, writeOffRequestHook WriteOffRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		writeOffRequestAfterSelectMu.Lock()
		writeOffRequestAfterSelectHooks = append(writeOffRequestAfterSelectHooks, writeOffRequestHook)
		writeOffRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		writeOffRequestBeforeInsertMu.Lock()
		writeOffRequestBeforeInsertHooks = append(writeOffRequestBeforeInsertHooks, writeOffRequestHook)
		writeOffRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		writeOffRequestAfterInsertMu.Lock()
		writeOffRequestAfterInsertHooks = append(writeOffRequestAfterInsertHooks, writeOffRequestHook)
		writeOffRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		writeOffRequestBeforeUpdateMu.Lock()
		writeOffRequestBeforeUpdateHooks = append(writeOffRequestBeforeUpdateHooks, writeOffRequestHook)
		writeOffRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		writeOffRequestAfterUpdateMu.Lock()
		writeOffRequestAfterUpdateHooks = append(writeOffRequestAfterUpdateHooks, writeOffRequestHook)
		writeOffRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		writeOffRequestBeforeDeleteMu.Lock()
		writeOffRequestBeforeDeleteHooks = append(writeOffRequestBeforeDeleteHooks, writeOffRequestHook)
		writeOffRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		writeOffRequestAfterDeleteMu.Lock()
		writeOffRequestAfterDeleteHooks = append(writeOffRequestAfterDeleteHooks, writeOffRequestHook)
		writeOffRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		writeOffRequestBeforeUpsertMu.Lock()
		writeOffRequestBeforeUpsertHooks = append(writeOffRequestBeforeUpsertHooks, writeOffRequestHook)
		writeOffRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		writeOffRequestAfterUpsertMu.Lock()
		writeOffRequestAfterUpsertHooks = append(writeOffRequestAfterUpsertHooks, writeOffRequestHook)
		writeOffRequestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single writeOffRequest record from the query using the global executor.
func (q writeOffRequestQuery) OneG(ctx context.Context) (*WriteOffRequest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single writeOffRequest record from the query.
func (q writeOffRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WriteOffRequest, error) {
	o := &WriteOffRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for write_off_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all WriteOffRequest records from the query using the global executor.
func (q writeOffRequestQuery) AllG(ctx context.Context) (WriteOffRequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all WriteOffRequest records from the query.
func (q writeOffRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (WriteOffRequestSlice, error) {
	var o []*WriteOffRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to WriteOffRequest slice")
	}

	if len(writeOffRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all WriteOffRequest records in the query using the global executor
func (q writeOffRequestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all WriteOffRequest records in the query.
func (q writeOffRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count write_off_requests rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q writeOffRequestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q writeOffRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if write_off_requests exists")
	}

	return count > 0, nil
}

// WriteOffRequests retrieves all the records using an executor.
func WriteOffRequests(mods ...qm.QueryMod) writeOffRequestQuery {
	mods = append(mods, qm.From("\"write_off_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"write_off_requests\".*"})
	}

	return writeOffRequestQuery{q}
}

// FindWriteOffRequestG retrieves a single record by ID.
func FindWriteOffRequestG(ctx context.Context, iD int64, selectCols ...string) (*WriteOffRequest, error) {
	return FindWriteOffRequest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindWriteOffRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWriteOffRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*WriteOffRequest, error) {
	writeOffRequestObj := &WriteOffRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"write_off_requests\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, writeOffRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from write_off_requests")
	}

	if err = writeOffRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return writeOffRequestObj, err
	}

	return writeOffRequestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WriteOffRequest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WriteOffRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_requests provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	writeOffRequestInsertCacheMut.RLock()
	cache, cached := writeOffRequestInsertCache[key]
	writeOffRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			writeOffRequestAllColumns,
			writeOffRequestColumnsWithDefault,
			writeOffRequestColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, writeOffRequestGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(writeOffRequestType, writeOffRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(writeOffRequestType, writeOffRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"write_off_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"write_off_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into write_off_requests")
	}

	if !cached {
		writeOffRequestInsertCacheMut.Lock()
		writeOffRequestInsertCache[key] = cache
		writeOffRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single WriteOffRequest record using the global executor.
// See Update for more documentation.
func (o *WriteOffRequest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the WriteOffRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WriteOffRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	writeOffRequestUpdateCacheMut.RLock()
	cache, cached := writeOffRequestUpdateCache[key]
	writeOffRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			writeOffRequestAllColumns,
			writeOffRequestPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, writeOffRequestGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update write_off_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"write_off_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, writeOffRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(writeOffRequestType, writeOffRequestMapping, append(wl, writeOffRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update write_off_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for write_off_requests")
	}

	if !cached {
		writeOffRequestUpdateCacheMut.Lock()
		writeOffRequestUpdateCache[key] = cache
		writeOffRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q writeOffRequestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q writeOffRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for write_off_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for write_off_requests")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WriteOffRequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WriteOffRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"write_off_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in writeOffRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all writeOffRequest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WriteOffRequest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WriteOffRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_requests provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	writeOffRequestUpsertCacheMut.RLock()
	cache, cached := writeOffRequestUpsertCache[key]
	writeOffRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			writeOffRequestAllColumns,
			writeOffRequestColumnsWithDefault,
			writeOffRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			writeOffRequestAllColumns,
			writeOffRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert write_off_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(writeOffRequestPrimaryKeyColumns))
			copy(conflict, writeOffRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"write_off_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(writeOffRequestType, writeOffRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(writeOffRequestType, writeOffRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert write_off_requests")
	}

	if !cached {
		writeOffRequestUpsertCacheMut.Lock()
		writeOffRequestUpsertCache[key] = cache
		writeOffRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single WriteOffRequest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WriteOffRequest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single WriteOffRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WriteOffRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no WriteOffRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), writeOffRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"write_off_requests\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from write_off_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for write_off_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q writeOffRequestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q writeOffRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no writeOffRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from write_off_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_requests")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WriteOffRequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WriteOffRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(writeOffRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"write_off_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from writeOffRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_requests")
	}

	if len(writeOffRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WriteOffRequest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no WriteOffRequest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WriteOffRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWriteOffRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffRequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty WriteOffRequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WriteOffRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"write_off_requests\".* FROM \"write_off_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in WriteOffRequestSlice")
	}

	*o = slice

	return nil
}

// WriteOffRequestExistsG checks if the WriteOffRequest row exists.
func WriteOffRequestExistsG(ctx context.Context, iD int64) (bool, error) {
	return WriteOffRequestExists(ctx, boil.GetContextDB(), iD)
}

// WriteOffRequestExists checks if the WriteOffRequest row exists.
func WriteOffRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"write_off_requests\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if write_off_requests exists")
	}

	return exists, nil
}

// Exists checks if the WriteOffRequest row exists.
func (o *WriteOffRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WriteOffRequestExists(ctx, exec, o.ID)
}
