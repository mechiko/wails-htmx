// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChargeOnProductsMark is an object representing the database table.
type ChargeOnProductsMark struct {
	ID                 int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDChargeOnProducts null.Int64  `boil:"id_charge_on_products" json:"id_charge_on_products,omitempty" toml:"id_charge_on_products" yaml:"id_charge_on_products,omitempty"`
	Mark               null.String `boil:"mark" json:"mark,omitempty" toml:"mark" yaml:"mark,omitempty"`

	R *chargeOnProductsMarkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chargeOnProductsMarkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChargeOnProductsMarkColumns = struct {
	ID                 string
	IDChargeOnProducts string
	Mark               string
}{
	ID:                 "id",
	IDChargeOnProducts: "id_charge_on_products",
	Mark:               "mark",
}

var ChargeOnProductsMarkTableColumns = struct {
	ID                 string
	IDChargeOnProducts string
	Mark               string
}{
	ID:                 "charge_on_products_marks.id",
	IDChargeOnProducts: "charge_on_products_marks.id_charge_on_products",
	Mark:               "charge_on_products_marks.mark",
}

// Generated where

var ChargeOnProductsMarkWhere = struct {
	ID                 whereHelperint64
	IDChargeOnProducts whereHelpernull_Int64
	Mark               whereHelpernull_String
}{
	ID:                 whereHelperint64{field: "\"charge_on_products_marks\".\"id\""},
	IDChargeOnProducts: whereHelpernull_Int64{field: "\"charge_on_products_marks\".\"id_charge_on_products\""},
	Mark:               whereHelpernull_String{field: "\"charge_on_products_marks\".\"mark\""},
}

// ChargeOnProductsMarkRels is where relationship names are stored.
var ChargeOnProductsMarkRels = struct {
}{}

// chargeOnProductsMarkR is where relationships are stored.
type chargeOnProductsMarkR struct {
}

// NewStruct creates a new relationship struct
func (*chargeOnProductsMarkR) NewStruct() *chargeOnProductsMarkR {
	return &chargeOnProductsMarkR{}
}

// chargeOnProductsMarkL is where Load methods for each relationship are stored.
type chargeOnProductsMarkL struct{}

var (
	chargeOnProductsMarkAllColumns            = []string{"id", "id_charge_on_products", "mark"}
	chargeOnProductsMarkColumnsWithoutDefault = []string{}
	chargeOnProductsMarkColumnsWithDefault    = []string{"id", "id_charge_on_products", "mark"}
	chargeOnProductsMarkPrimaryKeyColumns     = []string{"id"}
	chargeOnProductsMarkGeneratedColumns      = []string{"id"}
)

type (
	// ChargeOnProductsMarkSlice is an alias for a slice of pointers to ChargeOnProductsMark.
	// This should almost always be used instead of []ChargeOnProductsMark.
	ChargeOnProductsMarkSlice []*ChargeOnProductsMark
	// ChargeOnProductsMarkHook is the signature for custom ChargeOnProductsMark hook methods
	ChargeOnProductsMarkHook func(context.Context, boil.ContextExecutor, *ChargeOnProductsMark) error

	chargeOnProductsMarkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chargeOnProductsMarkType                 = reflect.TypeOf(&ChargeOnProductsMark{})
	chargeOnProductsMarkMapping              = queries.MakeStructMapping(chargeOnProductsMarkType)
	chargeOnProductsMarkPrimaryKeyMapping, _ = queries.BindMapping(chargeOnProductsMarkType, chargeOnProductsMarkMapping, chargeOnProductsMarkPrimaryKeyColumns)
	chargeOnProductsMarkInsertCacheMut       sync.RWMutex
	chargeOnProductsMarkInsertCache          = make(map[string]insertCache)
	chargeOnProductsMarkUpdateCacheMut       sync.RWMutex
	chargeOnProductsMarkUpdateCache          = make(map[string]updateCache)
	chargeOnProductsMarkUpsertCacheMut       sync.RWMutex
	chargeOnProductsMarkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chargeOnProductsMarkAfterSelectMu sync.Mutex
var chargeOnProductsMarkAfterSelectHooks []ChargeOnProductsMarkHook

var chargeOnProductsMarkBeforeInsertMu sync.Mutex
var chargeOnProductsMarkBeforeInsertHooks []ChargeOnProductsMarkHook
var chargeOnProductsMarkAfterInsertMu sync.Mutex
var chargeOnProductsMarkAfterInsertHooks []ChargeOnProductsMarkHook

var chargeOnProductsMarkBeforeUpdateMu sync.Mutex
var chargeOnProductsMarkBeforeUpdateHooks []ChargeOnProductsMarkHook
var chargeOnProductsMarkAfterUpdateMu sync.Mutex
var chargeOnProductsMarkAfterUpdateHooks []ChargeOnProductsMarkHook

var chargeOnProductsMarkBeforeDeleteMu sync.Mutex
var chargeOnProductsMarkBeforeDeleteHooks []ChargeOnProductsMarkHook
var chargeOnProductsMarkAfterDeleteMu sync.Mutex
var chargeOnProductsMarkAfterDeleteHooks []ChargeOnProductsMarkHook

var chargeOnProductsMarkBeforeUpsertMu sync.Mutex
var chargeOnProductsMarkBeforeUpsertHooks []ChargeOnProductsMarkHook
var chargeOnProductsMarkAfterUpsertMu sync.Mutex
var chargeOnProductsMarkAfterUpsertHooks []ChargeOnProductsMarkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChargeOnProductsMark) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChargeOnProductsMark) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChargeOnProductsMark) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChargeOnProductsMark) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChargeOnProductsMark) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChargeOnProductsMark) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChargeOnProductsMark) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChargeOnProductsMark) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChargeOnProductsMark) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnProductsMarkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChargeOnProductsMarkHook registers your hook function for all future operations.
func AddChargeOnProductsMarkHook(hookPoint boil.HookPoint, chargeOnProductsMarkHook ChargeOnProductsMarkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chargeOnProductsMarkAfterSelectMu.Lock()
		chargeOnProductsMarkAfterSelectHooks = append(chargeOnProductsMarkAfterSelectHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chargeOnProductsMarkBeforeInsertMu.Lock()
		chargeOnProductsMarkBeforeInsertHooks = append(chargeOnProductsMarkBeforeInsertHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chargeOnProductsMarkAfterInsertMu.Lock()
		chargeOnProductsMarkAfterInsertHooks = append(chargeOnProductsMarkAfterInsertHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chargeOnProductsMarkBeforeUpdateMu.Lock()
		chargeOnProductsMarkBeforeUpdateHooks = append(chargeOnProductsMarkBeforeUpdateHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chargeOnProductsMarkAfterUpdateMu.Lock()
		chargeOnProductsMarkAfterUpdateHooks = append(chargeOnProductsMarkAfterUpdateHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chargeOnProductsMarkBeforeDeleteMu.Lock()
		chargeOnProductsMarkBeforeDeleteHooks = append(chargeOnProductsMarkBeforeDeleteHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chargeOnProductsMarkAfterDeleteMu.Lock()
		chargeOnProductsMarkAfterDeleteHooks = append(chargeOnProductsMarkAfterDeleteHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chargeOnProductsMarkBeforeUpsertMu.Lock()
		chargeOnProductsMarkBeforeUpsertHooks = append(chargeOnProductsMarkBeforeUpsertHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chargeOnProductsMarkAfterUpsertMu.Lock()
		chargeOnProductsMarkAfterUpsertHooks = append(chargeOnProductsMarkAfterUpsertHooks, chargeOnProductsMarkHook)
		chargeOnProductsMarkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single chargeOnProductsMark record from the query using the global executor.
func (q chargeOnProductsMarkQuery) OneG(ctx context.Context) (*ChargeOnProductsMark, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single chargeOnProductsMark record from the query.
func (q chargeOnProductsMarkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChargeOnProductsMark, error) {
	o := &ChargeOnProductsMark{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for charge_on_products_marks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ChargeOnProductsMark records from the query using the global executor.
func (q chargeOnProductsMarkQuery) AllG(ctx context.Context) (ChargeOnProductsMarkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ChargeOnProductsMark records from the query.
func (q chargeOnProductsMarkQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChargeOnProductsMarkSlice, error) {
	var o []*ChargeOnProductsMark

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ChargeOnProductsMark slice")
	}

	if len(chargeOnProductsMarkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ChargeOnProductsMark records in the query using the global executor
func (q chargeOnProductsMarkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ChargeOnProductsMark records in the query.
func (q chargeOnProductsMarkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count charge_on_products_marks rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q chargeOnProductsMarkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chargeOnProductsMarkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if charge_on_products_marks exists")
	}

	return count > 0, nil
}

// ChargeOnProductsMarks retrieves all the records using an executor.
func ChargeOnProductsMarks(mods ...qm.QueryMod) chargeOnProductsMarkQuery {
	mods = append(mods, qm.From("\"charge_on_products_marks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"charge_on_products_marks\".*"})
	}

	return chargeOnProductsMarkQuery{q}
}

// FindChargeOnProductsMarkG retrieves a single record by ID.
func FindChargeOnProductsMarkG(ctx context.Context, iD int64, selectCols ...string) (*ChargeOnProductsMark, error) {
	return FindChargeOnProductsMark(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindChargeOnProductsMark retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChargeOnProductsMark(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ChargeOnProductsMark, error) {
	chargeOnProductsMarkObj := &ChargeOnProductsMark{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"charge_on_products_marks\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chargeOnProductsMarkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from charge_on_products_marks")
	}

	if err = chargeOnProductsMarkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chargeOnProductsMarkObj, err
	}

	return chargeOnProductsMarkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ChargeOnProductsMark) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChargeOnProductsMark) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_products_marks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnProductsMarkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chargeOnProductsMarkInsertCacheMut.RLock()
	cache, cached := chargeOnProductsMarkInsertCache[key]
	chargeOnProductsMarkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chargeOnProductsMarkAllColumns,
			chargeOnProductsMarkColumnsWithDefault,
			chargeOnProductsMarkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chargeOnProductsMarkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chargeOnProductsMarkType, chargeOnProductsMarkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chargeOnProductsMarkType, chargeOnProductsMarkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"charge_on_products_marks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"charge_on_products_marks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into charge_on_products_marks")
	}

	if !cached {
		chargeOnProductsMarkInsertCacheMut.Lock()
		chargeOnProductsMarkInsertCache[key] = cache
		chargeOnProductsMarkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ChargeOnProductsMark record using the global executor.
// See Update for more documentation.
func (o *ChargeOnProductsMark) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ChargeOnProductsMark.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChargeOnProductsMark) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chargeOnProductsMarkUpdateCacheMut.RLock()
	cache, cached := chargeOnProductsMarkUpdateCache[key]
	chargeOnProductsMarkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chargeOnProductsMarkAllColumns,
			chargeOnProductsMarkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chargeOnProductsMarkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update charge_on_products_marks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"charge_on_products_marks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chargeOnProductsMarkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chargeOnProductsMarkType, chargeOnProductsMarkMapping, append(wl, chargeOnProductsMarkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update charge_on_products_marks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for charge_on_products_marks")
	}

	if !cached {
		chargeOnProductsMarkUpdateCacheMut.Lock()
		chargeOnProductsMarkUpdateCache[key] = cache
		chargeOnProductsMarkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chargeOnProductsMarkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chargeOnProductsMarkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for charge_on_products_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for charge_on_products_marks")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChargeOnProductsMarkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChargeOnProductsMarkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnProductsMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"charge_on_products_marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargeOnProductsMarkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in chargeOnProductsMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all chargeOnProductsMark")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ChargeOnProductsMark) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChargeOnProductsMark) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_products_marks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnProductsMarkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chargeOnProductsMarkUpsertCacheMut.RLock()
	cache, cached := chargeOnProductsMarkUpsertCache[key]
	chargeOnProductsMarkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chargeOnProductsMarkAllColumns,
			chargeOnProductsMarkColumnsWithDefault,
			chargeOnProductsMarkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chargeOnProductsMarkAllColumns,
			chargeOnProductsMarkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert charge_on_products_marks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chargeOnProductsMarkPrimaryKeyColumns))
			copy(conflict, chargeOnProductsMarkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"charge_on_products_marks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chargeOnProductsMarkType, chargeOnProductsMarkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chargeOnProductsMarkType, chargeOnProductsMarkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert charge_on_products_marks")
	}

	if !cached {
		chargeOnProductsMarkUpsertCacheMut.Lock()
		chargeOnProductsMarkUpsertCache[key] = cache
		chargeOnProductsMarkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ChargeOnProductsMark record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ChargeOnProductsMark) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ChargeOnProductsMark record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChargeOnProductsMark) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ChargeOnProductsMark provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chargeOnProductsMarkPrimaryKeyMapping)
	sql := "DELETE FROM \"charge_on_products_marks\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from charge_on_products_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for charge_on_products_marks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chargeOnProductsMarkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q chargeOnProductsMarkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no chargeOnProductsMarkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from charge_on_products_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_products_marks")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChargeOnProductsMarkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChargeOnProductsMarkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chargeOnProductsMarkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnProductsMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"charge_on_products_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargeOnProductsMarkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from chargeOnProductsMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_products_marks")
	}

	if len(chargeOnProductsMarkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ChargeOnProductsMark) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ChargeOnProductsMark provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChargeOnProductsMark) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChargeOnProductsMark(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnProductsMarkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ChargeOnProductsMarkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnProductsMarkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChargeOnProductsMarkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnProductsMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"charge_on_products_marks\".* FROM \"charge_on_products_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargeOnProductsMarkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ChargeOnProductsMarkSlice")
	}

	*o = slice

	return nil
}

// ChargeOnProductsMarkExistsG checks if the ChargeOnProductsMark row exists.
func ChargeOnProductsMarkExistsG(ctx context.Context, iD int64) (bool, error) {
	return ChargeOnProductsMarkExists(ctx, boil.GetContextDB(), iD)
}

// ChargeOnProductsMarkExists checks if the ChargeOnProductsMark row exists.
func ChargeOnProductsMarkExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"charge_on_products_marks\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if charge_on_products_marks exists")
	}

	return exists, nil
}

// Exists checks if the ChargeOnProductsMark row exists.
func (o *ChargeOnProductsMark) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChargeOnProductsMarkExists(ctx, exec, o.ID)
}
