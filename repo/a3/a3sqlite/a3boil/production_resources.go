// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionResource is an object representing the database table.
type ProductionResource struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionReports   null.Int64  `boil:"id_production_reports" json:"id_production_reports,omitempty" toml:"id_production_reports" yaml:"id_production_reports,omitempty"`
	IDProductionProducts  null.Int64  `boil:"id_production_products" json:"id_production_products,omitempty" toml:"id_production_products" yaml:"id_production_products,omitempty"`
	ResourceFullName      null.String `boil:"resource_full_name" json:"resource_full_name,omitempty" toml:"resource_full_name" yaml:"resource_full_name,omitempty"`
	ResourceCapacity      null.String `boil:"resource_capacity" json:"resource_capacity,omitempty" toml:"resource_capacity" yaml:"resource_capacity,omitempty"`
	ResourceAlcVolume     null.String `boil:"resource_alc_volume" json:"resource_alc_volume,omitempty" toml:"resource_alc_volume" yaml:"resource_alc_volume,omitempty"`
	ResourceAlcCode       null.String `boil:"resource_alc_code" json:"resource_alc_code,omitempty" toml:"resource_alc_code" yaml:"resource_alc_code,omitempty"`
	ResourceCode          null.String `boil:"resource_code" json:"resource_code,omitempty" toml:"resource_code" yaml:"resource_code,omitempty"`
	ResourceUnitType      null.String `boil:"resource_unit_type" json:"resource_unit_type,omitempty" toml:"resource_unit_type" yaml:"resource_unit_type,omitempty"`
	ResourceIddomain      null.String `boil:"resource_iddomain" json:"resource_iddomain,omitempty" toml:"resource_iddomain" yaml:"resource_iddomain,omitempty"`
	ResourceQuantity      null.String `boil:"resource_quantity" json:"resource_quantity,omitempty" toml:"resource_quantity" yaml:"resource_quantity,omitempty"`
	ResourceInformF1RegID null.String `boil:"resource_inform_f1_reg_id" json:"resource_inform_f1_reg_id,omitempty" toml:"resource_inform_f1_reg_id" yaml:"resource_inform_f1_reg_id,omitempty"`
	ResourceInformF2RegID null.String `boil:"resource_inform_f2_reg_id" json:"resource_inform_f2_reg_id,omitempty" toml:"resource_inform_f2_reg_id" yaml:"resource_inform_f2_reg_id,omitempty"`
	ProducerType          null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID   null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn           null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP           null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName      null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName     null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode   null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode    null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription   null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *productionResourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionResourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionResourceColumns = struct {
	ID                    string
	IDProductionReports   string
	IDProductionProducts  string
	ResourceFullName      string
	ResourceCapacity      string
	ResourceAlcVolume     string
	ResourceAlcCode       string
	ResourceCode          string
	ResourceUnitType      string
	ResourceIddomain      string
	ResourceQuantity      string
	ResourceInformF1RegID string
	ResourceInformF2RegID string
	ProducerType          string
	ProducerClientRegID   string
	ProducerInn           string
	ProducerKPP           string
	ProducerFullName      string
	ProducerShortName     string
	ProducerCountryCode   string
	ProducerRegionCode    string
	ProducerDescription   string
}{
	ID:                    "id",
	IDProductionReports:   "id_production_reports",
	IDProductionProducts:  "id_production_products",
	ResourceFullName:      "resource_full_name",
	ResourceCapacity:      "resource_capacity",
	ResourceAlcVolume:     "resource_alc_volume",
	ResourceAlcCode:       "resource_alc_code",
	ResourceCode:          "resource_code",
	ResourceUnitType:      "resource_unit_type",
	ResourceIddomain:      "resource_iddomain",
	ResourceQuantity:      "resource_quantity",
	ResourceInformF1RegID: "resource_inform_f1_reg_id",
	ResourceInformF2RegID: "resource_inform_f2_reg_id",
	ProducerType:          "producer_type",
	ProducerClientRegID:   "producer_client_reg_id",
	ProducerInn:           "producer_inn",
	ProducerKPP:           "producer_kpp",
	ProducerFullName:      "producer_full_name",
	ProducerShortName:     "producer_short_name",
	ProducerCountryCode:   "producer_country_code",
	ProducerRegionCode:    "producer_region_code",
	ProducerDescription:   "producer_description",
}

var ProductionResourceTableColumns = struct {
	ID                    string
	IDProductionReports   string
	IDProductionProducts  string
	ResourceFullName      string
	ResourceCapacity      string
	ResourceAlcVolume     string
	ResourceAlcCode       string
	ResourceCode          string
	ResourceUnitType      string
	ResourceIddomain      string
	ResourceQuantity      string
	ResourceInformF1RegID string
	ResourceInformF2RegID string
	ProducerType          string
	ProducerClientRegID   string
	ProducerInn           string
	ProducerKPP           string
	ProducerFullName      string
	ProducerShortName     string
	ProducerCountryCode   string
	ProducerRegionCode    string
	ProducerDescription   string
}{
	ID:                    "production_resources.id",
	IDProductionReports:   "production_resources.id_production_reports",
	IDProductionProducts:  "production_resources.id_production_products",
	ResourceFullName:      "production_resources.resource_full_name",
	ResourceCapacity:      "production_resources.resource_capacity",
	ResourceAlcVolume:     "production_resources.resource_alc_volume",
	ResourceAlcCode:       "production_resources.resource_alc_code",
	ResourceCode:          "production_resources.resource_code",
	ResourceUnitType:      "production_resources.resource_unit_type",
	ResourceIddomain:      "production_resources.resource_iddomain",
	ResourceQuantity:      "production_resources.resource_quantity",
	ResourceInformF1RegID: "production_resources.resource_inform_f1_reg_id",
	ResourceInformF2RegID: "production_resources.resource_inform_f2_reg_id",
	ProducerType:          "production_resources.producer_type",
	ProducerClientRegID:   "production_resources.producer_client_reg_id",
	ProducerInn:           "production_resources.producer_inn",
	ProducerKPP:           "production_resources.producer_kpp",
	ProducerFullName:      "production_resources.producer_full_name",
	ProducerShortName:     "production_resources.producer_short_name",
	ProducerCountryCode:   "production_resources.producer_country_code",
	ProducerRegionCode:    "production_resources.producer_region_code",
	ProducerDescription:   "production_resources.producer_description",
}

// Generated where

var ProductionResourceWhere = struct {
	ID                    whereHelperint64
	IDProductionReports   whereHelpernull_Int64
	IDProductionProducts  whereHelpernull_Int64
	ResourceFullName      whereHelpernull_String
	ResourceCapacity      whereHelpernull_String
	ResourceAlcVolume     whereHelpernull_String
	ResourceAlcCode       whereHelpernull_String
	ResourceCode          whereHelpernull_String
	ResourceUnitType      whereHelpernull_String
	ResourceIddomain      whereHelpernull_String
	ResourceQuantity      whereHelpernull_String
	ResourceInformF1RegID whereHelpernull_String
	ResourceInformF2RegID whereHelpernull_String
	ProducerType          whereHelpernull_String
	ProducerClientRegID   whereHelpernull_String
	ProducerInn           whereHelpernull_String
	ProducerKPP           whereHelpernull_String
	ProducerFullName      whereHelpernull_String
	ProducerShortName     whereHelpernull_String
	ProducerCountryCode   whereHelpernull_String
	ProducerRegionCode    whereHelpernull_String
	ProducerDescription   whereHelpernull_String
}{
	ID:                    whereHelperint64{field: "\"production_resources\".\"id\""},
	IDProductionReports:   whereHelpernull_Int64{field: "\"production_resources\".\"id_production_reports\""},
	IDProductionProducts:  whereHelpernull_Int64{field: "\"production_resources\".\"id_production_products\""},
	ResourceFullName:      whereHelpernull_String{field: "\"production_resources\".\"resource_full_name\""},
	ResourceCapacity:      whereHelpernull_String{field: "\"production_resources\".\"resource_capacity\""},
	ResourceAlcVolume:     whereHelpernull_String{field: "\"production_resources\".\"resource_alc_volume\""},
	ResourceAlcCode:       whereHelpernull_String{field: "\"production_resources\".\"resource_alc_code\""},
	ResourceCode:          whereHelpernull_String{field: "\"production_resources\".\"resource_code\""},
	ResourceUnitType:      whereHelpernull_String{field: "\"production_resources\".\"resource_unit_type\""},
	ResourceIddomain:      whereHelpernull_String{field: "\"production_resources\".\"resource_iddomain\""},
	ResourceQuantity:      whereHelpernull_String{field: "\"production_resources\".\"resource_quantity\""},
	ResourceInformF1RegID: whereHelpernull_String{field: "\"production_resources\".\"resource_inform_f1_reg_id\""},
	ResourceInformF2RegID: whereHelpernull_String{field: "\"production_resources\".\"resource_inform_f2_reg_id\""},
	ProducerType:          whereHelpernull_String{field: "\"production_resources\".\"producer_type\""},
	ProducerClientRegID:   whereHelpernull_String{field: "\"production_resources\".\"producer_client_reg_id\""},
	ProducerInn:           whereHelpernull_String{field: "\"production_resources\".\"producer_inn\""},
	ProducerKPP:           whereHelpernull_String{field: "\"production_resources\".\"producer_kpp\""},
	ProducerFullName:      whereHelpernull_String{field: "\"production_resources\".\"producer_full_name\""},
	ProducerShortName:     whereHelpernull_String{field: "\"production_resources\".\"producer_short_name\""},
	ProducerCountryCode:   whereHelpernull_String{field: "\"production_resources\".\"producer_country_code\""},
	ProducerRegionCode:    whereHelpernull_String{field: "\"production_resources\".\"producer_region_code\""},
	ProducerDescription:   whereHelpernull_String{field: "\"production_resources\".\"producer_description\""},
}

// ProductionResourceRels is where relationship names are stored.
var ProductionResourceRels = struct {
}{}

// productionResourceR is where relationships are stored.
type productionResourceR struct {
}

// NewStruct creates a new relationship struct
func (*productionResourceR) NewStruct() *productionResourceR {
	return &productionResourceR{}
}

// productionResourceL is where Load methods for each relationship are stored.
type productionResourceL struct{}

var (
	productionResourceAllColumns            = []string{"id", "id_production_reports", "id_production_products", "resource_full_name", "resource_capacity", "resource_alc_volume", "resource_alc_code", "resource_code", "resource_unit_type", "resource_iddomain", "resource_quantity", "resource_inform_f1_reg_id", "resource_inform_f2_reg_id", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	productionResourceColumnsWithoutDefault = []string{}
	productionResourceColumnsWithDefault    = []string{"id", "id_production_reports", "id_production_products", "resource_full_name", "resource_capacity", "resource_alc_volume", "resource_alc_code", "resource_code", "resource_unit_type", "resource_iddomain", "resource_quantity", "resource_inform_f1_reg_id", "resource_inform_f2_reg_id", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	productionResourcePrimaryKeyColumns     = []string{"id"}
	productionResourceGeneratedColumns      = []string{"id"}
)

type (
	// ProductionResourceSlice is an alias for a slice of pointers to ProductionResource.
	// This should almost always be used instead of []ProductionResource.
	ProductionResourceSlice []*ProductionResource
	// ProductionResourceHook is the signature for custom ProductionResource hook methods
	ProductionResourceHook func(context.Context, boil.ContextExecutor, *ProductionResource) error

	productionResourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionResourceType                 = reflect.TypeOf(&ProductionResource{})
	productionResourceMapping              = queries.MakeStructMapping(productionResourceType)
	productionResourcePrimaryKeyMapping, _ = queries.BindMapping(productionResourceType, productionResourceMapping, productionResourcePrimaryKeyColumns)
	productionResourceInsertCacheMut       sync.RWMutex
	productionResourceInsertCache          = make(map[string]insertCache)
	productionResourceUpdateCacheMut       sync.RWMutex
	productionResourceUpdateCache          = make(map[string]updateCache)
	productionResourceUpsertCacheMut       sync.RWMutex
	productionResourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionResourceAfterSelectMu sync.Mutex
var productionResourceAfterSelectHooks []ProductionResourceHook

var productionResourceBeforeInsertMu sync.Mutex
var productionResourceBeforeInsertHooks []ProductionResourceHook
var productionResourceAfterInsertMu sync.Mutex
var productionResourceAfterInsertHooks []ProductionResourceHook

var productionResourceBeforeUpdateMu sync.Mutex
var productionResourceBeforeUpdateHooks []ProductionResourceHook
var productionResourceAfterUpdateMu sync.Mutex
var productionResourceAfterUpdateHooks []ProductionResourceHook

var productionResourceBeforeDeleteMu sync.Mutex
var productionResourceBeforeDeleteHooks []ProductionResourceHook
var productionResourceAfterDeleteMu sync.Mutex
var productionResourceAfterDeleteHooks []ProductionResourceHook

var productionResourceBeforeUpsertMu sync.Mutex
var productionResourceBeforeUpsertHooks []ProductionResourceHook
var productionResourceAfterUpsertMu sync.Mutex
var productionResourceAfterUpsertHooks []ProductionResourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionResource) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionResource) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionResource) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionResource) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionResource) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionResource) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionResource) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionResource) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionResource) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionResourceHook registers your hook function for all future operations.
func AddProductionResourceHook(hookPoint boil.HookPoint, productionResourceHook ProductionResourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionResourceAfterSelectMu.Lock()
		productionResourceAfterSelectHooks = append(productionResourceAfterSelectHooks, productionResourceHook)
		productionResourceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionResourceBeforeInsertMu.Lock()
		productionResourceBeforeInsertHooks = append(productionResourceBeforeInsertHooks, productionResourceHook)
		productionResourceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionResourceAfterInsertMu.Lock()
		productionResourceAfterInsertHooks = append(productionResourceAfterInsertHooks, productionResourceHook)
		productionResourceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionResourceBeforeUpdateMu.Lock()
		productionResourceBeforeUpdateHooks = append(productionResourceBeforeUpdateHooks, productionResourceHook)
		productionResourceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionResourceAfterUpdateMu.Lock()
		productionResourceAfterUpdateHooks = append(productionResourceAfterUpdateHooks, productionResourceHook)
		productionResourceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionResourceBeforeDeleteMu.Lock()
		productionResourceBeforeDeleteHooks = append(productionResourceBeforeDeleteHooks, productionResourceHook)
		productionResourceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionResourceAfterDeleteMu.Lock()
		productionResourceAfterDeleteHooks = append(productionResourceAfterDeleteHooks, productionResourceHook)
		productionResourceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionResourceBeforeUpsertMu.Lock()
		productionResourceBeforeUpsertHooks = append(productionResourceBeforeUpsertHooks, productionResourceHook)
		productionResourceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionResourceAfterUpsertMu.Lock()
		productionResourceAfterUpsertHooks = append(productionResourceAfterUpsertHooks, productionResourceHook)
		productionResourceAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionResource record from the query using the global executor.
func (q productionResourceQuery) OneG(ctx context.Context) (*ProductionResource, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionResource record from the query.
func (q productionResourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionResource, error) {
	o := &ProductionResource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_resources")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionResource records from the query using the global executor.
func (q productionResourceQuery) AllG(ctx context.Context) (ProductionResourceSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionResource records from the query.
func (q productionResourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionResourceSlice, error) {
	var o []*ProductionResource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionResource slice")
	}

	if len(productionResourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionResource records in the query using the global executor
func (q productionResourceQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionResource records in the query.
func (q productionResourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_resources rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionResourceQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionResourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_resources exists")
	}

	return count > 0, nil
}

// ProductionResources retrieves all the records using an executor.
func ProductionResources(mods ...qm.QueryMod) productionResourceQuery {
	mods = append(mods, qm.From("\"production_resources\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"production_resources\".*"})
	}

	return productionResourceQuery{q}
}

// FindProductionResourceG retrieves a single record by ID.
func FindProductionResourceG(ctx context.Context, iD int64, selectCols ...string) (*ProductionResource, error) {
	return FindProductionResource(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionResource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionResource(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductionResource, error) {
	productionResourceObj := &ProductionResource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"production_resources\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionResourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_resources")
	}

	if err = productionResourceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionResourceObj, err
	}

	return productionResourceObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionResource) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionResource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_resources provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionResourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionResourceInsertCacheMut.RLock()
	cache, cached := productionResourceInsertCache[key]
	productionResourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionResourceAllColumns,
			productionResourceColumnsWithDefault,
			productionResourceColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionResourceGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionResourceType, productionResourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionResourceType, productionResourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"production_resources\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"production_resources\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_resources")
	}

	if !cached {
		productionResourceInsertCacheMut.Lock()
		productionResourceInsertCache[key] = cache
		productionResourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionResource record using the global executor.
// See Update for more documentation.
func (o *ProductionResource) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionResource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionResource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionResourceUpdateCacheMut.RLock()
	cache, cached := productionResourceUpdateCache[key]
	productionResourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionResourceAllColumns,
			productionResourcePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionResourceGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_resources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"production_resources\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productionResourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionResourceType, productionResourceMapping, append(wl, productionResourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_resources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_resources")
	}

	if !cached {
		productionResourceUpdateCacheMut.Lock()
		productionResourceUpdateCache[key] = cache
		productionResourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionResourceQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionResourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_resources")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionResourceSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionResourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"production_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionResourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionResource")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionResource) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductionResource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_resources provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionResourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionResourceUpsertCacheMut.RLock()
	cache, cached := productionResourceUpsertCache[key]
	productionResourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productionResourceAllColumns,
			productionResourceColumnsWithDefault,
			productionResourceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productionResourceAllColumns,
			productionResourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_resources, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productionResourcePrimaryKeyColumns))
			copy(conflict, productionResourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"production_resources\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productionResourceType, productionResourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionResourceType, productionResourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_resources")
	}

	if !cached {
		productionResourceUpsertCacheMut.Lock()
		productionResourceUpsertCache[key] = cache
		productionResourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionResource record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionResource) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionResource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionResource) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionResource provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionResourcePrimaryKeyMapping)
	sql := "DELETE FROM \"production_resources\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_resources")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionResourceQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionResourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionResourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_resources")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionResourceSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionResourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionResourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"production_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionResourcePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_resources")
	}

	if len(productionResourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionResource) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionResource provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionResource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionResource(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionResourceSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionResourceSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionResourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionResourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"production_resources\".* FROM \"production_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionResourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionResourceSlice")
	}

	*o = slice

	return nil
}

// ProductionResourceExistsG checks if the ProductionResource row exists.
func ProductionResourceExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductionResourceExists(ctx, boil.GetContextDB(), iD)
}

// ProductionResourceExists checks if the ProductionResource row exists.
func ProductionResourceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"production_resources\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_resources exists")
	}

	return exists, nil
}

// Exists checks if the ProductionResource row exists.
func (o *ProductionResource) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionResourceExists(ctx, exec, o.ID)
}
