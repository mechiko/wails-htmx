// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionProduct is an object representing the database table.
type ProductionProduct struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionReports null.Int64  `boil:"id_production_reports" json:"id_production_reports,omitempty" toml:"id_production_reports" yaml:"id_production_reports,omitempty"`
	ProductFullName     null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity     null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume    null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcVolumeMin null.String `boil:"product_alc_volume_min" json:"product_alc_volume_min,omitempty" toml:"product_alc_volume_min" yaml:"product_alc_volume_min,omitempty"`
	ProductAlcVolumeMax null.String `boil:"product_alc_volume_max" json:"product_alc_volume_max,omitempty" toml:"product_alc_volume_max" yaml:"product_alc_volume_max,omitempty"`
	ProductAlcCode      null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode         null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType     null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProductIdentity     null.String `boil:"product_identity" json:"product_identity,omitempty" toml:"product_identity" yaml:"product_identity,omitempty"`
	ProductQuantity     null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	ProductParty        null.String `boil:"product_party" json:"product_party,omitempty" toml:"product_party" yaml:"product_party,omitempty"`
	ProductComment      null.String `boil:"product_comment" json:"product_comment,omitempty" toml:"product_comment" yaml:"product_comment,omitempty"`
	ProducerType        null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn         null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP         null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName    null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName   null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode  null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *productionProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionProductColumns = struct {
	ID                  string
	IDProductionReports string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcVolumeMin string
	ProductAlcVolumeMax string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProductIdentity     string
	ProductQuantity     string
	ProductParty        string
	ProductComment      string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "id",
	IDProductionReports: "id_production_reports",
	ProductFullName:     "product_full_name",
	ProductCapacity:     "product_capacity",
	ProductAlcVolume:    "product_alc_volume",
	ProductAlcVolumeMin: "product_alc_volume_min",
	ProductAlcVolumeMax: "product_alc_volume_max",
	ProductAlcCode:      "product_alc_code",
	ProductCode:         "product_code",
	ProductUnitType:     "product_unit_type",
	ProductIdentity:     "product_identity",
	ProductQuantity:     "product_quantity",
	ProductParty:        "product_party",
	ProductComment:      "product_comment",
	ProducerType:        "producer_type",
	ProducerClientRegID: "producer_client_reg_id",
	ProducerInn:         "producer_inn",
	ProducerKPP:         "producer_kpp",
	ProducerFullName:    "producer_full_name",
	ProducerShortName:   "producer_short_name",
	ProducerCountryCode: "producer_country_code",
	ProducerRegionCode:  "producer_region_code",
	ProducerDescription: "producer_description",
}

var ProductionProductTableColumns = struct {
	ID                  string
	IDProductionReports string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcVolumeMin string
	ProductAlcVolumeMax string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProductIdentity     string
	ProductQuantity     string
	ProductParty        string
	ProductComment      string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "production_products.id",
	IDProductionReports: "production_products.id_production_reports",
	ProductFullName:     "production_products.product_full_name",
	ProductCapacity:     "production_products.product_capacity",
	ProductAlcVolume:    "production_products.product_alc_volume",
	ProductAlcVolumeMin: "production_products.product_alc_volume_min",
	ProductAlcVolumeMax: "production_products.product_alc_volume_max",
	ProductAlcCode:      "production_products.product_alc_code",
	ProductCode:         "production_products.product_code",
	ProductUnitType:     "production_products.product_unit_type",
	ProductIdentity:     "production_products.product_identity",
	ProductQuantity:     "production_products.product_quantity",
	ProductParty:        "production_products.product_party",
	ProductComment:      "production_products.product_comment",
	ProducerType:        "production_products.producer_type",
	ProducerClientRegID: "production_products.producer_client_reg_id",
	ProducerInn:         "production_products.producer_inn",
	ProducerKPP:         "production_products.producer_kpp",
	ProducerFullName:    "production_products.producer_full_name",
	ProducerShortName:   "production_products.producer_short_name",
	ProducerCountryCode: "production_products.producer_country_code",
	ProducerRegionCode:  "production_products.producer_region_code",
	ProducerDescription: "production_products.producer_description",
}

// Generated where

var ProductionProductWhere = struct {
	ID                  whereHelperint64
	IDProductionReports whereHelpernull_Int64
	ProductFullName     whereHelpernull_String
	ProductCapacity     whereHelpernull_String
	ProductAlcVolume    whereHelpernull_String
	ProductAlcVolumeMin whereHelpernull_String
	ProductAlcVolumeMax whereHelpernull_String
	ProductAlcCode      whereHelpernull_String
	ProductCode         whereHelpernull_String
	ProductUnitType     whereHelpernull_String
	ProductIdentity     whereHelpernull_String
	ProductQuantity     whereHelpernull_String
	ProductParty        whereHelpernull_String
	ProductComment      whereHelpernull_String
	ProducerType        whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	ProducerInn         whereHelpernull_String
	ProducerKPP         whereHelpernull_String
	ProducerFullName    whereHelpernull_String
	ProducerShortName   whereHelpernull_String
	ProducerCountryCode whereHelpernull_String
	ProducerRegionCode  whereHelpernull_String
	ProducerDescription whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"production_products\".\"id\""},
	IDProductionReports: whereHelpernull_Int64{field: "\"production_products\".\"id_production_reports\""},
	ProductFullName:     whereHelpernull_String{field: "\"production_products\".\"product_full_name\""},
	ProductCapacity:     whereHelpernull_String{field: "\"production_products\".\"product_capacity\""},
	ProductAlcVolume:    whereHelpernull_String{field: "\"production_products\".\"product_alc_volume\""},
	ProductAlcVolumeMin: whereHelpernull_String{field: "\"production_products\".\"product_alc_volume_min\""},
	ProductAlcVolumeMax: whereHelpernull_String{field: "\"production_products\".\"product_alc_volume_max\""},
	ProductAlcCode:      whereHelpernull_String{field: "\"production_products\".\"product_alc_code\""},
	ProductCode:         whereHelpernull_String{field: "\"production_products\".\"product_code\""},
	ProductUnitType:     whereHelpernull_String{field: "\"production_products\".\"product_unit_type\""},
	ProductIdentity:     whereHelpernull_String{field: "\"production_products\".\"product_identity\""},
	ProductQuantity:     whereHelpernull_String{field: "\"production_products\".\"product_quantity\""},
	ProductParty:        whereHelpernull_String{field: "\"production_products\".\"product_party\""},
	ProductComment:      whereHelpernull_String{field: "\"production_products\".\"product_comment\""},
	ProducerType:        whereHelpernull_String{field: "\"production_products\".\"producer_type\""},
	ProducerClientRegID: whereHelpernull_String{field: "\"production_products\".\"producer_client_reg_id\""},
	ProducerInn:         whereHelpernull_String{field: "\"production_products\".\"producer_inn\""},
	ProducerKPP:         whereHelpernull_String{field: "\"production_products\".\"producer_kpp\""},
	ProducerFullName:    whereHelpernull_String{field: "\"production_products\".\"producer_full_name\""},
	ProducerShortName:   whereHelpernull_String{field: "\"production_products\".\"producer_short_name\""},
	ProducerCountryCode: whereHelpernull_String{field: "\"production_products\".\"producer_country_code\""},
	ProducerRegionCode:  whereHelpernull_String{field: "\"production_products\".\"producer_region_code\""},
	ProducerDescription: whereHelpernull_String{field: "\"production_products\".\"producer_description\""},
}

// ProductionProductRels is where relationship names are stored.
var ProductionProductRels = struct {
}{}

// productionProductR is where relationships are stored.
type productionProductR struct {
}

// NewStruct creates a new relationship struct
func (*productionProductR) NewStruct() *productionProductR {
	return &productionProductR{}
}

// productionProductL is where Load methods for each relationship are stored.
type productionProductL struct{}

var (
	productionProductAllColumns            = []string{"id", "id_production_reports", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_volume_min", "product_alc_volume_max", "product_alc_code", "product_code", "product_unit_type", "product_identity", "product_quantity", "product_party", "product_comment", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	productionProductColumnsWithoutDefault = []string{}
	productionProductColumnsWithDefault    = []string{"id", "id_production_reports", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_volume_min", "product_alc_volume_max", "product_alc_code", "product_code", "product_unit_type", "product_identity", "product_quantity", "product_party", "product_comment", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	productionProductPrimaryKeyColumns     = []string{"id"}
	productionProductGeneratedColumns      = []string{"id"}
)

type (
	// ProductionProductSlice is an alias for a slice of pointers to ProductionProduct.
	// This should almost always be used instead of []ProductionProduct.
	ProductionProductSlice []*ProductionProduct
	// ProductionProductHook is the signature for custom ProductionProduct hook methods
	ProductionProductHook func(context.Context, boil.ContextExecutor, *ProductionProduct) error

	productionProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionProductType                 = reflect.TypeOf(&ProductionProduct{})
	productionProductMapping              = queries.MakeStructMapping(productionProductType)
	productionProductPrimaryKeyMapping, _ = queries.BindMapping(productionProductType, productionProductMapping, productionProductPrimaryKeyColumns)
	productionProductInsertCacheMut       sync.RWMutex
	productionProductInsertCache          = make(map[string]insertCache)
	productionProductUpdateCacheMut       sync.RWMutex
	productionProductUpdateCache          = make(map[string]updateCache)
	productionProductUpsertCacheMut       sync.RWMutex
	productionProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionProductAfterSelectMu sync.Mutex
var productionProductAfterSelectHooks []ProductionProductHook

var productionProductBeforeInsertMu sync.Mutex
var productionProductBeforeInsertHooks []ProductionProductHook
var productionProductAfterInsertMu sync.Mutex
var productionProductAfterInsertHooks []ProductionProductHook

var productionProductBeforeUpdateMu sync.Mutex
var productionProductBeforeUpdateHooks []ProductionProductHook
var productionProductAfterUpdateMu sync.Mutex
var productionProductAfterUpdateHooks []ProductionProductHook

var productionProductBeforeDeleteMu sync.Mutex
var productionProductBeforeDeleteHooks []ProductionProductHook
var productionProductAfterDeleteMu sync.Mutex
var productionProductAfterDeleteHooks []ProductionProductHook

var productionProductBeforeUpsertMu sync.Mutex
var productionProductBeforeUpsertHooks []ProductionProductHook
var productionProductAfterUpsertMu sync.Mutex
var productionProductAfterUpsertHooks []ProductionProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionProductHook registers your hook function for all future operations.
func AddProductionProductHook(hookPoint boil.HookPoint, productionProductHook ProductionProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionProductAfterSelectMu.Lock()
		productionProductAfterSelectHooks = append(productionProductAfterSelectHooks, productionProductHook)
		productionProductAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionProductBeforeInsertMu.Lock()
		productionProductBeforeInsertHooks = append(productionProductBeforeInsertHooks, productionProductHook)
		productionProductBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionProductAfterInsertMu.Lock()
		productionProductAfterInsertHooks = append(productionProductAfterInsertHooks, productionProductHook)
		productionProductAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionProductBeforeUpdateMu.Lock()
		productionProductBeforeUpdateHooks = append(productionProductBeforeUpdateHooks, productionProductHook)
		productionProductBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionProductAfterUpdateMu.Lock()
		productionProductAfterUpdateHooks = append(productionProductAfterUpdateHooks, productionProductHook)
		productionProductAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionProductBeforeDeleteMu.Lock()
		productionProductBeforeDeleteHooks = append(productionProductBeforeDeleteHooks, productionProductHook)
		productionProductBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionProductAfterDeleteMu.Lock()
		productionProductAfterDeleteHooks = append(productionProductAfterDeleteHooks, productionProductHook)
		productionProductAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionProductBeforeUpsertMu.Lock()
		productionProductBeforeUpsertHooks = append(productionProductBeforeUpsertHooks, productionProductHook)
		productionProductBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionProductAfterUpsertMu.Lock()
		productionProductAfterUpsertHooks = append(productionProductAfterUpsertHooks, productionProductHook)
		productionProductAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionProduct record from the query using the global executor.
func (q productionProductQuery) OneG(ctx context.Context) (*ProductionProduct, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionProduct record from the query.
func (q productionProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionProduct, error) {
	o := &ProductionProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionProduct records from the query using the global executor.
func (q productionProductQuery) AllG(ctx context.Context) (ProductionProductSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionProduct records from the query.
func (q productionProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionProductSlice, error) {
	var o []*ProductionProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionProduct slice")
	}

	if len(productionProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionProduct records in the query using the global executor
func (q productionProductQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionProduct records in the query.
func (q productionProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_products rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionProductQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_products exists")
	}

	return count > 0, nil
}

// ProductionProducts retrieves all the records using an executor.
func ProductionProducts(mods ...qm.QueryMod) productionProductQuery {
	mods = append(mods, qm.From("\"production_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"production_products\".*"})
	}

	return productionProductQuery{q}
}

// FindProductionProductG retrieves a single record by ID.
func FindProductionProductG(ctx context.Context, iD int64, selectCols ...string) (*ProductionProduct, error) {
	return FindProductionProduct(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductionProduct, error) {
	productionProductObj := &ProductionProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"production_products\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_products")
	}

	if err = productionProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionProductObj, err
	}

	return productionProductObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionProduct) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionProductInsertCacheMut.RLock()
	cache, cached := productionProductInsertCache[key]
	productionProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionProductAllColumns,
			productionProductColumnsWithDefault,
			productionProductColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionProductGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionProductType, productionProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionProductType, productionProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"production_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"production_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_products")
	}

	if !cached {
		productionProductInsertCacheMut.Lock()
		productionProductInsertCache[key] = cache
		productionProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionProduct record using the global executor.
// See Update for more documentation.
func (o *ProductionProduct) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionProductUpdateCacheMut.RLock()
	cache, cached := productionProductUpdateCache[key]
	productionProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionProductAllColumns,
			productionProductPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionProductGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"production_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productionProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionProductType, productionProductMapping, append(wl, productionProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_products")
	}

	if !cached {
		productionProductUpdateCacheMut.Lock()
		productionProductUpdateCache[key] = cache
		productionProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionProductQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_products")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionProductSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"production_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionProduct")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionProduct) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductionProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionProductUpsertCacheMut.RLock()
	cache, cached := productionProductUpsertCache[key]
	productionProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productionProductAllColumns,
			productionProductColumnsWithDefault,
			productionProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productionProductAllColumns,
			productionProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productionProductPrimaryKeyColumns))
			copy(conflict, productionProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"production_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productionProductType, productionProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionProductType, productionProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_products")
	}

	if !cached {
		productionProductUpsertCacheMut.Lock()
		productionProductUpsertCache[key] = cache
		productionProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionProduct record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionProduct) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionProductPrimaryKeyMapping)
	sql := "DELETE FROM \"production_products\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionProductQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_products")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionProductSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"production_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_products")
	}

	if len(productionProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionProduct) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionProduct provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionProductSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionProductSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"production_products\".* FROM \"production_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionProductSlice")
	}

	*o = slice

	return nil
}

// ProductionProductExistsG checks if the ProductionProduct row exists.
func ProductionProductExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductionProductExists(ctx, boil.GetContextDB(), iD)
}

// ProductionProductExists checks if the ProductionProduct row exists.
func ProductionProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"production_products\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_products exists")
	}

	return exists, nil
}

// Exists checks if the ProductionProduct row exists.
func (o *ProductionProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionProductExists(ctx, exec, o.ID)
}
