// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WriteOffProductsPallet is an object representing the database table.
type WriteOffProductsPallet struct {
	ID                 int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDWriteOffProducts null.Int64  `boil:"id_write_off_products" json:"id_write_off_products,omitempty" toml:"id_write_off_products" yaml:"id_write_off_products,omitempty"`
	PalletNumber       null.String `boil:"pallet_number" json:"pallet_number,omitempty" toml:"pallet_number" yaml:"pallet_number,omitempty"`

	R *writeOffProductsPalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L writeOffProductsPalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WriteOffProductsPalletColumns = struct {
	ID                 string
	IDWriteOffProducts string
	PalletNumber       string
}{
	ID:                 "id",
	IDWriteOffProducts: "id_write_off_products",
	PalletNumber:       "pallet_number",
}

var WriteOffProductsPalletTableColumns = struct {
	ID                 string
	IDWriteOffProducts string
	PalletNumber       string
}{
	ID:                 "write_off_products_pallets.id",
	IDWriteOffProducts: "write_off_products_pallets.id_write_off_products",
	PalletNumber:       "write_off_products_pallets.pallet_number",
}

// Generated where

var WriteOffProductsPalletWhere = struct {
	ID                 whereHelperint64
	IDWriteOffProducts whereHelpernull_Int64
	PalletNumber       whereHelpernull_String
}{
	ID:                 whereHelperint64{field: "\"write_off_products_pallets\".\"id\""},
	IDWriteOffProducts: whereHelpernull_Int64{field: "\"write_off_products_pallets\".\"id_write_off_products\""},
	PalletNumber:       whereHelpernull_String{field: "\"write_off_products_pallets\".\"pallet_number\""},
}

// WriteOffProductsPalletRels is where relationship names are stored.
var WriteOffProductsPalletRels = struct {
}{}

// writeOffProductsPalletR is where relationships are stored.
type writeOffProductsPalletR struct {
}

// NewStruct creates a new relationship struct
func (*writeOffProductsPalletR) NewStruct() *writeOffProductsPalletR {
	return &writeOffProductsPalletR{}
}

// writeOffProductsPalletL is where Load methods for each relationship are stored.
type writeOffProductsPalletL struct{}

var (
	writeOffProductsPalletAllColumns            = []string{"id", "id_write_off_products", "pallet_number"}
	writeOffProductsPalletColumnsWithoutDefault = []string{}
	writeOffProductsPalletColumnsWithDefault    = []string{"id", "id_write_off_products", "pallet_number"}
	writeOffProductsPalletPrimaryKeyColumns     = []string{"id"}
	writeOffProductsPalletGeneratedColumns      = []string{"id"}
)

type (
	// WriteOffProductsPalletSlice is an alias for a slice of pointers to WriteOffProductsPallet.
	// This should almost always be used instead of []WriteOffProductsPallet.
	WriteOffProductsPalletSlice []*WriteOffProductsPallet
	// WriteOffProductsPalletHook is the signature for custom WriteOffProductsPallet hook methods
	WriteOffProductsPalletHook func(context.Context, boil.ContextExecutor, *WriteOffProductsPallet) error

	writeOffProductsPalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	writeOffProductsPalletType                 = reflect.TypeOf(&WriteOffProductsPallet{})
	writeOffProductsPalletMapping              = queries.MakeStructMapping(writeOffProductsPalletType)
	writeOffProductsPalletPrimaryKeyMapping, _ = queries.BindMapping(writeOffProductsPalletType, writeOffProductsPalletMapping, writeOffProductsPalletPrimaryKeyColumns)
	writeOffProductsPalletInsertCacheMut       sync.RWMutex
	writeOffProductsPalletInsertCache          = make(map[string]insertCache)
	writeOffProductsPalletUpdateCacheMut       sync.RWMutex
	writeOffProductsPalletUpdateCache          = make(map[string]updateCache)
	writeOffProductsPalletUpsertCacheMut       sync.RWMutex
	writeOffProductsPalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var writeOffProductsPalletAfterSelectMu sync.Mutex
var writeOffProductsPalletAfterSelectHooks []WriteOffProductsPalletHook

var writeOffProductsPalletBeforeInsertMu sync.Mutex
var writeOffProductsPalletBeforeInsertHooks []WriteOffProductsPalletHook
var writeOffProductsPalletAfterInsertMu sync.Mutex
var writeOffProductsPalletAfterInsertHooks []WriteOffProductsPalletHook

var writeOffProductsPalletBeforeUpdateMu sync.Mutex
var writeOffProductsPalletBeforeUpdateHooks []WriteOffProductsPalletHook
var writeOffProductsPalletAfterUpdateMu sync.Mutex
var writeOffProductsPalletAfterUpdateHooks []WriteOffProductsPalletHook

var writeOffProductsPalletBeforeDeleteMu sync.Mutex
var writeOffProductsPalletBeforeDeleteHooks []WriteOffProductsPalletHook
var writeOffProductsPalletAfterDeleteMu sync.Mutex
var writeOffProductsPalletAfterDeleteHooks []WriteOffProductsPalletHook

var writeOffProductsPalletBeforeUpsertMu sync.Mutex
var writeOffProductsPalletBeforeUpsertHooks []WriteOffProductsPalletHook
var writeOffProductsPalletAfterUpsertMu sync.Mutex
var writeOffProductsPalletAfterUpsertHooks []WriteOffProductsPalletHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WriteOffProductsPallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WriteOffProductsPallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WriteOffProductsPallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WriteOffProductsPallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WriteOffProductsPallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WriteOffProductsPallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WriteOffProductsPallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WriteOffProductsPallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WriteOffProductsPallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsPalletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWriteOffProductsPalletHook registers your hook function for all future operations.
func AddWriteOffProductsPalletHook(hookPoint boil.HookPoint, writeOffProductsPalletHook WriteOffProductsPalletHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		writeOffProductsPalletAfterSelectMu.Lock()
		writeOffProductsPalletAfterSelectHooks = append(writeOffProductsPalletAfterSelectHooks, writeOffProductsPalletHook)
		writeOffProductsPalletAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		writeOffProductsPalletBeforeInsertMu.Lock()
		writeOffProductsPalletBeforeInsertHooks = append(writeOffProductsPalletBeforeInsertHooks, writeOffProductsPalletHook)
		writeOffProductsPalletBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		writeOffProductsPalletAfterInsertMu.Lock()
		writeOffProductsPalletAfterInsertHooks = append(writeOffProductsPalletAfterInsertHooks, writeOffProductsPalletHook)
		writeOffProductsPalletAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		writeOffProductsPalletBeforeUpdateMu.Lock()
		writeOffProductsPalletBeforeUpdateHooks = append(writeOffProductsPalletBeforeUpdateHooks, writeOffProductsPalletHook)
		writeOffProductsPalletBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		writeOffProductsPalletAfterUpdateMu.Lock()
		writeOffProductsPalletAfterUpdateHooks = append(writeOffProductsPalletAfterUpdateHooks, writeOffProductsPalletHook)
		writeOffProductsPalletAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		writeOffProductsPalletBeforeDeleteMu.Lock()
		writeOffProductsPalletBeforeDeleteHooks = append(writeOffProductsPalletBeforeDeleteHooks, writeOffProductsPalletHook)
		writeOffProductsPalletBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		writeOffProductsPalletAfterDeleteMu.Lock()
		writeOffProductsPalletAfterDeleteHooks = append(writeOffProductsPalletAfterDeleteHooks, writeOffProductsPalletHook)
		writeOffProductsPalletAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		writeOffProductsPalletBeforeUpsertMu.Lock()
		writeOffProductsPalletBeforeUpsertHooks = append(writeOffProductsPalletBeforeUpsertHooks, writeOffProductsPalletHook)
		writeOffProductsPalletBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		writeOffProductsPalletAfterUpsertMu.Lock()
		writeOffProductsPalletAfterUpsertHooks = append(writeOffProductsPalletAfterUpsertHooks, writeOffProductsPalletHook)
		writeOffProductsPalletAfterUpsertMu.Unlock()
	}
}

// OneG returns a single writeOffProductsPallet record from the query using the global executor.
func (q writeOffProductsPalletQuery) OneG(ctx context.Context) (*WriteOffProductsPallet, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single writeOffProductsPallet record from the query.
func (q writeOffProductsPalletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WriteOffProductsPallet, error) {
	o := &WriteOffProductsPallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for write_off_products_pallets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all WriteOffProductsPallet records from the query using the global executor.
func (q writeOffProductsPalletQuery) AllG(ctx context.Context) (WriteOffProductsPalletSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all WriteOffProductsPallet records from the query.
func (q writeOffProductsPalletQuery) All(ctx context.Context, exec boil.ContextExecutor) (WriteOffProductsPalletSlice, error) {
	var o []*WriteOffProductsPallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to WriteOffProductsPallet slice")
	}

	if len(writeOffProductsPalletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all WriteOffProductsPallet records in the query using the global executor
func (q writeOffProductsPalletQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all WriteOffProductsPallet records in the query.
func (q writeOffProductsPalletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count write_off_products_pallets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q writeOffProductsPalletQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q writeOffProductsPalletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if write_off_products_pallets exists")
	}

	return count > 0, nil
}

// WriteOffProductsPallets retrieves all the records using an executor.
func WriteOffProductsPallets(mods ...qm.QueryMod) writeOffProductsPalletQuery {
	mods = append(mods, qm.From("\"write_off_products_pallets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"write_off_products_pallets\".*"})
	}

	return writeOffProductsPalletQuery{q}
}

// FindWriteOffProductsPalletG retrieves a single record by ID.
func FindWriteOffProductsPalletG(ctx context.Context, iD int64, selectCols ...string) (*WriteOffProductsPallet, error) {
	return FindWriteOffProductsPallet(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindWriteOffProductsPallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWriteOffProductsPallet(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*WriteOffProductsPallet, error) {
	writeOffProductsPalletObj := &WriteOffProductsPallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"write_off_products_pallets\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, writeOffProductsPalletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from write_off_products_pallets")
	}

	if err = writeOffProductsPalletObj.doAfterSelectHooks(ctx, exec); err != nil {
		return writeOffProductsPalletObj, err
	}

	return writeOffProductsPalletObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WriteOffProductsPallet) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WriteOffProductsPallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_products_pallets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffProductsPalletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	writeOffProductsPalletInsertCacheMut.RLock()
	cache, cached := writeOffProductsPalletInsertCache[key]
	writeOffProductsPalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			writeOffProductsPalletAllColumns,
			writeOffProductsPalletColumnsWithDefault,
			writeOffProductsPalletColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, writeOffProductsPalletGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(writeOffProductsPalletType, writeOffProductsPalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(writeOffProductsPalletType, writeOffProductsPalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"write_off_products_pallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"write_off_products_pallets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into write_off_products_pallets")
	}

	if !cached {
		writeOffProductsPalletInsertCacheMut.Lock()
		writeOffProductsPalletInsertCache[key] = cache
		writeOffProductsPalletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single WriteOffProductsPallet record using the global executor.
// See Update for more documentation.
func (o *WriteOffProductsPallet) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the WriteOffProductsPallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WriteOffProductsPallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	writeOffProductsPalletUpdateCacheMut.RLock()
	cache, cached := writeOffProductsPalletUpdateCache[key]
	writeOffProductsPalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			writeOffProductsPalletAllColumns,
			writeOffProductsPalletPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, writeOffProductsPalletGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update write_off_products_pallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"write_off_products_pallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, writeOffProductsPalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(writeOffProductsPalletType, writeOffProductsPalletMapping, append(wl, writeOffProductsPalletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update write_off_products_pallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for write_off_products_pallets")
	}

	if !cached {
		writeOffProductsPalletUpdateCacheMut.Lock()
		writeOffProductsPalletUpdateCache[key] = cache
		writeOffProductsPalletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q writeOffProductsPalletQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q writeOffProductsPalletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for write_off_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for write_off_products_pallets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WriteOffProductsPalletSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WriteOffProductsPalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"write_off_products_pallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffProductsPalletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in writeOffProductsPallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all writeOffProductsPallet")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WriteOffProductsPallet) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WriteOffProductsPallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_products_pallets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffProductsPalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	writeOffProductsPalletUpsertCacheMut.RLock()
	cache, cached := writeOffProductsPalletUpsertCache[key]
	writeOffProductsPalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			writeOffProductsPalletAllColumns,
			writeOffProductsPalletColumnsWithDefault,
			writeOffProductsPalletColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			writeOffProductsPalletAllColumns,
			writeOffProductsPalletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert write_off_products_pallets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(writeOffProductsPalletPrimaryKeyColumns))
			copy(conflict, writeOffProductsPalletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"write_off_products_pallets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(writeOffProductsPalletType, writeOffProductsPalletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(writeOffProductsPalletType, writeOffProductsPalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert write_off_products_pallets")
	}

	if !cached {
		writeOffProductsPalletUpsertCacheMut.Lock()
		writeOffProductsPalletUpsertCache[key] = cache
		writeOffProductsPalletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single WriteOffProductsPallet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WriteOffProductsPallet) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single WriteOffProductsPallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WriteOffProductsPallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no WriteOffProductsPallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), writeOffProductsPalletPrimaryKeyMapping)
	sql := "DELETE FROM \"write_off_products_pallets\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from write_off_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for write_off_products_pallets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q writeOffProductsPalletQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q writeOffProductsPalletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no writeOffProductsPalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from write_off_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_products_pallets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WriteOffProductsPalletSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WriteOffProductsPalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(writeOffProductsPalletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"write_off_products_pallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffProductsPalletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from writeOffProductsPallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_products_pallets")
	}

	if len(writeOffProductsPalletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WriteOffProductsPallet) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no WriteOffProductsPallet provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WriteOffProductsPallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWriteOffProductsPallet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffProductsPalletSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty WriteOffProductsPalletSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffProductsPalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WriteOffProductsPalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"write_off_products_pallets\".* FROM \"write_off_products_pallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, writeOffProductsPalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in WriteOffProductsPalletSlice")
	}

	*o = slice

	return nil
}

// WriteOffProductsPalletExistsG checks if the WriteOffProductsPallet row exists.
func WriteOffProductsPalletExistsG(ctx context.Context, iD int64) (bool, error) {
	return WriteOffProductsPalletExists(ctx, boil.GetContextDB(), iD)
}

// WriteOffProductsPalletExists checks if the WriteOffProductsPallet row exists.
func WriteOffProductsPalletExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"write_off_products_pallets\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if write_off_products_pallets exists")
	}

	return exists, nil
}

// Exists checks if the WriteOffProductsPallet row exists.
func (o *WriteOffProductsPallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WriteOffProductsPalletExists(ctx, exec, o.ID)
}
