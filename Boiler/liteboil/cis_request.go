// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package liteboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CisRequest is an object representing the database table.
type CisRequest struct {
	Cis      string     `boil:"cis" json:"cis" toml:"cis" yaml:"cis"`
	Status   string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Responce null.Bytes `boil:"responce" json:"responce,omitempty" toml:"responce" yaml:"responce,omitempty"`

	R *cisRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cisRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CisRequestColumns = struct {
	Cis      string
	Status   string
	Responce string
}{
	Cis:      "cis",
	Status:   "status",
	Responce: "responce",
}

var CisRequestTableColumns = struct {
	Cis      string
	Status   string
	Responce string
}{
	Cis:      "cis_request.cis",
	Status:   "cis_request.status",
	Responce: "cis_request.responce",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CisRequestWhere = struct {
	Cis      whereHelperstring
	Status   whereHelperstring
	Responce whereHelpernull_Bytes
}{
	Cis:      whereHelperstring{field: "\"cis_request\".\"cis\""},
	Status:   whereHelperstring{field: "\"cis_request\".\"status\""},
	Responce: whereHelpernull_Bytes{field: "\"cis_request\".\"responce\""},
}

// CisRequestRels is where relationship names are stored.
var CisRequestRels = struct {
}{}

// cisRequestR is where relationships are stored.
type cisRequestR struct {
}

// NewStruct creates a new relationship struct
func (*cisRequestR) NewStruct() *cisRequestR {
	return &cisRequestR{}
}

// cisRequestL is where Load methods for each relationship are stored.
type cisRequestL struct{}

var (
	cisRequestAllColumns            = []string{"cis", "status", "responce"}
	cisRequestColumnsWithoutDefault = []string{}
	cisRequestColumnsWithDefault    = []string{"cis", "status", "responce"}
	cisRequestPrimaryKeyColumns     = []string{"cis"}
	cisRequestGeneratedColumns      = []string{}
)

type (
	// CisRequestSlice is an alias for a slice of pointers to CisRequest.
	// This should almost always be used instead of []CisRequest.
	CisRequestSlice []*CisRequest
	// CisRequestHook is the signature for custom CisRequest hook methods
	CisRequestHook func(context.Context, boil.ContextExecutor, *CisRequest) error

	cisRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cisRequestType                 = reflect.TypeOf(&CisRequest{})
	cisRequestMapping              = queries.MakeStructMapping(cisRequestType)
	cisRequestPrimaryKeyMapping, _ = queries.BindMapping(cisRequestType, cisRequestMapping, cisRequestPrimaryKeyColumns)
	cisRequestInsertCacheMut       sync.RWMutex
	cisRequestInsertCache          = make(map[string]insertCache)
	cisRequestUpdateCacheMut       sync.RWMutex
	cisRequestUpdateCache          = make(map[string]updateCache)
	cisRequestUpsertCacheMut       sync.RWMutex
	cisRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cisRequestAfterSelectMu sync.Mutex
var cisRequestAfterSelectHooks []CisRequestHook

var cisRequestBeforeInsertMu sync.Mutex
var cisRequestBeforeInsertHooks []CisRequestHook
var cisRequestAfterInsertMu sync.Mutex
var cisRequestAfterInsertHooks []CisRequestHook

var cisRequestBeforeUpdateMu sync.Mutex
var cisRequestBeforeUpdateHooks []CisRequestHook
var cisRequestAfterUpdateMu sync.Mutex
var cisRequestAfterUpdateHooks []CisRequestHook

var cisRequestBeforeDeleteMu sync.Mutex
var cisRequestBeforeDeleteHooks []CisRequestHook
var cisRequestAfterDeleteMu sync.Mutex
var cisRequestAfterDeleteHooks []CisRequestHook

var cisRequestBeforeUpsertMu sync.Mutex
var cisRequestBeforeUpsertHooks []CisRequestHook
var cisRequestAfterUpsertMu sync.Mutex
var cisRequestAfterUpsertHooks []CisRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CisRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CisRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CisRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CisRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CisRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CisRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CisRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CisRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CisRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cisRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCisRequestHook registers your hook function for all future operations.
func AddCisRequestHook(hookPoint boil.HookPoint, cisRequestHook CisRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cisRequestAfterSelectMu.Lock()
		cisRequestAfterSelectHooks = append(cisRequestAfterSelectHooks, cisRequestHook)
		cisRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cisRequestBeforeInsertMu.Lock()
		cisRequestBeforeInsertHooks = append(cisRequestBeforeInsertHooks, cisRequestHook)
		cisRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cisRequestAfterInsertMu.Lock()
		cisRequestAfterInsertHooks = append(cisRequestAfterInsertHooks, cisRequestHook)
		cisRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cisRequestBeforeUpdateMu.Lock()
		cisRequestBeforeUpdateHooks = append(cisRequestBeforeUpdateHooks, cisRequestHook)
		cisRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cisRequestAfterUpdateMu.Lock()
		cisRequestAfterUpdateHooks = append(cisRequestAfterUpdateHooks, cisRequestHook)
		cisRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cisRequestBeforeDeleteMu.Lock()
		cisRequestBeforeDeleteHooks = append(cisRequestBeforeDeleteHooks, cisRequestHook)
		cisRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cisRequestAfterDeleteMu.Lock()
		cisRequestAfterDeleteHooks = append(cisRequestAfterDeleteHooks, cisRequestHook)
		cisRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cisRequestBeforeUpsertMu.Lock()
		cisRequestBeforeUpsertHooks = append(cisRequestBeforeUpsertHooks, cisRequestHook)
		cisRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cisRequestAfterUpsertMu.Lock()
		cisRequestAfterUpsertHooks = append(cisRequestAfterUpsertHooks, cisRequestHook)
		cisRequestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single cisRequest record from the query using the global executor.
func (q cisRequestQuery) OneG(ctx context.Context) (*CisRequest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cisRequest record from the query.
func (q cisRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CisRequest, error) {
	o := &CisRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "liteboil: failed to execute a one query for cis_request")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CisRequest records from the query using the global executor.
func (q cisRequestQuery) AllG(ctx context.Context) (CisRequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CisRequest records from the query.
func (q cisRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (CisRequestSlice, error) {
	var o []*CisRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "liteboil: failed to assign all query results to CisRequest slice")
	}

	if len(cisRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CisRequest records in the query using the global executor
func (q cisRequestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CisRequest records in the query.
func (q cisRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to count cis_request rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cisRequestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cisRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "liteboil: failed to check if cis_request exists")
	}

	return count > 0, nil
}

// CisRequests retrieves all the records using an executor.
func CisRequests(mods ...qm.QueryMod) cisRequestQuery {
	mods = append(mods, qm.From("\"cis_request\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cis_request\".*"})
	}

	return cisRequestQuery{q}
}

// FindCisRequestG retrieves a single record by ID.
func FindCisRequestG(ctx context.Context, cis string, selectCols ...string) (*CisRequest, error) {
	return FindCisRequest(ctx, boil.GetContextDB(), cis, selectCols...)
}

// FindCisRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCisRequest(ctx context.Context, exec boil.ContextExecutor, cis string, selectCols ...string) (*CisRequest, error) {
	cisRequestObj := &CisRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cis_request\" where \"cis\"=?", sel,
	)

	q := queries.Raw(query, cis)

	err := q.Bind(ctx, exec, cisRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "liteboil: unable to select from cis_request")
	}

	if err = cisRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cisRequestObj, err
	}

	return cisRequestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CisRequest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CisRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("liteboil: no cis_request provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cisRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cisRequestInsertCacheMut.RLock()
	cache, cached := cisRequestInsertCache[key]
	cisRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cisRequestAllColumns,
			cisRequestColumnsWithDefault,
			cisRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cisRequestType, cisRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cisRequestType, cisRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cis_request\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cis_request\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "liteboil: unable to insert into cis_request")
	}

	if !cached {
		cisRequestInsertCacheMut.Lock()
		cisRequestInsertCache[key] = cache
		cisRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CisRequest record using the global executor.
// See Update for more documentation.
func (o *CisRequest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CisRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CisRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cisRequestUpdateCacheMut.RLock()
	cache, cached := cisRequestUpdateCache[key]
	cisRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cisRequestAllColumns,
			cisRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("liteboil: unable to update cis_request, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cis_request\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, cisRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cisRequestType, cisRequestMapping, append(wl, cisRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update cis_request row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by update for cis_request")
	}

	if !cached {
		cisRequestUpdateCacheMut.Lock()
		cisRequestUpdateCache[key] = cache
		cisRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cisRequestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cisRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update all for cis_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to retrieve rows affected for cis_request")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CisRequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CisRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("liteboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cisRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cis_request\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cisRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to update all in cisRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to retrieve rows affected all in update all cisRequest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CisRequest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CisRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("liteboil: no cis_request provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cisRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cisRequestUpsertCacheMut.RLock()
	cache, cached := cisRequestUpsertCache[key]
	cisRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cisRequestAllColumns,
			cisRequestColumnsWithDefault,
			cisRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cisRequestAllColumns,
			cisRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("liteboil: unable to upsert cis_request, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cisRequestPrimaryKeyColumns))
			copy(conflict, cisRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"cis_request\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cisRequestType, cisRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cisRequestType, cisRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "liteboil: unable to upsert cis_request")
	}

	if !cached {
		cisRequestUpsertCacheMut.Lock()
		cisRequestUpsertCache[key] = cache
		cisRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CisRequest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CisRequest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CisRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CisRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("liteboil: no CisRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cisRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"cis_request\" WHERE \"cis\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete from cis_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by delete for cis_request")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cisRequestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cisRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("liteboil: no cisRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete all from cis_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by deleteall for cis_request")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CisRequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CisRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cisRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cisRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cis_request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cisRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: unable to delete all from cisRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "liteboil: failed to get rows affected by deleteall for cis_request")
	}

	if len(cisRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CisRequest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("liteboil: no CisRequest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CisRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCisRequest(ctx, exec, o.Cis)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CisRequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("liteboil: empty CisRequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CisRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CisRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cisRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cis_request\".* FROM \"cis_request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cisRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "liteboil: unable to reload all in CisRequestSlice")
	}

	*o = slice

	return nil
}

// CisRequestExistsG checks if the CisRequest row exists.
func CisRequestExistsG(ctx context.Context, cis string) (bool, error) {
	return CisRequestExists(ctx, boil.GetContextDB(), cis)
}

// CisRequestExists checks if the CisRequest row exists.
func CisRequestExists(ctx context.Context, exec boil.ContextExecutor, cis string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cis_request\" where \"cis\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cis)
	}
	row := exec.QueryRowContext(ctx, sql, cis)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "liteboil: unable to check if cis_request exists")
	}

	return exists, nil
}

// Exists checks if the CisRequest row exists.
func (o *CisRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CisRequestExists(ctx, exec, o.Cis)
}
