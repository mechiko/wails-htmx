// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkCode is an object representing the database table.
type OrderMarkCode struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate          null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	Gtin                null.String `boil:"gtin" json:"gtin,omitempty" toml:"gtin" yaml:"gtin,omitempty"`
	Quantity            null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	SerialNumberType    null.String `boil:"serial_number_type" json:"serial_number_type,omitempty" toml:"serial_number_type" yaml:"serial_number_type,omitempty"`
	TemplateID          null.Int64  `boil:"template_id" json:"template_id,omitempty" toml:"template_id" yaml:"template_id,omitempty"`
	CisType             null.String `boil:"cis_type" json:"cis_type,omitempty" toml:"cis_type" yaml:"cis_type,omitempty"`
	ContactPerson       null.String `boil:"contact_person" json:"contact_person,omitempty" toml:"contact_person" yaml:"contact_person,omitempty"`
	ReleaseMethodType   null.String `boil:"release_method_type" json:"release_method_type,omitempty" toml:"release_method_type" yaml:"release_method_type,omitempty"`
	CreateMethodType    null.String `boil:"create_method_type" json:"create_method_type,omitempty" toml:"create_method_type" yaml:"create_method_type,omitempty"`
	ProductionOrderID   null.String `boil:"production_order_id" json:"production_order_id,omitempty" toml:"production_order_id" yaml:"production_order_id,omitempty"`
	ProductName         null.String `boil:"product_name" json:"product_name,omitempty" toml:"product_name" yaml:"product_name,omitempty"`
	Comment             null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	Version             null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State               null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status              null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	OrderID             null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Archive             null.Int64  `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	JSON                null.String `boil:"json" json:"json,omitempty" toml:"json" yaml:"json,omitempty"`
	ProductCapacity     null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductShelfLife    null.String `boil:"product_shelf_life" json:"product_shelf_life,omitempty" toml:"product_shelf_life" yaml:"product_shelf_life,omitempty"`
	ProductTemplate     null.String `boil:"product_template" json:"product_template,omitempty" toml:"product_template" yaml:"product_template,omitempty"`
	PaymentType         null.String `boil:"payment_type" json:"payment_type,omitempty" toml:"payment_type" yaml:"payment_type,omitempty"`
	ServiceProviderID   null.String `boil:"service_provider_id" json:"service_provider_id,omitempty" toml:"service_provider_id" yaml:"service_provider_id,omitempty"`
	ServiceProviderName null.String `boil:"service_provider_name" json:"service_provider_name,omitempty" toml:"service_provider_name" yaml:"service_provider_name,omitempty"`
	ServiceProviderRole null.String `boil:"service_provider_role" json:"service_provider_role,omitempty" toml:"service_provider_role" yaml:"service_provider_role,omitempty"`

	R *orderMarkCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkCodeColumns = struct {
	ID                  string
	CreateDate          string
	Gtin                string
	Quantity            string
	SerialNumberType    string
	TemplateID          string
	CisType             string
	ContactPerson       string
	ReleaseMethodType   string
	CreateMethodType    string
	ProductionOrderID   string
	ProductName         string
	Comment             string
	Version             string
	State               string
	Status              string
	OrderID             string
	Archive             string
	JSON                string
	ProductCapacity     string
	ProductShelfLife    string
	ProductTemplate     string
	PaymentType         string
	ServiceProviderID   string
	ServiceProviderName string
	ServiceProviderRole string
}{
	ID:                  "id",
	CreateDate:          "create_date",
	Gtin:                "gtin",
	Quantity:            "quantity",
	SerialNumberType:    "serial_number_type",
	TemplateID:          "template_id",
	CisType:             "cis_type",
	ContactPerson:       "contact_person",
	ReleaseMethodType:   "release_method_type",
	CreateMethodType:    "create_method_type",
	ProductionOrderID:   "production_order_id",
	ProductName:         "product_name",
	Comment:             "comment",
	Version:             "version",
	State:               "state",
	Status:              "status",
	OrderID:             "order_id",
	Archive:             "archive",
	JSON:                "json",
	ProductCapacity:     "product_capacity",
	ProductShelfLife:    "product_shelf_life",
	ProductTemplate:     "product_template",
	PaymentType:         "payment_type",
	ServiceProviderID:   "service_provider_id",
	ServiceProviderName: "service_provider_name",
	ServiceProviderRole: "service_provider_role",
}

var OrderMarkCodeTableColumns = struct {
	ID                  string
	CreateDate          string
	Gtin                string
	Quantity            string
	SerialNumberType    string
	TemplateID          string
	CisType             string
	ContactPerson       string
	ReleaseMethodType   string
	CreateMethodType    string
	ProductionOrderID   string
	ProductName         string
	Comment             string
	Version             string
	State               string
	Status              string
	OrderID             string
	Archive             string
	JSON                string
	ProductCapacity     string
	ProductShelfLife    string
	ProductTemplate     string
	PaymentType         string
	ServiceProviderID   string
	ServiceProviderName string
	ServiceProviderRole string
}{
	ID:                  "order_mark_codes.id",
	CreateDate:          "order_mark_codes.create_date",
	Gtin:                "order_mark_codes.gtin",
	Quantity:            "order_mark_codes.quantity",
	SerialNumberType:    "order_mark_codes.serial_number_type",
	TemplateID:          "order_mark_codes.template_id",
	CisType:             "order_mark_codes.cis_type",
	ContactPerson:       "order_mark_codes.contact_person",
	ReleaseMethodType:   "order_mark_codes.release_method_type",
	CreateMethodType:    "order_mark_codes.create_method_type",
	ProductionOrderID:   "order_mark_codes.production_order_id",
	ProductName:         "order_mark_codes.product_name",
	Comment:             "order_mark_codes.comment",
	Version:             "order_mark_codes.version",
	State:               "order_mark_codes.state",
	Status:              "order_mark_codes.status",
	OrderID:             "order_mark_codes.order_id",
	Archive:             "order_mark_codes.archive",
	JSON:                "order_mark_codes.json",
	ProductCapacity:     "order_mark_codes.product_capacity",
	ProductShelfLife:    "order_mark_codes.product_shelf_life",
	ProductTemplate:     "order_mark_codes.product_template",
	PaymentType:         "order_mark_codes.payment_type",
	ServiceProviderID:   "order_mark_codes.service_provider_id",
	ServiceProviderName: "order_mark_codes.service_provider_name",
	ServiceProviderRole: "order_mark_codes.service_provider_role",
}

// Generated where

var OrderMarkCodeWhere = struct {
	ID                  whereHelperint64
	CreateDate          whereHelpernull_String
	Gtin                whereHelpernull_String
	Quantity            whereHelpernull_Int64
	SerialNumberType    whereHelpernull_String
	TemplateID          whereHelpernull_Int64
	CisType             whereHelpernull_String
	ContactPerson       whereHelpernull_String
	ReleaseMethodType   whereHelpernull_String
	CreateMethodType    whereHelpernull_String
	ProductionOrderID   whereHelpernull_String
	ProductName         whereHelpernull_String
	Comment             whereHelpernull_String
	Version             whereHelpernull_String
	State               whereHelpernull_String
	Status              whereHelpernull_String
	OrderID             whereHelpernull_String
	Archive             whereHelpernull_Int64
	JSON                whereHelpernull_String
	ProductCapacity     whereHelpernull_String
	ProductShelfLife    whereHelpernull_String
	ProductTemplate     whereHelpernull_String
	PaymentType         whereHelpernull_String
	ServiceProviderID   whereHelpernull_String
	ServiceProviderName whereHelpernull_String
	ServiceProviderRole whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"order_mark_codes\".\"id\""},
	CreateDate:          whereHelpernull_String{field: "\"order_mark_codes\".\"create_date\""},
	Gtin:                whereHelpernull_String{field: "\"order_mark_codes\".\"gtin\""},
	Quantity:            whereHelpernull_Int64{field: "\"order_mark_codes\".\"quantity\""},
	SerialNumberType:    whereHelpernull_String{field: "\"order_mark_codes\".\"serial_number_type\""},
	TemplateID:          whereHelpernull_Int64{field: "\"order_mark_codes\".\"template_id\""},
	CisType:             whereHelpernull_String{field: "\"order_mark_codes\".\"cis_type\""},
	ContactPerson:       whereHelpernull_String{field: "\"order_mark_codes\".\"contact_person\""},
	ReleaseMethodType:   whereHelpernull_String{field: "\"order_mark_codes\".\"release_method_type\""},
	CreateMethodType:    whereHelpernull_String{field: "\"order_mark_codes\".\"create_method_type\""},
	ProductionOrderID:   whereHelpernull_String{field: "\"order_mark_codes\".\"production_order_id\""},
	ProductName:         whereHelpernull_String{field: "\"order_mark_codes\".\"product_name\""},
	Comment:             whereHelpernull_String{field: "\"order_mark_codes\".\"comment\""},
	Version:             whereHelpernull_String{field: "\"order_mark_codes\".\"version\""},
	State:               whereHelpernull_String{field: "\"order_mark_codes\".\"state\""},
	Status:              whereHelpernull_String{field: "\"order_mark_codes\".\"status\""},
	OrderID:             whereHelpernull_String{field: "\"order_mark_codes\".\"order_id\""},
	Archive:             whereHelpernull_Int64{field: "\"order_mark_codes\".\"archive\""},
	JSON:                whereHelpernull_String{field: "\"order_mark_codes\".\"json\""},
	ProductCapacity:     whereHelpernull_String{field: "\"order_mark_codes\".\"product_capacity\""},
	ProductShelfLife:    whereHelpernull_String{field: "\"order_mark_codes\".\"product_shelf_life\""},
	ProductTemplate:     whereHelpernull_String{field: "\"order_mark_codes\".\"product_template\""},
	PaymentType:         whereHelpernull_String{field: "\"order_mark_codes\".\"payment_type\""},
	ServiceProviderID:   whereHelpernull_String{field: "\"order_mark_codes\".\"service_provider_id\""},
	ServiceProviderName: whereHelpernull_String{field: "\"order_mark_codes\".\"service_provider_name\""},
	ServiceProviderRole: whereHelpernull_String{field: "\"order_mark_codes\".\"service_provider_role\""},
}

// OrderMarkCodeRels is where relationship names are stored.
var OrderMarkCodeRels = struct {
}{}

// orderMarkCodeR is where relationships are stored.
type orderMarkCodeR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkCodeR) NewStruct() *orderMarkCodeR {
	return &orderMarkCodeR{}
}

// orderMarkCodeL is where Load methods for each relationship are stored.
type orderMarkCodeL struct{}

var (
	orderMarkCodeAllColumns            = []string{"id", "create_date", "gtin", "quantity", "serial_number_type", "template_id", "cis_type", "contact_person", "release_method_type", "create_method_type", "production_order_id", "product_name", "comment", "version", "state", "status", "order_id", "archive", "json", "product_capacity", "product_shelf_life", "product_template", "payment_type", "service_provider_id", "service_provider_name", "service_provider_role"}
	orderMarkCodeColumnsWithoutDefault = []string{}
	orderMarkCodeColumnsWithDefault    = []string{"id", "create_date", "gtin", "quantity", "serial_number_type", "template_id", "cis_type", "contact_person", "release_method_type", "create_method_type", "production_order_id", "product_name", "comment", "version", "state", "status", "order_id", "archive", "json", "product_capacity", "product_shelf_life", "product_template", "payment_type", "service_provider_id", "service_provider_name", "service_provider_role"}
	orderMarkCodePrimaryKeyColumns     = []string{"id"}
	orderMarkCodeGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkCodeSlice is an alias for a slice of pointers to OrderMarkCode.
	// This should almost always be used instead of []OrderMarkCode.
	OrderMarkCodeSlice []*OrderMarkCode
	// OrderMarkCodeHook is the signature for custom OrderMarkCode hook methods
	OrderMarkCodeHook func(context.Context, boil.ContextExecutor, *OrderMarkCode) error

	orderMarkCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkCodeType                 = reflect.TypeOf(&OrderMarkCode{})
	orderMarkCodeMapping              = queries.MakeStructMapping(orderMarkCodeType)
	orderMarkCodePrimaryKeyMapping, _ = queries.BindMapping(orderMarkCodeType, orderMarkCodeMapping, orderMarkCodePrimaryKeyColumns)
	orderMarkCodeInsertCacheMut       sync.RWMutex
	orderMarkCodeInsertCache          = make(map[string]insertCache)
	orderMarkCodeUpdateCacheMut       sync.RWMutex
	orderMarkCodeUpdateCache          = make(map[string]updateCache)
	orderMarkCodeUpsertCacheMut       sync.RWMutex
	orderMarkCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkCodeAfterSelectMu sync.Mutex
var orderMarkCodeAfterSelectHooks []OrderMarkCodeHook

var orderMarkCodeBeforeInsertMu sync.Mutex
var orderMarkCodeBeforeInsertHooks []OrderMarkCodeHook
var orderMarkCodeAfterInsertMu sync.Mutex
var orderMarkCodeAfterInsertHooks []OrderMarkCodeHook

var orderMarkCodeBeforeUpdateMu sync.Mutex
var orderMarkCodeBeforeUpdateHooks []OrderMarkCodeHook
var orderMarkCodeAfterUpdateMu sync.Mutex
var orderMarkCodeAfterUpdateHooks []OrderMarkCodeHook

var orderMarkCodeBeforeDeleteMu sync.Mutex
var orderMarkCodeBeforeDeleteHooks []OrderMarkCodeHook
var orderMarkCodeAfterDeleteMu sync.Mutex
var orderMarkCodeAfterDeleteHooks []OrderMarkCodeHook

var orderMarkCodeBeforeUpsertMu sync.Mutex
var orderMarkCodeBeforeUpsertHooks []OrderMarkCodeHook
var orderMarkCodeAfterUpsertMu sync.Mutex
var orderMarkCodeAfterUpsertHooks []OrderMarkCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkCodeHook registers your hook function for all future operations.
func AddOrderMarkCodeHook(hookPoint boil.HookPoint, orderMarkCodeHook OrderMarkCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkCodeAfterSelectMu.Lock()
		orderMarkCodeAfterSelectHooks = append(orderMarkCodeAfterSelectHooks, orderMarkCodeHook)
		orderMarkCodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkCodeBeforeInsertMu.Lock()
		orderMarkCodeBeforeInsertHooks = append(orderMarkCodeBeforeInsertHooks, orderMarkCodeHook)
		orderMarkCodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkCodeAfterInsertMu.Lock()
		orderMarkCodeAfterInsertHooks = append(orderMarkCodeAfterInsertHooks, orderMarkCodeHook)
		orderMarkCodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkCodeBeforeUpdateMu.Lock()
		orderMarkCodeBeforeUpdateHooks = append(orderMarkCodeBeforeUpdateHooks, orderMarkCodeHook)
		orderMarkCodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkCodeAfterUpdateMu.Lock()
		orderMarkCodeAfterUpdateHooks = append(orderMarkCodeAfterUpdateHooks, orderMarkCodeHook)
		orderMarkCodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkCodeBeforeDeleteMu.Lock()
		orderMarkCodeBeforeDeleteHooks = append(orderMarkCodeBeforeDeleteHooks, orderMarkCodeHook)
		orderMarkCodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkCodeAfterDeleteMu.Lock()
		orderMarkCodeAfterDeleteHooks = append(orderMarkCodeAfterDeleteHooks, orderMarkCodeHook)
		orderMarkCodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkCodeBeforeUpsertMu.Lock()
		orderMarkCodeBeforeUpsertHooks = append(orderMarkCodeBeforeUpsertHooks, orderMarkCodeHook)
		orderMarkCodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkCodeAfterUpsertMu.Lock()
		orderMarkCodeAfterUpsertHooks = append(orderMarkCodeAfterUpsertHooks, orderMarkCodeHook)
		orderMarkCodeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkCode record from the query using the global executor.
func (q orderMarkCodeQuery) OneG(ctx context.Context) (*OrderMarkCode, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkCode record from the query.
func (q orderMarkCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkCode, error) {
	o := &OrderMarkCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkCode records from the query using the global executor.
func (q orderMarkCodeQuery) AllG(ctx context.Context) (OrderMarkCodeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkCode records from the query.
func (q orderMarkCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkCodeSlice, error) {
	var o []*OrderMarkCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkCode slice")
	}

	if len(orderMarkCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkCode records in the query using the global executor
func (q orderMarkCodeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkCode records in the query.
func (q orderMarkCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_codes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkCodeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_codes exists")
	}

	return count > 0, nil
}

// OrderMarkCodes retrieves all the records using an executor.
func OrderMarkCodes(mods ...qm.QueryMod) orderMarkCodeQuery {
	mods = append(mods, qm.From("\"order_mark_codes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_mark_codes\".*"})
	}

	return orderMarkCodeQuery{q}
}

// FindOrderMarkCodeG retrieves a single record by ID.
func FindOrderMarkCodeG(ctx context.Context, iD int64, selectCols ...string) (*OrderMarkCode, error) {
	return FindOrderMarkCode(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkCode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderMarkCode, error) {
	orderMarkCodeObj := &OrderMarkCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_mark_codes\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_codes")
	}

	if err = orderMarkCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkCodeObj, err
	}

	return orderMarkCodeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkCode) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkCodeInsertCacheMut.RLock()
	cache, cached := orderMarkCodeInsertCache[key]
	orderMarkCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkCodeAllColumns,
			orderMarkCodeColumnsWithDefault,
			orderMarkCodeColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkCodeGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkCodeType, orderMarkCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkCodeType, orderMarkCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_mark_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_mark_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_codes")
	}

	if !cached {
		orderMarkCodeInsertCacheMut.Lock()
		orderMarkCodeInsertCache[key] = cache
		orderMarkCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkCode record using the global executor.
// See Update for more documentation.
func (o *OrderMarkCode) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkCodeUpdateCacheMut.RLock()
	cache, cached := orderMarkCodeUpdateCache[key]
	orderMarkCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkCodeAllColumns,
			orderMarkCodePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkCodeGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_mark_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderMarkCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkCodeType, orderMarkCodeMapping, append(wl, orderMarkCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_codes")
	}

	if !cached {
		orderMarkCodeUpdateCacheMut.Lock()
		orderMarkCodeUpdateCache[key] = cache
		orderMarkCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkCodeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_codes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkCodeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_mark_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkCode")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkCode) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderMarkCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkCodeUpsertCacheMut.RLock()
	cache, cached := orderMarkCodeUpsertCache[key]
	orderMarkCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderMarkCodeAllColumns,
			orderMarkCodeColumnsWithDefault,
			orderMarkCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderMarkCodeAllColumns,
			orderMarkCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_codes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderMarkCodePrimaryKeyColumns))
			copy(conflict, orderMarkCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_mark_codes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderMarkCodeType, orderMarkCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkCodeType, orderMarkCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_codes")
	}

	if !cached {
		orderMarkCodeUpsertCacheMut.Lock()
		orderMarkCodeUpsertCache[key] = cache
		orderMarkCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkCode record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkCode) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkCodePrimaryKeyMapping)
	sql := "DELETE FROM \"order_mark_codes\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkCodeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_codes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkCodeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_mark_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_codes")
	}

	if len(orderMarkCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkCode) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkCode provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCodeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkCodeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_mark_codes\".* FROM \"order_mark_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkCodeSlice")
	}

	*o = slice

	return nil
}

// OrderMarkCodeExistsG checks if the OrderMarkCode row exists.
func OrderMarkCodeExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrderMarkCodeExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkCodeExists checks if the OrderMarkCode row exists.
func OrderMarkCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_mark_codes\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_codes exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkCode row exists.
func (o *OrderMarkCode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkCodeExists(ctx, exec, o.ID)
}
