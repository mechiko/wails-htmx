// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductCardsGtin is an object representing the database table.
type ProductCardsGtin struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductCards null.Int64  `boil:"id_product_cards" json:"id_product_cards,omitempty" toml:"id_product_cards" yaml:"id_product_cards,omitempty"`
	Gtin           null.String `boil:"gtin" json:"gtin,omitempty" toml:"gtin" yaml:"gtin,omitempty"`
	Quantity       null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`

	R *productCardsGtinR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productCardsGtinL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductCardsGtinColumns = struct {
	ID             string
	IDProductCards string
	Gtin           string
	Quantity       string
}{
	ID:             "id",
	IDProductCards: "id_product_cards",
	Gtin:           "gtin",
	Quantity:       "quantity",
}

var ProductCardsGtinTableColumns = struct {
	ID             string
	IDProductCards string
	Gtin           string
	Quantity       string
}{
	ID:             "product_cards_gtins.id",
	IDProductCards: "product_cards_gtins.id_product_cards",
	Gtin:           "product_cards_gtins.gtin",
	Quantity:       "product_cards_gtins.quantity",
}

// Generated where

var ProductCardsGtinWhere = struct {
	ID             whereHelperint64
	IDProductCards whereHelpernull_Int64
	Gtin           whereHelpernull_String
	Quantity       whereHelpernull_Int64
}{
	ID:             whereHelperint64{field: "\"product_cards_gtins\".\"id\""},
	IDProductCards: whereHelpernull_Int64{field: "\"product_cards_gtins\".\"id_product_cards\""},
	Gtin:           whereHelpernull_String{field: "\"product_cards_gtins\".\"gtin\""},
	Quantity:       whereHelpernull_Int64{field: "\"product_cards_gtins\".\"quantity\""},
}

// ProductCardsGtinRels is where relationship names are stored.
var ProductCardsGtinRels = struct {
}{}

// productCardsGtinR is where relationships are stored.
type productCardsGtinR struct {
}

// NewStruct creates a new relationship struct
func (*productCardsGtinR) NewStruct() *productCardsGtinR {
	return &productCardsGtinR{}
}

// productCardsGtinL is where Load methods for each relationship are stored.
type productCardsGtinL struct{}

var (
	productCardsGtinAllColumns            = []string{"id", "id_product_cards", "gtin", "quantity"}
	productCardsGtinColumnsWithoutDefault = []string{}
	productCardsGtinColumnsWithDefault    = []string{"id", "id_product_cards", "gtin", "quantity"}
	productCardsGtinPrimaryKeyColumns     = []string{"id"}
	productCardsGtinGeneratedColumns      = []string{"id"}
)

type (
	// ProductCardsGtinSlice is an alias for a slice of pointers to ProductCardsGtin.
	// This should almost always be used instead of []ProductCardsGtin.
	ProductCardsGtinSlice []*ProductCardsGtin
	// ProductCardsGtinHook is the signature for custom ProductCardsGtin hook methods
	ProductCardsGtinHook func(context.Context, boil.ContextExecutor, *ProductCardsGtin) error

	productCardsGtinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productCardsGtinType                 = reflect.TypeOf(&ProductCardsGtin{})
	productCardsGtinMapping              = queries.MakeStructMapping(productCardsGtinType)
	productCardsGtinPrimaryKeyMapping, _ = queries.BindMapping(productCardsGtinType, productCardsGtinMapping, productCardsGtinPrimaryKeyColumns)
	productCardsGtinInsertCacheMut       sync.RWMutex
	productCardsGtinInsertCache          = make(map[string]insertCache)
	productCardsGtinUpdateCacheMut       sync.RWMutex
	productCardsGtinUpdateCache          = make(map[string]updateCache)
	productCardsGtinUpsertCacheMut       sync.RWMutex
	productCardsGtinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productCardsGtinAfterSelectMu sync.Mutex
var productCardsGtinAfterSelectHooks []ProductCardsGtinHook

var productCardsGtinBeforeInsertMu sync.Mutex
var productCardsGtinBeforeInsertHooks []ProductCardsGtinHook
var productCardsGtinAfterInsertMu sync.Mutex
var productCardsGtinAfterInsertHooks []ProductCardsGtinHook

var productCardsGtinBeforeUpdateMu sync.Mutex
var productCardsGtinBeforeUpdateHooks []ProductCardsGtinHook
var productCardsGtinAfterUpdateMu sync.Mutex
var productCardsGtinAfterUpdateHooks []ProductCardsGtinHook

var productCardsGtinBeforeDeleteMu sync.Mutex
var productCardsGtinBeforeDeleteHooks []ProductCardsGtinHook
var productCardsGtinAfterDeleteMu sync.Mutex
var productCardsGtinAfterDeleteHooks []ProductCardsGtinHook

var productCardsGtinBeforeUpsertMu sync.Mutex
var productCardsGtinBeforeUpsertHooks []ProductCardsGtinHook
var productCardsGtinAfterUpsertMu sync.Mutex
var productCardsGtinAfterUpsertHooks []ProductCardsGtinHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductCardsGtin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductCardsGtin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductCardsGtin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductCardsGtin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductCardsGtin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductCardsGtin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductCardsGtin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductCardsGtin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductCardsGtin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsGtinAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductCardsGtinHook registers your hook function for all future operations.
func AddProductCardsGtinHook(hookPoint boil.HookPoint, productCardsGtinHook ProductCardsGtinHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productCardsGtinAfterSelectMu.Lock()
		productCardsGtinAfterSelectHooks = append(productCardsGtinAfterSelectHooks, productCardsGtinHook)
		productCardsGtinAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productCardsGtinBeforeInsertMu.Lock()
		productCardsGtinBeforeInsertHooks = append(productCardsGtinBeforeInsertHooks, productCardsGtinHook)
		productCardsGtinBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productCardsGtinAfterInsertMu.Lock()
		productCardsGtinAfterInsertHooks = append(productCardsGtinAfterInsertHooks, productCardsGtinHook)
		productCardsGtinAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productCardsGtinBeforeUpdateMu.Lock()
		productCardsGtinBeforeUpdateHooks = append(productCardsGtinBeforeUpdateHooks, productCardsGtinHook)
		productCardsGtinBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productCardsGtinAfterUpdateMu.Lock()
		productCardsGtinAfterUpdateHooks = append(productCardsGtinAfterUpdateHooks, productCardsGtinHook)
		productCardsGtinAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productCardsGtinBeforeDeleteMu.Lock()
		productCardsGtinBeforeDeleteHooks = append(productCardsGtinBeforeDeleteHooks, productCardsGtinHook)
		productCardsGtinBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productCardsGtinAfterDeleteMu.Lock()
		productCardsGtinAfterDeleteHooks = append(productCardsGtinAfterDeleteHooks, productCardsGtinHook)
		productCardsGtinAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productCardsGtinBeforeUpsertMu.Lock()
		productCardsGtinBeforeUpsertHooks = append(productCardsGtinBeforeUpsertHooks, productCardsGtinHook)
		productCardsGtinBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productCardsGtinAfterUpsertMu.Lock()
		productCardsGtinAfterUpsertHooks = append(productCardsGtinAfterUpsertHooks, productCardsGtinHook)
		productCardsGtinAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productCardsGtin record from the query using the global executor.
func (q productCardsGtinQuery) OneG(ctx context.Context) (*ProductCardsGtin, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productCardsGtin record from the query.
func (q productCardsGtinQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductCardsGtin, error) {
	o := &ProductCardsGtin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for product_cards_gtins")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductCardsGtin records from the query using the global executor.
func (q productCardsGtinQuery) AllG(ctx context.Context) (ProductCardsGtinSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductCardsGtin records from the query.
func (q productCardsGtinQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductCardsGtinSlice, error) {
	var o []*ProductCardsGtin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to ProductCardsGtin slice")
	}

	if len(productCardsGtinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductCardsGtin records in the query using the global executor
func (q productCardsGtinQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductCardsGtin records in the query.
func (q productCardsGtinQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count product_cards_gtins rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productCardsGtinQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productCardsGtinQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if product_cards_gtins exists")
	}

	return count > 0, nil
}

// ProductCardsGtins retrieves all the records using an executor.
func ProductCardsGtins(mods ...qm.QueryMod) productCardsGtinQuery {
	mods = append(mods, qm.From("\"product_cards_gtins\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_cards_gtins\".*"})
	}

	return productCardsGtinQuery{q}
}

// FindProductCardsGtinG retrieves a single record by ID.
func FindProductCardsGtinG(ctx context.Context, iD int64, selectCols ...string) (*ProductCardsGtin, error) {
	return FindProductCardsGtin(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductCardsGtin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductCardsGtin(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductCardsGtin, error) {
	productCardsGtinObj := &ProductCardsGtin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_cards_gtins\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productCardsGtinObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from product_cards_gtins")
	}

	if err = productCardsGtinObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productCardsGtinObj, err
	}

	return productCardsGtinObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductCardsGtin) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductCardsGtin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_cards_gtins provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCardsGtinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productCardsGtinInsertCacheMut.RLock()
	cache, cached := productCardsGtinInsertCache[key]
	productCardsGtinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productCardsGtinAllColumns,
			productCardsGtinColumnsWithDefault,
			productCardsGtinColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productCardsGtinGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productCardsGtinType, productCardsGtinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productCardsGtinType, productCardsGtinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_cards_gtins\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_cards_gtins\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into product_cards_gtins")
	}

	if !cached {
		productCardsGtinInsertCacheMut.Lock()
		productCardsGtinInsertCache[key] = cache
		productCardsGtinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductCardsGtin record using the global executor.
// See Update for more documentation.
func (o *ProductCardsGtin) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductCardsGtin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductCardsGtin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productCardsGtinUpdateCacheMut.RLock()
	cache, cached := productCardsGtinUpdateCache[key]
	productCardsGtinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productCardsGtinAllColumns,
			productCardsGtinPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productCardsGtinGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update product_cards_gtins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_cards_gtins\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productCardsGtinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productCardsGtinType, productCardsGtinMapping, append(wl, productCardsGtinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update product_cards_gtins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for product_cards_gtins")
	}

	if !cached {
		productCardsGtinUpdateCacheMut.Lock()
		productCardsGtinUpdateCache[key] = cache
		productCardsGtinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productCardsGtinQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productCardsGtinQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for product_cards_gtins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for product_cards_gtins")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductCardsGtinSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductCardsGtinSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsGtinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_cards_gtins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productCardsGtinPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in productCardsGtin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all productCardsGtin")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductCardsGtin) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductCardsGtin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_cards_gtins provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCardsGtinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productCardsGtinUpsertCacheMut.RLock()
	cache, cached := productCardsGtinUpsertCache[key]
	productCardsGtinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productCardsGtinAllColumns,
			productCardsGtinColumnsWithDefault,
			productCardsGtinColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productCardsGtinAllColumns,
			productCardsGtinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert product_cards_gtins, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productCardsGtinPrimaryKeyColumns))
			copy(conflict, productCardsGtinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"product_cards_gtins\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productCardsGtinType, productCardsGtinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productCardsGtinType, productCardsGtinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert product_cards_gtins")
	}

	if !cached {
		productCardsGtinUpsertCacheMut.Lock()
		productCardsGtinUpsertCache[key] = cache
		productCardsGtinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductCardsGtin record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductCardsGtin) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductCardsGtin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductCardsGtin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no ProductCardsGtin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productCardsGtinPrimaryKeyMapping)
	sql := "DELETE FROM \"product_cards_gtins\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from product_cards_gtins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for product_cards_gtins")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productCardsGtinQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productCardsGtinQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no productCardsGtinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from product_cards_gtins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_cards_gtins")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductCardsGtinSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductCardsGtinSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productCardsGtinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsGtinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_cards_gtins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productCardsGtinPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from productCardsGtin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_cards_gtins")
	}

	if len(productCardsGtinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductCardsGtin) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no ProductCardsGtin provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductCardsGtin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductCardsGtin(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCardsGtinSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty ProductCardsGtinSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCardsGtinSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductCardsGtinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsGtinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_cards_gtins\".* FROM \"product_cards_gtins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productCardsGtinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in ProductCardsGtinSlice")
	}

	*o = slice

	return nil
}

// ProductCardsGtinExistsG checks if the ProductCardsGtin row exists.
func ProductCardsGtinExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductCardsGtinExists(ctx, boil.GetContextDB(), iD)
}

// ProductCardsGtinExists checks if the ProductCardsGtin row exists.
func ProductCardsGtinExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_cards_gtins\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if product_cards_gtins exists")
	}

	return exists, nil
}

// Exists checks if the ProductCardsGtin row exists.
func (o *ProductCardsGtin) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductCardsGtinExists(ctx, exec, o.ID)
}
