# set shell := ["pwsh", "", "-CommandWithArgs"]
# set positional-arguments
shebang := 'pwsh.exe'
# Variables
db_path := "db.sqlite"
migrations_dir := "migrations"
css_input := "tailwind.css"
css_output := "embeded/root/assets/css/tailwind.css"
dev_port := "4000"
browser_sync_port := "4001"

win32:
    #!{{shebang}}
    $env:Path = "C:\Go\32\120\bin;C:\go\gcc\mingw32\bin;" + $env:Path
    $env:GOARCH = "386"
    $env:GOOS = "windows"
    $env:CGO_ENABLED = 1
    go version
    Set-Content -Path go.mod -Value (get-content -Path go.mod | Select-String -Pattern 'toolchain' -NotMatch)
    go mod tidy -go 1.20 -v
    if(-Not $?) { exit }
    rm ..\dist\stats32.exe, ..\dist\stats_32.exe 2>$null
    go build -ldflags="-s -w -X 'firstwails/domain.Mode=production'" -o ../dist/stats_32.exe ./cmd/alcogo
    if(-Not $?) { exit }
    upx --force-overwrite -o ../dist/stats32.exe ../dist/stats_32.exe

win64:
    #!{{shebang}}
    $env:Path = "C:\Go\go.1235\bin;C:\go\gcc\mingw32\bin;" + $env:Path
    $env:GOARCH = "amd64"
    $env:GOOS = "windows"
    $env:CGO_ENABLED = 1
    go mod tidy -go 1.23 -v
    if(-Not $?) { exit }
    rm ..\dist\stats.exe, ..\dist\stats_64.exe 2>$null
    go build -ldflags="-s -w -X 'firstwails/domain.Mode=production'" -o ../dist/stats_64.exe ./cmd/alcogo
    if(-Not $?) { exit }
    upx --force-overwrite -o ../dist/stats.exe ../dist/stats_64.exe
