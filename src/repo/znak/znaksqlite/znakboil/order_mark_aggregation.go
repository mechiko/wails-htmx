// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkAggregation is an object representing the database table.
type OrderMarkAggregation struct {
	ID                      int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate              null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	Inn                     null.String `boil:"inn" json:"inn,omitempty" toml:"inn" yaml:"inn,omitempty"`
	UnitSerialNumber        null.String `boil:"unit_serial_number" json:"unit_serial_number,omitempty" toml:"unit_serial_number" yaml:"unit_serial_number,omitempty"`
	AggregationUnitCapacity null.String `boil:"aggregation_unit_capacity" json:"aggregation_unit_capacity,omitempty" toml:"aggregation_unit_capacity" yaml:"aggregation_unit_capacity,omitempty"`
	AggregatedItemsCount    null.String `boil:"aggregated_items_count" json:"aggregated_items_count,omitempty" toml:"aggregated_items_count" yaml:"aggregated_items_count,omitempty"`
	AggregationType         null.String `boil:"aggregation_type" json:"aggregation_type,omitempty" toml:"aggregation_type" yaml:"aggregation_type,omitempty"`
	Version                 null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State                   null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status                  null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	OrderID                 null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Archive                 null.Int64  `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	JSON                    null.String `boil:"json" json:"json,omitempty" toml:"json" yaml:"json,omitempty"`

	R *orderMarkAggregationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkAggregationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkAggregationColumns = struct {
	ID                      string
	CreateDate              string
	Inn                     string
	UnitSerialNumber        string
	AggregationUnitCapacity string
	AggregatedItemsCount    string
	AggregationType         string
	Version                 string
	State                   string
	Status                  string
	OrderID                 string
	Archive                 string
	JSON                    string
}{
	ID:                      "id",
	CreateDate:              "create_date",
	Inn:                     "inn",
	UnitSerialNumber:        "unit_serial_number",
	AggregationUnitCapacity: "aggregation_unit_capacity",
	AggregatedItemsCount:    "aggregated_items_count",
	AggregationType:         "aggregation_type",
	Version:                 "version",
	State:                   "state",
	Status:                  "status",
	OrderID:                 "order_id",
	Archive:                 "archive",
	JSON:                    "json",
}

var OrderMarkAggregationTableColumns = struct {
	ID                      string
	CreateDate              string
	Inn                     string
	UnitSerialNumber        string
	AggregationUnitCapacity string
	AggregatedItemsCount    string
	AggregationType         string
	Version                 string
	State                   string
	Status                  string
	OrderID                 string
	Archive                 string
	JSON                    string
}{
	ID:                      "order_mark_aggregation.id",
	CreateDate:              "order_mark_aggregation.create_date",
	Inn:                     "order_mark_aggregation.inn",
	UnitSerialNumber:        "order_mark_aggregation.unit_serial_number",
	AggregationUnitCapacity: "order_mark_aggregation.aggregation_unit_capacity",
	AggregatedItemsCount:    "order_mark_aggregation.aggregated_items_count",
	AggregationType:         "order_mark_aggregation.aggregation_type",
	Version:                 "order_mark_aggregation.version",
	State:                   "order_mark_aggregation.state",
	Status:                  "order_mark_aggregation.status",
	OrderID:                 "order_mark_aggregation.order_id",
	Archive:                 "order_mark_aggregation.archive",
	JSON:                    "order_mark_aggregation.json",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OrderMarkAggregationWhere = struct {
	ID                      whereHelperint64
	CreateDate              whereHelpernull_String
	Inn                     whereHelpernull_String
	UnitSerialNumber        whereHelpernull_String
	AggregationUnitCapacity whereHelpernull_String
	AggregatedItemsCount    whereHelpernull_String
	AggregationType         whereHelpernull_String
	Version                 whereHelpernull_String
	State                   whereHelpernull_String
	Status                  whereHelpernull_String
	OrderID                 whereHelpernull_String
	Archive                 whereHelpernull_Int64
	JSON                    whereHelpernull_String
}{
	ID:                      whereHelperint64{field: "\"order_mark_aggregation\".\"id\""},
	CreateDate:              whereHelpernull_String{field: "\"order_mark_aggregation\".\"create_date\""},
	Inn:                     whereHelpernull_String{field: "\"order_mark_aggregation\".\"inn\""},
	UnitSerialNumber:        whereHelpernull_String{field: "\"order_mark_aggregation\".\"unit_serial_number\""},
	AggregationUnitCapacity: whereHelpernull_String{field: "\"order_mark_aggregation\".\"aggregation_unit_capacity\""},
	AggregatedItemsCount:    whereHelpernull_String{field: "\"order_mark_aggregation\".\"aggregated_items_count\""},
	AggregationType:         whereHelpernull_String{field: "\"order_mark_aggregation\".\"aggregation_type\""},
	Version:                 whereHelpernull_String{field: "\"order_mark_aggregation\".\"version\""},
	State:                   whereHelpernull_String{field: "\"order_mark_aggregation\".\"state\""},
	Status:                  whereHelpernull_String{field: "\"order_mark_aggregation\".\"status\""},
	OrderID:                 whereHelpernull_String{field: "\"order_mark_aggregation\".\"order_id\""},
	Archive:                 whereHelpernull_Int64{field: "\"order_mark_aggregation\".\"archive\""},
	JSON:                    whereHelpernull_String{field: "\"order_mark_aggregation\".\"json\""},
}

// OrderMarkAggregationRels is where relationship names are stored.
var OrderMarkAggregationRels = struct {
}{}

// orderMarkAggregationR is where relationships are stored.
type orderMarkAggregationR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkAggregationR) NewStruct() *orderMarkAggregationR {
	return &orderMarkAggregationR{}
}

// orderMarkAggregationL is where Load methods for each relationship are stored.
type orderMarkAggregationL struct{}

var (
	orderMarkAggregationAllColumns            = []string{"id", "create_date", "inn", "unit_serial_number", "aggregation_unit_capacity", "aggregated_items_count", "aggregation_type", "version", "state", "status", "order_id", "archive", "json"}
	orderMarkAggregationColumnsWithoutDefault = []string{}
	orderMarkAggregationColumnsWithDefault    = []string{"id", "create_date", "inn", "unit_serial_number", "aggregation_unit_capacity", "aggregated_items_count", "aggregation_type", "version", "state", "status", "order_id", "archive", "json"}
	orderMarkAggregationPrimaryKeyColumns     = []string{"id"}
	orderMarkAggregationGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkAggregationSlice is an alias for a slice of pointers to OrderMarkAggregation.
	// This should almost always be used instead of []OrderMarkAggregation.
	OrderMarkAggregationSlice []*OrderMarkAggregation
	// OrderMarkAggregationHook is the signature for custom OrderMarkAggregation hook methods
	OrderMarkAggregationHook func(context.Context, boil.ContextExecutor, *OrderMarkAggregation) error

	orderMarkAggregationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkAggregationType                 = reflect.TypeOf(&OrderMarkAggregation{})
	orderMarkAggregationMapping              = queries.MakeStructMapping(orderMarkAggregationType)
	orderMarkAggregationPrimaryKeyMapping, _ = queries.BindMapping(orderMarkAggregationType, orderMarkAggregationMapping, orderMarkAggregationPrimaryKeyColumns)
	orderMarkAggregationInsertCacheMut       sync.RWMutex
	orderMarkAggregationInsertCache          = make(map[string]insertCache)
	orderMarkAggregationUpdateCacheMut       sync.RWMutex
	orderMarkAggregationUpdateCache          = make(map[string]updateCache)
	orderMarkAggregationUpsertCacheMut       sync.RWMutex
	orderMarkAggregationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkAggregationAfterSelectMu sync.Mutex
var orderMarkAggregationAfterSelectHooks []OrderMarkAggregationHook

var orderMarkAggregationBeforeInsertMu sync.Mutex
var orderMarkAggregationBeforeInsertHooks []OrderMarkAggregationHook
var orderMarkAggregationAfterInsertMu sync.Mutex
var orderMarkAggregationAfterInsertHooks []OrderMarkAggregationHook

var orderMarkAggregationBeforeUpdateMu sync.Mutex
var orderMarkAggregationBeforeUpdateHooks []OrderMarkAggregationHook
var orderMarkAggregationAfterUpdateMu sync.Mutex
var orderMarkAggregationAfterUpdateHooks []OrderMarkAggregationHook

var orderMarkAggregationBeforeDeleteMu sync.Mutex
var orderMarkAggregationBeforeDeleteHooks []OrderMarkAggregationHook
var orderMarkAggregationAfterDeleteMu sync.Mutex
var orderMarkAggregationAfterDeleteHooks []OrderMarkAggregationHook

var orderMarkAggregationBeforeUpsertMu sync.Mutex
var orderMarkAggregationBeforeUpsertHooks []OrderMarkAggregationHook
var orderMarkAggregationAfterUpsertMu sync.Mutex
var orderMarkAggregationAfterUpsertHooks []OrderMarkAggregationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkAggregation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkAggregation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkAggregation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkAggregation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkAggregation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkAggregation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkAggregation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkAggregation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkAggregation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAggregationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkAggregationHook registers your hook function for all future operations.
func AddOrderMarkAggregationHook(hookPoint boil.HookPoint, orderMarkAggregationHook OrderMarkAggregationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkAggregationAfterSelectMu.Lock()
		orderMarkAggregationAfterSelectHooks = append(orderMarkAggregationAfterSelectHooks, orderMarkAggregationHook)
		orderMarkAggregationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkAggregationBeforeInsertMu.Lock()
		orderMarkAggregationBeforeInsertHooks = append(orderMarkAggregationBeforeInsertHooks, orderMarkAggregationHook)
		orderMarkAggregationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkAggregationAfterInsertMu.Lock()
		orderMarkAggregationAfterInsertHooks = append(orderMarkAggregationAfterInsertHooks, orderMarkAggregationHook)
		orderMarkAggregationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkAggregationBeforeUpdateMu.Lock()
		orderMarkAggregationBeforeUpdateHooks = append(orderMarkAggregationBeforeUpdateHooks, orderMarkAggregationHook)
		orderMarkAggregationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkAggregationAfterUpdateMu.Lock()
		orderMarkAggregationAfterUpdateHooks = append(orderMarkAggregationAfterUpdateHooks, orderMarkAggregationHook)
		orderMarkAggregationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkAggregationBeforeDeleteMu.Lock()
		orderMarkAggregationBeforeDeleteHooks = append(orderMarkAggregationBeforeDeleteHooks, orderMarkAggregationHook)
		orderMarkAggregationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkAggregationAfterDeleteMu.Lock()
		orderMarkAggregationAfterDeleteHooks = append(orderMarkAggregationAfterDeleteHooks, orderMarkAggregationHook)
		orderMarkAggregationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkAggregationBeforeUpsertMu.Lock()
		orderMarkAggregationBeforeUpsertHooks = append(orderMarkAggregationBeforeUpsertHooks, orderMarkAggregationHook)
		orderMarkAggregationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkAggregationAfterUpsertMu.Lock()
		orderMarkAggregationAfterUpsertHooks = append(orderMarkAggregationAfterUpsertHooks, orderMarkAggregationHook)
		orderMarkAggregationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkAggregation record from the query using the global executor.
func (q orderMarkAggregationQuery) OneG(ctx context.Context) (*OrderMarkAggregation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkAggregation record from the query.
func (q orderMarkAggregationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkAggregation, error) {
	o := &OrderMarkAggregation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_aggregation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkAggregation records from the query using the global executor.
func (q orderMarkAggregationQuery) AllG(ctx context.Context) (OrderMarkAggregationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkAggregation records from the query.
func (q orderMarkAggregationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkAggregationSlice, error) {
	var o []*OrderMarkAggregation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkAggregation slice")
	}

	if len(orderMarkAggregationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkAggregation records in the query using the global executor
func (q orderMarkAggregationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkAggregation records in the query.
func (q orderMarkAggregationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_aggregation rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkAggregationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkAggregationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_aggregation exists")
	}

	return count > 0, nil
}

// OrderMarkAggregations retrieves all the records using an executor.
func OrderMarkAggregations(mods ...qm.QueryMod) orderMarkAggregationQuery {
	mods = append(mods, qm.From("\"order_mark_aggregation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_mark_aggregation\".*"})
	}

	return orderMarkAggregationQuery{q}
}

// FindOrderMarkAggregationG retrieves a single record by ID.
func FindOrderMarkAggregationG(ctx context.Context, iD int64, selectCols ...string) (*OrderMarkAggregation, error) {
	return FindOrderMarkAggregation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkAggregation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkAggregation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderMarkAggregation, error) {
	orderMarkAggregationObj := &OrderMarkAggregation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_mark_aggregation\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkAggregationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_aggregation")
	}

	if err = orderMarkAggregationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkAggregationObj, err
	}

	return orderMarkAggregationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkAggregation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkAggregation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_aggregation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkAggregationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkAggregationInsertCacheMut.RLock()
	cache, cached := orderMarkAggregationInsertCache[key]
	orderMarkAggregationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkAggregationAllColumns,
			orderMarkAggregationColumnsWithDefault,
			orderMarkAggregationColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkAggregationGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkAggregationType, orderMarkAggregationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkAggregationType, orderMarkAggregationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_mark_aggregation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_mark_aggregation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_aggregation")
	}

	if !cached {
		orderMarkAggregationInsertCacheMut.Lock()
		orderMarkAggregationInsertCache[key] = cache
		orderMarkAggregationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkAggregation record using the global executor.
// See Update for more documentation.
func (o *OrderMarkAggregation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkAggregation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkAggregation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkAggregationUpdateCacheMut.RLock()
	cache, cached := orderMarkAggregationUpdateCache[key]
	orderMarkAggregationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkAggregationAllColumns,
			orderMarkAggregationPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkAggregationGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_aggregation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_mark_aggregation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderMarkAggregationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkAggregationType, orderMarkAggregationMapping, append(wl, orderMarkAggregationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_aggregation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_aggregation")
	}

	if !cached {
		orderMarkAggregationUpdateCacheMut.Lock()
		orderMarkAggregationUpdateCache[key] = cache
		orderMarkAggregationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkAggregationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkAggregationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_aggregation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_aggregation")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkAggregationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkAggregationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAggregationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_mark_aggregation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkAggregationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkAggregation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkAggregation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkAggregation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderMarkAggregation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_aggregation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkAggregationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkAggregationUpsertCacheMut.RLock()
	cache, cached := orderMarkAggregationUpsertCache[key]
	orderMarkAggregationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderMarkAggregationAllColumns,
			orderMarkAggregationColumnsWithDefault,
			orderMarkAggregationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderMarkAggregationAllColumns,
			orderMarkAggregationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_aggregation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderMarkAggregationPrimaryKeyColumns))
			copy(conflict, orderMarkAggregationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_mark_aggregation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderMarkAggregationType, orderMarkAggregationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkAggregationType, orderMarkAggregationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_aggregation")
	}

	if !cached {
		orderMarkAggregationUpsertCacheMut.Lock()
		orderMarkAggregationUpsertCache[key] = cache
		orderMarkAggregationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkAggregation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkAggregation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkAggregation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkAggregation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkAggregation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkAggregationPrimaryKeyMapping)
	sql := "DELETE FROM \"order_mark_aggregation\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_aggregation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_aggregation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkAggregationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkAggregationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkAggregationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_aggregation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_aggregation")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkAggregationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkAggregationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkAggregationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAggregationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_mark_aggregation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkAggregationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkAggregation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_aggregation")
	}

	if len(orderMarkAggregationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkAggregation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkAggregation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkAggregation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkAggregation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkAggregationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkAggregationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkAggregationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkAggregationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAggregationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_mark_aggregation\".* FROM \"order_mark_aggregation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkAggregationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkAggregationSlice")
	}

	*o = slice

	return nil
}

// OrderMarkAggregationExistsG checks if the OrderMarkAggregation row exists.
func OrderMarkAggregationExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrderMarkAggregationExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkAggregationExists checks if the OrderMarkAggregation row exists.
func OrderMarkAggregationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_mark_aggregation\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_aggregation exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkAggregation row exists.
func (o *OrderMarkAggregation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkAggregationExists(ctx, exec, o.ID)
}
