// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkCommissioning is an object representing the database table.
type OrderMarkCommissioning struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate        null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	DocType           null.String `boil:"doc_type" json:"doc_type,omitempty" toml:"doc_type" yaml:"doc_type,omitempty"`
	DocNumber         null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	DocDate           null.String `boil:"doc_date" json:"doc_date,omitempty" toml:"doc_date" yaml:"doc_date,omitempty"`
	ImportDate        null.String `boil:"import_date" json:"import_date,omitempty" toml:"import_date" yaml:"import_date,omitempty"`
	ExporterName      null.String `boil:"exporter_name" json:"exporter_name,omitempty" toml:"exporter_name" yaml:"exporter_name,omitempty"`
	ExporterCountry   null.String `boil:"exporter_country" json:"exporter_country,omitempty" toml:"exporter_country" yaml:"exporter_country,omitempty"`
	ShipperNumber     null.String `boil:"shipper_number" json:"shipper_number,omitempty" toml:"shipper_number" yaml:"shipper_number,omitempty"`
	DeclarationNumber null.String `boil:"declaration_number" json:"declaration_number,omitempty" toml:"declaration_number" yaml:"declaration_number,omitempty"`
	DeclarationDate   null.String `boil:"declaration_date" json:"declaration_date,omitempty" toml:"declaration_date" yaml:"declaration_date,omitempty"`
	Version           null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State             null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status            null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Archive           null.Int64  `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	JSON              null.String `boil:"json" json:"json,omitempty" toml:"json" yaml:"json,omitempty"`
	OrderID           null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Quantity          null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	ProductionType    null.String `boil:"production_type" json:"production_type,omitempty" toml:"production_type" yaml:"production_type,omitempty"`
	ProductionDate    null.String `boil:"production_date" json:"production_date,omitempty" toml:"production_date" yaml:"production_date,omitempty"`

	R *orderMarkCommissioningR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkCommissioningL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkCommissioningColumns = struct {
	ID                string
	CreateDate        string
	DocType           string
	DocNumber         string
	DocDate           string
	ImportDate        string
	ExporterName      string
	ExporterCountry   string
	ShipperNumber     string
	DeclarationNumber string
	DeclarationDate   string
	Version           string
	State             string
	Status            string
	Archive           string
	JSON              string
	OrderID           string
	Quantity          string
	ProductionType    string
	ProductionDate    string
}{
	ID:                "id",
	CreateDate:        "create_date",
	DocType:           "doc_type",
	DocNumber:         "doc_number",
	DocDate:           "doc_date",
	ImportDate:        "import_date",
	ExporterName:      "exporter_name",
	ExporterCountry:   "exporter_country",
	ShipperNumber:     "shipper_number",
	DeclarationNumber: "declaration_number",
	DeclarationDate:   "declaration_date",
	Version:           "version",
	State:             "state",
	Status:            "status",
	Archive:           "archive",
	JSON:              "json",
	OrderID:           "order_id",
	Quantity:          "quantity",
	ProductionType:    "production_type",
	ProductionDate:    "production_date",
}

var OrderMarkCommissioningTableColumns = struct {
	ID                string
	CreateDate        string
	DocType           string
	DocNumber         string
	DocDate           string
	ImportDate        string
	ExporterName      string
	ExporterCountry   string
	ShipperNumber     string
	DeclarationNumber string
	DeclarationDate   string
	Version           string
	State             string
	Status            string
	Archive           string
	JSON              string
	OrderID           string
	Quantity          string
	ProductionType    string
	ProductionDate    string
}{
	ID:                "order_mark_commissioning.id",
	CreateDate:        "order_mark_commissioning.create_date",
	DocType:           "order_mark_commissioning.doc_type",
	DocNumber:         "order_mark_commissioning.doc_number",
	DocDate:           "order_mark_commissioning.doc_date",
	ImportDate:        "order_mark_commissioning.import_date",
	ExporterName:      "order_mark_commissioning.exporter_name",
	ExporterCountry:   "order_mark_commissioning.exporter_country",
	ShipperNumber:     "order_mark_commissioning.shipper_number",
	DeclarationNumber: "order_mark_commissioning.declaration_number",
	DeclarationDate:   "order_mark_commissioning.declaration_date",
	Version:           "order_mark_commissioning.version",
	State:             "order_mark_commissioning.state",
	Status:            "order_mark_commissioning.status",
	Archive:           "order_mark_commissioning.archive",
	JSON:              "order_mark_commissioning.json",
	OrderID:           "order_mark_commissioning.order_id",
	Quantity:          "order_mark_commissioning.quantity",
	ProductionType:    "order_mark_commissioning.production_type",
	ProductionDate:    "order_mark_commissioning.production_date",
}

// Generated where

var OrderMarkCommissioningWhere = struct {
	ID                whereHelperint64
	CreateDate        whereHelpernull_String
	DocType           whereHelpernull_String
	DocNumber         whereHelpernull_String
	DocDate           whereHelpernull_String
	ImportDate        whereHelpernull_String
	ExporterName      whereHelpernull_String
	ExporterCountry   whereHelpernull_String
	ShipperNumber     whereHelpernull_String
	DeclarationNumber whereHelpernull_String
	DeclarationDate   whereHelpernull_String
	Version           whereHelpernull_String
	State             whereHelpernull_String
	Status            whereHelpernull_String
	Archive           whereHelpernull_Int64
	JSON              whereHelpernull_String
	OrderID           whereHelpernull_String
	Quantity          whereHelpernull_String
	ProductionType    whereHelpernull_String
	ProductionDate    whereHelpernull_String
}{
	ID:                whereHelperint64{field: "\"order_mark_commissioning\".\"id\""},
	CreateDate:        whereHelpernull_String{field: "\"order_mark_commissioning\".\"create_date\""},
	DocType:           whereHelpernull_String{field: "\"order_mark_commissioning\".\"doc_type\""},
	DocNumber:         whereHelpernull_String{field: "\"order_mark_commissioning\".\"doc_number\""},
	DocDate:           whereHelpernull_String{field: "\"order_mark_commissioning\".\"doc_date\""},
	ImportDate:        whereHelpernull_String{field: "\"order_mark_commissioning\".\"import_date\""},
	ExporterName:      whereHelpernull_String{field: "\"order_mark_commissioning\".\"exporter_name\""},
	ExporterCountry:   whereHelpernull_String{field: "\"order_mark_commissioning\".\"exporter_country\""},
	ShipperNumber:     whereHelpernull_String{field: "\"order_mark_commissioning\".\"shipper_number\""},
	DeclarationNumber: whereHelpernull_String{field: "\"order_mark_commissioning\".\"declaration_number\""},
	DeclarationDate:   whereHelpernull_String{field: "\"order_mark_commissioning\".\"declaration_date\""},
	Version:           whereHelpernull_String{field: "\"order_mark_commissioning\".\"version\""},
	State:             whereHelpernull_String{field: "\"order_mark_commissioning\".\"state\""},
	Status:            whereHelpernull_String{field: "\"order_mark_commissioning\".\"status\""},
	Archive:           whereHelpernull_Int64{field: "\"order_mark_commissioning\".\"archive\""},
	JSON:              whereHelpernull_String{field: "\"order_mark_commissioning\".\"json\""},
	OrderID:           whereHelpernull_String{field: "\"order_mark_commissioning\".\"order_id\""},
	Quantity:          whereHelpernull_String{field: "\"order_mark_commissioning\".\"quantity\""},
	ProductionType:    whereHelpernull_String{field: "\"order_mark_commissioning\".\"production_type\""},
	ProductionDate:    whereHelpernull_String{field: "\"order_mark_commissioning\".\"production_date\""},
}

// OrderMarkCommissioningRels is where relationship names are stored.
var OrderMarkCommissioningRels = struct {
}{}

// orderMarkCommissioningR is where relationships are stored.
type orderMarkCommissioningR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkCommissioningR) NewStruct() *orderMarkCommissioningR {
	return &orderMarkCommissioningR{}
}

// orderMarkCommissioningL is where Load methods for each relationship are stored.
type orderMarkCommissioningL struct{}

var (
	orderMarkCommissioningAllColumns            = []string{"id", "create_date", "doc_type", "doc_number", "doc_date", "import_date", "exporter_name", "exporter_country", "shipper_number", "declaration_number", "declaration_date", "version", "state", "status", "archive", "json", "order_id", "quantity", "production_type", "production_date"}
	orderMarkCommissioningColumnsWithoutDefault = []string{}
	orderMarkCommissioningColumnsWithDefault    = []string{"id", "create_date", "doc_type", "doc_number", "doc_date", "import_date", "exporter_name", "exporter_country", "shipper_number", "declaration_number", "declaration_date", "version", "state", "status", "archive", "json", "order_id", "quantity", "production_type", "production_date"}
	orderMarkCommissioningPrimaryKeyColumns     = []string{"id"}
	orderMarkCommissioningGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkCommissioningSlice is an alias for a slice of pointers to OrderMarkCommissioning.
	// This should almost always be used instead of []OrderMarkCommissioning.
	OrderMarkCommissioningSlice []*OrderMarkCommissioning
	// OrderMarkCommissioningHook is the signature for custom OrderMarkCommissioning hook methods
	OrderMarkCommissioningHook func(context.Context, boil.ContextExecutor, *OrderMarkCommissioning) error

	orderMarkCommissioningQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkCommissioningType                 = reflect.TypeOf(&OrderMarkCommissioning{})
	orderMarkCommissioningMapping              = queries.MakeStructMapping(orderMarkCommissioningType)
	orderMarkCommissioningPrimaryKeyMapping, _ = queries.BindMapping(orderMarkCommissioningType, orderMarkCommissioningMapping, orderMarkCommissioningPrimaryKeyColumns)
	orderMarkCommissioningInsertCacheMut       sync.RWMutex
	orderMarkCommissioningInsertCache          = make(map[string]insertCache)
	orderMarkCommissioningUpdateCacheMut       sync.RWMutex
	orderMarkCommissioningUpdateCache          = make(map[string]updateCache)
	orderMarkCommissioningUpsertCacheMut       sync.RWMutex
	orderMarkCommissioningUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkCommissioningAfterSelectMu sync.Mutex
var orderMarkCommissioningAfterSelectHooks []OrderMarkCommissioningHook

var orderMarkCommissioningBeforeInsertMu sync.Mutex
var orderMarkCommissioningBeforeInsertHooks []OrderMarkCommissioningHook
var orderMarkCommissioningAfterInsertMu sync.Mutex
var orderMarkCommissioningAfterInsertHooks []OrderMarkCommissioningHook

var orderMarkCommissioningBeforeUpdateMu sync.Mutex
var orderMarkCommissioningBeforeUpdateHooks []OrderMarkCommissioningHook
var orderMarkCommissioningAfterUpdateMu sync.Mutex
var orderMarkCommissioningAfterUpdateHooks []OrderMarkCommissioningHook

var orderMarkCommissioningBeforeDeleteMu sync.Mutex
var orderMarkCommissioningBeforeDeleteHooks []OrderMarkCommissioningHook
var orderMarkCommissioningAfterDeleteMu sync.Mutex
var orderMarkCommissioningAfterDeleteHooks []OrderMarkCommissioningHook

var orderMarkCommissioningBeforeUpsertMu sync.Mutex
var orderMarkCommissioningBeforeUpsertHooks []OrderMarkCommissioningHook
var orderMarkCommissioningAfterUpsertMu sync.Mutex
var orderMarkCommissioningAfterUpsertHooks []OrderMarkCommissioningHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkCommissioning) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkCommissioning) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkCommissioning) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkCommissioning) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkCommissioning) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkCommissioning) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkCommissioning) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkCommissioning) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkCommissioning) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCommissioningAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkCommissioningHook registers your hook function for all future operations.
func AddOrderMarkCommissioningHook(hookPoint boil.HookPoint, orderMarkCommissioningHook OrderMarkCommissioningHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkCommissioningAfterSelectMu.Lock()
		orderMarkCommissioningAfterSelectHooks = append(orderMarkCommissioningAfterSelectHooks, orderMarkCommissioningHook)
		orderMarkCommissioningAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkCommissioningBeforeInsertMu.Lock()
		orderMarkCommissioningBeforeInsertHooks = append(orderMarkCommissioningBeforeInsertHooks, orderMarkCommissioningHook)
		orderMarkCommissioningBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkCommissioningAfterInsertMu.Lock()
		orderMarkCommissioningAfterInsertHooks = append(orderMarkCommissioningAfterInsertHooks, orderMarkCommissioningHook)
		orderMarkCommissioningAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkCommissioningBeforeUpdateMu.Lock()
		orderMarkCommissioningBeforeUpdateHooks = append(orderMarkCommissioningBeforeUpdateHooks, orderMarkCommissioningHook)
		orderMarkCommissioningBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkCommissioningAfterUpdateMu.Lock()
		orderMarkCommissioningAfterUpdateHooks = append(orderMarkCommissioningAfterUpdateHooks, orderMarkCommissioningHook)
		orderMarkCommissioningAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkCommissioningBeforeDeleteMu.Lock()
		orderMarkCommissioningBeforeDeleteHooks = append(orderMarkCommissioningBeforeDeleteHooks, orderMarkCommissioningHook)
		orderMarkCommissioningBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkCommissioningAfterDeleteMu.Lock()
		orderMarkCommissioningAfterDeleteHooks = append(orderMarkCommissioningAfterDeleteHooks, orderMarkCommissioningHook)
		orderMarkCommissioningAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkCommissioningBeforeUpsertMu.Lock()
		orderMarkCommissioningBeforeUpsertHooks = append(orderMarkCommissioningBeforeUpsertHooks, orderMarkCommissioningHook)
		orderMarkCommissioningBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkCommissioningAfterUpsertMu.Lock()
		orderMarkCommissioningAfterUpsertHooks = append(orderMarkCommissioningAfterUpsertHooks, orderMarkCommissioningHook)
		orderMarkCommissioningAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkCommissioning record from the query using the global executor.
func (q orderMarkCommissioningQuery) OneG(ctx context.Context) (*OrderMarkCommissioning, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkCommissioning record from the query.
func (q orderMarkCommissioningQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkCommissioning, error) {
	o := &OrderMarkCommissioning{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_commissioning")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkCommissioning records from the query using the global executor.
func (q orderMarkCommissioningQuery) AllG(ctx context.Context) (OrderMarkCommissioningSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkCommissioning records from the query.
func (q orderMarkCommissioningQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkCommissioningSlice, error) {
	var o []*OrderMarkCommissioning

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkCommissioning slice")
	}

	if len(orderMarkCommissioningAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkCommissioning records in the query using the global executor
func (q orderMarkCommissioningQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkCommissioning records in the query.
func (q orderMarkCommissioningQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_commissioning rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkCommissioningQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkCommissioningQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_commissioning exists")
	}

	return count > 0, nil
}

// OrderMarkCommissionings retrieves all the records using an executor.
func OrderMarkCommissionings(mods ...qm.QueryMod) orderMarkCommissioningQuery {
	mods = append(mods, qm.From("\"order_mark_commissioning\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_mark_commissioning\".*"})
	}

	return orderMarkCommissioningQuery{q}
}

// FindOrderMarkCommissioningG retrieves a single record by ID.
func FindOrderMarkCommissioningG(ctx context.Context, iD int64, selectCols ...string) (*OrderMarkCommissioning, error) {
	return FindOrderMarkCommissioning(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkCommissioning retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkCommissioning(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderMarkCommissioning, error) {
	orderMarkCommissioningObj := &OrderMarkCommissioning{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_mark_commissioning\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkCommissioningObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_commissioning")
	}

	if err = orderMarkCommissioningObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkCommissioningObj, err
	}

	return orderMarkCommissioningObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkCommissioning) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkCommissioning) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_commissioning provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCommissioningColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkCommissioningInsertCacheMut.RLock()
	cache, cached := orderMarkCommissioningInsertCache[key]
	orderMarkCommissioningInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkCommissioningAllColumns,
			orderMarkCommissioningColumnsWithDefault,
			orderMarkCommissioningColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkCommissioningGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkCommissioningType, orderMarkCommissioningMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkCommissioningType, orderMarkCommissioningMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_mark_commissioning\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_mark_commissioning\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_commissioning")
	}

	if !cached {
		orderMarkCommissioningInsertCacheMut.Lock()
		orderMarkCommissioningInsertCache[key] = cache
		orderMarkCommissioningInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkCommissioning record using the global executor.
// See Update for more documentation.
func (o *OrderMarkCommissioning) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkCommissioning.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkCommissioning) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkCommissioningUpdateCacheMut.RLock()
	cache, cached := orderMarkCommissioningUpdateCache[key]
	orderMarkCommissioningUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkCommissioningAllColumns,
			orderMarkCommissioningPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkCommissioningGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_commissioning, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_mark_commissioning\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderMarkCommissioningPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkCommissioningType, orderMarkCommissioningMapping, append(wl, orderMarkCommissioningPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_commissioning row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_commissioning")
	}

	if !cached {
		orderMarkCommissioningUpdateCacheMut.Lock()
		orderMarkCommissioningUpdateCache[key] = cache
		orderMarkCommissioningUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkCommissioningQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkCommissioningQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_commissioning")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_commissioning")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkCommissioningSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkCommissioningSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCommissioningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_mark_commissioning\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCommissioningPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkCommissioning slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkCommissioning")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkCommissioning) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderMarkCommissioning) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_commissioning provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCommissioningColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkCommissioningUpsertCacheMut.RLock()
	cache, cached := orderMarkCommissioningUpsertCache[key]
	orderMarkCommissioningUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderMarkCommissioningAllColumns,
			orderMarkCommissioningColumnsWithDefault,
			orderMarkCommissioningColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderMarkCommissioningAllColumns,
			orderMarkCommissioningPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_commissioning, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderMarkCommissioningPrimaryKeyColumns))
			copy(conflict, orderMarkCommissioningPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_mark_commissioning\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderMarkCommissioningType, orderMarkCommissioningMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkCommissioningType, orderMarkCommissioningMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_commissioning")
	}

	if !cached {
		orderMarkCommissioningUpsertCacheMut.Lock()
		orderMarkCommissioningUpsertCache[key] = cache
		orderMarkCommissioningUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkCommissioning record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkCommissioning) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkCommissioning record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkCommissioning) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkCommissioning provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkCommissioningPrimaryKeyMapping)
	sql := "DELETE FROM \"order_mark_commissioning\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_commissioning")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_commissioning")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkCommissioningQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkCommissioningQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkCommissioningQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_commissioning")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_commissioning")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkCommissioningSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkCommissioningSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkCommissioningBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCommissioningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_mark_commissioning\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCommissioningPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkCommissioning slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_commissioning")
	}

	if len(orderMarkCommissioningAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkCommissioning) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkCommissioning provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkCommissioning) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkCommissioning(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCommissioningSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkCommissioningSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCommissioningSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkCommissioningSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCommissioningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_mark_commissioning\".* FROM \"order_mark_commissioning\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCommissioningPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkCommissioningSlice")
	}

	*o = slice

	return nil
}

// OrderMarkCommissioningExistsG checks if the OrderMarkCommissioning row exists.
func OrderMarkCommissioningExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrderMarkCommissioningExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkCommissioningExists checks if the OrderMarkCommissioning row exists.
func OrderMarkCommissioningExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_mark_commissioning\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_commissioning exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkCommissioning row exists.
func (o *OrderMarkCommissioning) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkCommissioningExists(ctx, exec, o.ID)
}
