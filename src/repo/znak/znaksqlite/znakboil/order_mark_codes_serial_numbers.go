// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkCodesSerialNumber is an object representing the database table.
type OrderMarkCodesSerialNumber struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDOrderMarkCodes null.Int64  `boil:"id_order_mark_codes" json:"id_order_mark_codes,omitempty" toml:"id_order_mark_codes" yaml:"id_order_mark_codes,omitempty"`
	Gtin             null.String `boil:"gtin" json:"gtin,omitempty" toml:"gtin" yaml:"gtin,omitempty"`
	SerialNumber     null.String `boil:"serial_number" json:"serial_number,omitempty" toml:"serial_number" yaml:"serial_number,omitempty"`
	Code             null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	BlockID          null.String `boil:"block_id" json:"block_id,omitempty" toml:"block_id" yaml:"block_id,omitempty"`
	Status           null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *orderMarkCodesSerialNumberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkCodesSerialNumberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkCodesSerialNumberColumns = struct {
	ID               string
	IDOrderMarkCodes string
	Gtin             string
	SerialNumber     string
	Code             string
	BlockID          string
	Status           string
}{
	ID:               "id",
	IDOrderMarkCodes: "id_order_mark_codes",
	Gtin:             "gtin",
	SerialNumber:     "serial_number",
	Code:             "code",
	BlockID:          "block_id",
	Status:           "status",
}

var OrderMarkCodesSerialNumberTableColumns = struct {
	ID               string
	IDOrderMarkCodes string
	Gtin             string
	SerialNumber     string
	Code             string
	BlockID          string
	Status           string
}{
	ID:               "order_mark_codes_serial_numbers.id",
	IDOrderMarkCodes: "order_mark_codes_serial_numbers.id_order_mark_codes",
	Gtin:             "order_mark_codes_serial_numbers.gtin",
	SerialNumber:     "order_mark_codes_serial_numbers.serial_number",
	Code:             "order_mark_codes_serial_numbers.code",
	BlockID:          "order_mark_codes_serial_numbers.block_id",
	Status:           "order_mark_codes_serial_numbers.status",
}

// Generated where

var OrderMarkCodesSerialNumberWhere = struct {
	ID               whereHelperint64
	IDOrderMarkCodes whereHelpernull_Int64
	Gtin             whereHelpernull_String
	SerialNumber     whereHelpernull_String
	Code             whereHelpernull_String
	BlockID          whereHelpernull_String
	Status           whereHelpernull_String
}{
	ID:               whereHelperint64{field: "\"order_mark_codes_serial_numbers\".\"id\""},
	IDOrderMarkCodes: whereHelpernull_Int64{field: "\"order_mark_codes_serial_numbers\".\"id_order_mark_codes\""},
	Gtin:             whereHelpernull_String{field: "\"order_mark_codes_serial_numbers\".\"gtin\""},
	SerialNumber:     whereHelpernull_String{field: "\"order_mark_codes_serial_numbers\".\"serial_number\""},
	Code:             whereHelpernull_String{field: "\"order_mark_codes_serial_numbers\".\"code\""},
	BlockID:          whereHelpernull_String{field: "\"order_mark_codes_serial_numbers\".\"block_id\""},
	Status:           whereHelpernull_String{field: "\"order_mark_codes_serial_numbers\".\"status\""},
}

// OrderMarkCodesSerialNumberRels is where relationship names are stored.
var OrderMarkCodesSerialNumberRels = struct {
}{}

// orderMarkCodesSerialNumberR is where relationships are stored.
type orderMarkCodesSerialNumberR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkCodesSerialNumberR) NewStruct() *orderMarkCodesSerialNumberR {
	return &orderMarkCodesSerialNumberR{}
}

// orderMarkCodesSerialNumberL is where Load methods for each relationship are stored.
type orderMarkCodesSerialNumberL struct{}

var (
	orderMarkCodesSerialNumberAllColumns            = []string{"id", "id_order_mark_codes", "gtin", "serial_number", "code", "block_id", "status"}
	orderMarkCodesSerialNumberColumnsWithoutDefault = []string{}
	orderMarkCodesSerialNumberColumnsWithDefault    = []string{"id", "id_order_mark_codes", "gtin", "serial_number", "code", "block_id", "status"}
	orderMarkCodesSerialNumberPrimaryKeyColumns     = []string{"id"}
	orderMarkCodesSerialNumberGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkCodesSerialNumberSlice is an alias for a slice of pointers to OrderMarkCodesSerialNumber.
	// This should almost always be used instead of []OrderMarkCodesSerialNumber.
	OrderMarkCodesSerialNumberSlice []*OrderMarkCodesSerialNumber
	// OrderMarkCodesSerialNumberHook is the signature for custom OrderMarkCodesSerialNumber hook methods
	OrderMarkCodesSerialNumberHook func(context.Context, boil.ContextExecutor, *OrderMarkCodesSerialNumber) error

	orderMarkCodesSerialNumberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkCodesSerialNumberType                 = reflect.TypeOf(&OrderMarkCodesSerialNumber{})
	orderMarkCodesSerialNumberMapping              = queries.MakeStructMapping(orderMarkCodesSerialNumberType)
	orderMarkCodesSerialNumberPrimaryKeyMapping, _ = queries.BindMapping(orderMarkCodesSerialNumberType, orderMarkCodesSerialNumberMapping, orderMarkCodesSerialNumberPrimaryKeyColumns)
	orderMarkCodesSerialNumberInsertCacheMut       sync.RWMutex
	orderMarkCodesSerialNumberInsertCache          = make(map[string]insertCache)
	orderMarkCodesSerialNumberUpdateCacheMut       sync.RWMutex
	orderMarkCodesSerialNumberUpdateCache          = make(map[string]updateCache)
	orderMarkCodesSerialNumberUpsertCacheMut       sync.RWMutex
	orderMarkCodesSerialNumberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkCodesSerialNumberAfterSelectMu sync.Mutex
var orderMarkCodesSerialNumberAfterSelectHooks []OrderMarkCodesSerialNumberHook

var orderMarkCodesSerialNumberBeforeInsertMu sync.Mutex
var orderMarkCodesSerialNumberBeforeInsertHooks []OrderMarkCodesSerialNumberHook
var orderMarkCodesSerialNumberAfterInsertMu sync.Mutex
var orderMarkCodesSerialNumberAfterInsertHooks []OrderMarkCodesSerialNumberHook

var orderMarkCodesSerialNumberBeforeUpdateMu sync.Mutex
var orderMarkCodesSerialNumberBeforeUpdateHooks []OrderMarkCodesSerialNumberHook
var orderMarkCodesSerialNumberAfterUpdateMu sync.Mutex
var orderMarkCodesSerialNumberAfterUpdateHooks []OrderMarkCodesSerialNumberHook

var orderMarkCodesSerialNumberBeforeDeleteMu sync.Mutex
var orderMarkCodesSerialNumberBeforeDeleteHooks []OrderMarkCodesSerialNumberHook
var orderMarkCodesSerialNumberAfterDeleteMu sync.Mutex
var orderMarkCodesSerialNumberAfterDeleteHooks []OrderMarkCodesSerialNumberHook

var orderMarkCodesSerialNumberBeforeUpsertMu sync.Mutex
var orderMarkCodesSerialNumberBeforeUpsertHooks []OrderMarkCodesSerialNumberHook
var orderMarkCodesSerialNumberAfterUpsertMu sync.Mutex
var orderMarkCodesSerialNumberAfterUpsertHooks []OrderMarkCodesSerialNumberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkCodesSerialNumber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkCodesSerialNumber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkCodesSerialNumber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkCodesSerialNumber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkCodesSerialNumber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkCodesSerialNumber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkCodesSerialNumber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkCodesSerialNumber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkCodesSerialNumber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkCodesSerialNumberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkCodesSerialNumberHook registers your hook function for all future operations.
func AddOrderMarkCodesSerialNumberHook(hookPoint boil.HookPoint, orderMarkCodesSerialNumberHook OrderMarkCodesSerialNumberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkCodesSerialNumberAfterSelectMu.Lock()
		orderMarkCodesSerialNumberAfterSelectHooks = append(orderMarkCodesSerialNumberAfterSelectHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkCodesSerialNumberBeforeInsertMu.Lock()
		orderMarkCodesSerialNumberBeforeInsertHooks = append(orderMarkCodesSerialNumberBeforeInsertHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkCodesSerialNumberAfterInsertMu.Lock()
		orderMarkCodesSerialNumberAfterInsertHooks = append(orderMarkCodesSerialNumberAfterInsertHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkCodesSerialNumberBeforeUpdateMu.Lock()
		orderMarkCodesSerialNumberBeforeUpdateHooks = append(orderMarkCodesSerialNumberBeforeUpdateHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkCodesSerialNumberAfterUpdateMu.Lock()
		orderMarkCodesSerialNumberAfterUpdateHooks = append(orderMarkCodesSerialNumberAfterUpdateHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkCodesSerialNumberBeforeDeleteMu.Lock()
		orderMarkCodesSerialNumberBeforeDeleteHooks = append(orderMarkCodesSerialNumberBeforeDeleteHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkCodesSerialNumberAfterDeleteMu.Lock()
		orderMarkCodesSerialNumberAfterDeleteHooks = append(orderMarkCodesSerialNumberAfterDeleteHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkCodesSerialNumberBeforeUpsertMu.Lock()
		orderMarkCodesSerialNumberBeforeUpsertHooks = append(orderMarkCodesSerialNumberBeforeUpsertHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkCodesSerialNumberAfterUpsertMu.Lock()
		orderMarkCodesSerialNumberAfterUpsertHooks = append(orderMarkCodesSerialNumberAfterUpsertHooks, orderMarkCodesSerialNumberHook)
		orderMarkCodesSerialNumberAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkCodesSerialNumber record from the query using the global executor.
func (q orderMarkCodesSerialNumberQuery) OneG(ctx context.Context) (*OrderMarkCodesSerialNumber, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkCodesSerialNumber record from the query.
func (q orderMarkCodesSerialNumberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkCodesSerialNumber, error) {
	o := &OrderMarkCodesSerialNumber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_codes_serial_numbers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkCodesSerialNumber records from the query using the global executor.
func (q orderMarkCodesSerialNumberQuery) AllG(ctx context.Context) (OrderMarkCodesSerialNumberSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkCodesSerialNumber records from the query.
func (q orderMarkCodesSerialNumberQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkCodesSerialNumberSlice, error) {
	var o []*OrderMarkCodesSerialNumber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkCodesSerialNumber slice")
	}

	if len(orderMarkCodesSerialNumberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkCodesSerialNumber records in the query using the global executor
func (q orderMarkCodesSerialNumberQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkCodesSerialNumber records in the query.
func (q orderMarkCodesSerialNumberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_codes_serial_numbers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkCodesSerialNumberQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkCodesSerialNumberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_codes_serial_numbers exists")
	}

	return count > 0, nil
}

// OrderMarkCodesSerialNumbers retrieves all the records using an executor.
func OrderMarkCodesSerialNumbers(mods ...qm.QueryMod) orderMarkCodesSerialNumberQuery {
	mods = append(mods, qm.From("\"order_mark_codes_serial_numbers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_mark_codes_serial_numbers\".*"})
	}

	return orderMarkCodesSerialNumberQuery{q}
}

// FindOrderMarkCodesSerialNumberG retrieves a single record by ID.
func FindOrderMarkCodesSerialNumberG(ctx context.Context, iD int64, selectCols ...string) (*OrderMarkCodesSerialNumber, error) {
	return FindOrderMarkCodesSerialNumber(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkCodesSerialNumber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkCodesSerialNumber(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderMarkCodesSerialNumber, error) {
	orderMarkCodesSerialNumberObj := &OrderMarkCodesSerialNumber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_mark_codes_serial_numbers\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkCodesSerialNumberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_codes_serial_numbers")
	}

	if err = orderMarkCodesSerialNumberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkCodesSerialNumberObj, err
	}

	return orderMarkCodesSerialNumberObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkCodesSerialNumber) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkCodesSerialNumber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_codes_serial_numbers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCodesSerialNumberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkCodesSerialNumberInsertCacheMut.RLock()
	cache, cached := orderMarkCodesSerialNumberInsertCache[key]
	orderMarkCodesSerialNumberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkCodesSerialNumberAllColumns,
			orderMarkCodesSerialNumberColumnsWithDefault,
			orderMarkCodesSerialNumberColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkCodesSerialNumberGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkCodesSerialNumberType, orderMarkCodesSerialNumberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkCodesSerialNumberType, orderMarkCodesSerialNumberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_mark_codes_serial_numbers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_mark_codes_serial_numbers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_codes_serial_numbers")
	}

	if !cached {
		orderMarkCodesSerialNumberInsertCacheMut.Lock()
		orderMarkCodesSerialNumberInsertCache[key] = cache
		orderMarkCodesSerialNumberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkCodesSerialNumber record using the global executor.
// See Update for more documentation.
func (o *OrderMarkCodesSerialNumber) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkCodesSerialNumber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkCodesSerialNumber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkCodesSerialNumberUpdateCacheMut.RLock()
	cache, cached := orderMarkCodesSerialNumberUpdateCache[key]
	orderMarkCodesSerialNumberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkCodesSerialNumberAllColumns,
			orderMarkCodesSerialNumberPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkCodesSerialNumberGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_codes_serial_numbers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_mark_codes_serial_numbers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderMarkCodesSerialNumberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkCodesSerialNumberType, orderMarkCodesSerialNumberMapping, append(wl, orderMarkCodesSerialNumberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_codes_serial_numbers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_codes_serial_numbers")
	}

	if !cached {
		orderMarkCodesSerialNumberUpdateCacheMut.Lock()
		orderMarkCodesSerialNumberUpdateCache[key] = cache
		orderMarkCodesSerialNumberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkCodesSerialNumberQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkCodesSerialNumberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_codes_serial_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_codes_serial_numbers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkCodesSerialNumberSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkCodesSerialNumberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCodesSerialNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_mark_codes_serial_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCodesSerialNumberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkCodesSerialNumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkCodesSerialNumber")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkCodesSerialNumber) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderMarkCodesSerialNumber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_codes_serial_numbers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkCodesSerialNumberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkCodesSerialNumberUpsertCacheMut.RLock()
	cache, cached := orderMarkCodesSerialNumberUpsertCache[key]
	orderMarkCodesSerialNumberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderMarkCodesSerialNumberAllColumns,
			orderMarkCodesSerialNumberColumnsWithDefault,
			orderMarkCodesSerialNumberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderMarkCodesSerialNumberAllColumns,
			orderMarkCodesSerialNumberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_codes_serial_numbers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderMarkCodesSerialNumberPrimaryKeyColumns))
			copy(conflict, orderMarkCodesSerialNumberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_mark_codes_serial_numbers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderMarkCodesSerialNumberType, orderMarkCodesSerialNumberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkCodesSerialNumberType, orderMarkCodesSerialNumberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_codes_serial_numbers")
	}

	if !cached {
		orderMarkCodesSerialNumberUpsertCacheMut.Lock()
		orderMarkCodesSerialNumberUpsertCache[key] = cache
		orderMarkCodesSerialNumberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkCodesSerialNumber record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkCodesSerialNumber) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkCodesSerialNumber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkCodesSerialNumber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkCodesSerialNumber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkCodesSerialNumberPrimaryKeyMapping)
	sql := "DELETE FROM \"order_mark_codes_serial_numbers\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_codes_serial_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_codes_serial_numbers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkCodesSerialNumberQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkCodesSerialNumberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkCodesSerialNumberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_codes_serial_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_codes_serial_numbers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkCodesSerialNumberSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkCodesSerialNumberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkCodesSerialNumberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCodesSerialNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_mark_codes_serial_numbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCodesSerialNumberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkCodesSerialNumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_codes_serial_numbers")
	}

	if len(orderMarkCodesSerialNumberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkCodesSerialNumber) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkCodesSerialNumber provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkCodesSerialNumber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkCodesSerialNumber(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCodesSerialNumberSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkCodesSerialNumberSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkCodesSerialNumberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkCodesSerialNumberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkCodesSerialNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_mark_codes_serial_numbers\".* FROM \"order_mark_codes_serial_numbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkCodesSerialNumberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkCodesSerialNumberSlice")
	}

	*o = slice

	return nil
}

// OrderMarkCodesSerialNumberExistsG checks if the OrderMarkCodesSerialNumber row exists.
func OrderMarkCodesSerialNumberExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrderMarkCodesSerialNumberExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkCodesSerialNumberExists checks if the OrderMarkCodesSerialNumber row exists.
func OrderMarkCodesSerialNumberExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_mark_codes_serial_numbers\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_codes_serial_numbers exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkCodesSerialNumber row exists.
func (o *OrderMarkCodesSerialNumber) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkCodesSerialNumberExists(ctx, exec, o.ID)
}
