// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkConnectingTap is an object representing the database table.
type OrderMarkConnectingTap struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	Quantity   null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Inn        null.String `boil:"inn" json:"inn,omitempty" toml:"inn" yaml:"inn,omitempty"`
	KPP        null.String `boil:"kpp" json:"kpp,omitempty" toml:"kpp" yaml:"kpp,omitempty"`
	Version    null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State      null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status     null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	OrderID    null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Archive    null.Int64  `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	JSON       null.String `boil:"json" json:"json,omitempty" toml:"json" yaml:"json,omitempty"`

	R *orderMarkConnectingTapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkConnectingTapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkConnectingTapColumns = struct {
	ID         string
	CreateDate string
	Quantity   string
	Inn        string
	KPP        string
	Version    string
	State      string
	Status     string
	OrderID    string
	Archive    string
	JSON       string
}{
	ID:         "id",
	CreateDate: "create_date",
	Quantity:   "quantity",
	Inn:        "inn",
	KPP:        "kpp",
	Version:    "version",
	State:      "state",
	Status:     "status",
	OrderID:    "order_id",
	Archive:    "archive",
	JSON:       "json",
}

var OrderMarkConnectingTapTableColumns = struct {
	ID         string
	CreateDate string
	Quantity   string
	Inn        string
	KPP        string
	Version    string
	State      string
	Status     string
	OrderID    string
	Archive    string
	JSON       string
}{
	ID:         "order_mark_connecting_tap.id",
	CreateDate: "order_mark_connecting_tap.create_date",
	Quantity:   "order_mark_connecting_tap.quantity",
	Inn:        "order_mark_connecting_tap.inn",
	KPP:        "order_mark_connecting_tap.kpp",
	Version:    "order_mark_connecting_tap.version",
	State:      "order_mark_connecting_tap.state",
	Status:     "order_mark_connecting_tap.status",
	OrderID:    "order_mark_connecting_tap.order_id",
	Archive:    "order_mark_connecting_tap.archive",
	JSON:       "order_mark_connecting_tap.json",
}

// Generated where

var OrderMarkConnectingTapWhere = struct {
	ID         whereHelperint64
	CreateDate whereHelpernull_String
	Quantity   whereHelpernull_String
	Inn        whereHelpernull_String
	KPP        whereHelpernull_String
	Version    whereHelpernull_String
	State      whereHelpernull_String
	Status     whereHelpernull_String
	OrderID    whereHelpernull_String
	Archive    whereHelpernull_Int64
	JSON       whereHelpernull_String
}{
	ID:         whereHelperint64{field: "\"order_mark_connecting_tap\".\"id\""},
	CreateDate: whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"create_date\""},
	Quantity:   whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"quantity\""},
	Inn:        whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"inn\""},
	KPP:        whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"kpp\""},
	Version:    whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"version\""},
	State:      whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"state\""},
	Status:     whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"status\""},
	OrderID:    whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"order_id\""},
	Archive:    whereHelpernull_Int64{field: "\"order_mark_connecting_tap\".\"archive\""},
	JSON:       whereHelpernull_String{field: "\"order_mark_connecting_tap\".\"json\""},
}

// OrderMarkConnectingTapRels is where relationship names are stored.
var OrderMarkConnectingTapRels = struct {
}{}

// orderMarkConnectingTapR is where relationships are stored.
type orderMarkConnectingTapR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkConnectingTapR) NewStruct() *orderMarkConnectingTapR {
	return &orderMarkConnectingTapR{}
}

// orderMarkConnectingTapL is where Load methods for each relationship are stored.
type orderMarkConnectingTapL struct{}

var (
	orderMarkConnectingTapAllColumns            = []string{"id", "create_date", "quantity", "inn", "kpp", "version", "state", "status", "order_id", "archive", "json"}
	orderMarkConnectingTapColumnsWithoutDefault = []string{}
	orderMarkConnectingTapColumnsWithDefault    = []string{"id", "create_date", "quantity", "inn", "kpp", "version", "state", "status", "order_id", "archive", "json"}
	orderMarkConnectingTapPrimaryKeyColumns     = []string{"id"}
	orderMarkConnectingTapGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkConnectingTapSlice is an alias for a slice of pointers to OrderMarkConnectingTap.
	// This should almost always be used instead of []OrderMarkConnectingTap.
	OrderMarkConnectingTapSlice []*OrderMarkConnectingTap
	// OrderMarkConnectingTapHook is the signature for custom OrderMarkConnectingTap hook methods
	OrderMarkConnectingTapHook func(context.Context, boil.ContextExecutor, *OrderMarkConnectingTap) error

	orderMarkConnectingTapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkConnectingTapType                 = reflect.TypeOf(&OrderMarkConnectingTap{})
	orderMarkConnectingTapMapping              = queries.MakeStructMapping(orderMarkConnectingTapType)
	orderMarkConnectingTapPrimaryKeyMapping, _ = queries.BindMapping(orderMarkConnectingTapType, orderMarkConnectingTapMapping, orderMarkConnectingTapPrimaryKeyColumns)
	orderMarkConnectingTapInsertCacheMut       sync.RWMutex
	orderMarkConnectingTapInsertCache          = make(map[string]insertCache)
	orderMarkConnectingTapUpdateCacheMut       sync.RWMutex
	orderMarkConnectingTapUpdateCache          = make(map[string]updateCache)
	orderMarkConnectingTapUpsertCacheMut       sync.RWMutex
	orderMarkConnectingTapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkConnectingTapAfterSelectMu sync.Mutex
var orderMarkConnectingTapAfterSelectHooks []OrderMarkConnectingTapHook

var orderMarkConnectingTapBeforeInsertMu sync.Mutex
var orderMarkConnectingTapBeforeInsertHooks []OrderMarkConnectingTapHook
var orderMarkConnectingTapAfterInsertMu sync.Mutex
var orderMarkConnectingTapAfterInsertHooks []OrderMarkConnectingTapHook

var orderMarkConnectingTapBeforeUpdateMu sync.Mutex
var orderMarkConnectingTapBeforeUpdateHooks []OrderMarkConnectingTapHook
var orderMarkConnectingTapAfterUpdateMu sync.Mutex
var orderMarkConnectingTapAfterUpdateHooks []OrderMarkConnectingTapHook

var orderMarkConnectingTapBeforeDeleteMu sync.Mutex
var orderMarkConnectingTapBeforeDeleteHooks []OrderMarkConnectingTapHook
var orderMarkConnectingTapAfterDeleteMu sync.Mutex
var orderMarkConnectingTapAfterDeleteHooks []OrderMarkConnectingTapHook

var orderMarkConnectingTapBeforeUpsertMu sync.Mutex
var orderMarkConnectingTapBeforeUpsertHooks []OrderMarkConnectingTapHook
var orderMarkConnectingTapAfterUpsertMu sync.Mutex
var orderMarkConnectingTapAfterUpsertHooks []OrderMarkConnectingTapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkConnectingTap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkConnectingTap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkConnectingTap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkConnectingTap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkConnectingTap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkConnectingTap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkConnectingTap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkConnectingTap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkConnectingTap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkConnectingTapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkConnectingTapHook registers your hook function for all future operations.
func AddOrderMarkConnectingTapHook(hookPoint boil.HookPoint, orderMarkConnectingTapHook OrderMarkConnectingTapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkConnectingTapAfterSelectMu.Lock()
		orderMarkConnectingTapAfterSelectHooks = append(orderMarkConnectingTapAfterSelectHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkConnectingTapBeforeInsertMu.Lock()
		orderMarkConnectingTapBeforeInsertHooks = append(orderMarkConnectingTapBeforeInsertHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkConnectingTapAfterInsertMu.Lock()
		orderMarkConnectingTapAfterInsertHooks = append(orderMarkConnectingTapAfterInsertHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkConnectingTapBeforeUpdateMu.Lock()
		orderMarkConnectingTapBeforeUpdateHooks = append(orderMarkConnectingTapBeforeUpdateHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkConnectingTapAfterUpdateMu.Lock()
		orderMarkConnectingTapAfterUpdateHooks = append(orderMarkConnectingTapAfterUpdateHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkConnectingTapBeforeDeleteMu.Lock()
		orderMarkConnectingTapBeforeDeleteHooks = append(orderMarkConnectingTapBeforeDeleteHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkConnectingTapAfterDeleteMu.Lock()
		orderMarkConnectingTapAfterDeleteHooks = append(orderMarkConnectingTapAfterDeleteHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkConnectingTapBeforeUpsertMu.Lock()
		orderMarkConnectingTapBeforeUpsertHooks = append(orderMarkConnectingTapBeforeUpsertHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkConnectingTapAfterUpsertMu.Lock()
		orderMarkConnectingTapAfterUpsertHooks = append(orderMarkConnectingTapAfterUpsertHooks, orderMarkConnectingTapHook)
		orderMarkConnectingTapAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkConnectingTap record from the query using the global executor.
func (q orderMarkConnectingTapQuery) OneG(ctx context.Context) (*OrderMarkConnectingTap, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkConnectingTap record from the query.
func (q orderMarkConnectingTapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkConnectingTap, error) {
	o := &OrderMarkConnectingTap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_connecting_tap")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkConnectingTap records from the query using the global executor.
func (q orderMarkConnectingTapQuery) AllG(ctx context.Context) (OrderMarkConnectingTapSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkConnectingTap records from the query.
func (q orderMarkConnectingTapQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkConnectingTapSlice, error) {
	var o []*OrderMarkConnectingTap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkConnectingTap slice")
	}

	if len(orderMarkConnectingTapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkConnectingTap records in the query using the global executor
func (q orderMarkConnectingTapQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkConnectingTap records in the query.
func (q orderMarkConnectingTapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_connecting_tap rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkConnectingTapQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkConnectingTapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_connecting_tap exists")
	}

	return count > 0, nil
}

// OrderMarkConnectingTaps retrieves all the records using an executor.
func OrderMarkConnectingTaps(mods ...qm.QueryMod) orderMarkConnectingTapQuery {
	mods = append(mods, qm.From("\"order_mark_connecting_tap\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_mark_connecting_tap\".*"})
	}

	return orderMarkConnectingTapQuery{q}
}

// FindOrderMarkConnectingTapG retrieves a single record by ID.
func FindOrderMarkConnectingTapG(ctx context.Context, iD int64, selectCols ...string) (*OrderMarkConnectingTap, error) {
	return FindOrderMarkConnectingTap(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkConnectingTap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkConnectingTap(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderMarkConnectingTap, error) {
	orderMarkConnectingTapObj := &OrderMarkConnectingTap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_mark_connecting_tap\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkConnectingTapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_connecting_tap")
	}

	if err = orderMarkConnectingTapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkConnectingTapObj, err
	}

	return orderMarkConnectingTapObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkConnectingTap) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkConnectingTap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_connecting_tap provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkConnectingTapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkConnectingTapInsertCacheMut.RLock()
	cache, cached := orderMarkConnectingTapInsertCache[key]
	orderMarkConnectingTapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkConnectingTapAllColumns,
			orderMarkConnectingTapColumnsWithDefault,
			orderMarkConnectingTapColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkConnectingTapGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkConnectingTapType, orderMarkConnectingTapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkConnectingTapType, orderMarkConnectingTapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_mark_connecting_tap\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_mark_connecting_tap\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_connecting_tap")
	}

	if !cached {
		orderMarkConnectingTapInsertCacheMut.Lock()
		orderMarkConnectingTapInsertCache[key] = cache
		orderMarkConnectingTapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkConnectingTap record using the global executor.
// See Update for more documentation.
func (o *OrderMarkConnectingTap) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkConnectingTap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkConnectingTap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkConnectingTapUpdateCacheMut.RLock()
	cache, cached := orderMarkConnectingTapUpdateCache[key]
	orderMarkConnectingTapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkConnectingTapAllColumns,
			orderMarkConnectingTapPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkConnectingTapGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_connecting_tap, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_mark_connecting_tap\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderMarkConnectingTapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkConnectingTapType, orderMarkConnectingTapMapping, append(wl, orderMarkConnectingTapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_connecting_tap row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_connecting_tap")
	}

	if !cached {
		orderMarkConnectingTapUpdateCacheMut.Lock()
		orderMarkConnectingTapUpdateCache[key] = cache
		orderMarkConnectingTapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkConnectingTapQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkConnectingTapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_connecting_tap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_connecting_tap")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkConnectingTapSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkConnectingTapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkConnectingTapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_mark_connecting_tap\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkConnectingTapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkConnectingTap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkConnectingTap")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkConnectingTap) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderMarkConnectingTap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_connecting_tap provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkConnectingTapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkConnectingTapUpsertCacheMut.RLock()
	cache, cached := orderMarkConnectingTapUpsertCache[key]
	orderMarkConnectingTapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderMarkConnectingTapAllColumns,
			orderMarkConnectingTapColumnsWithDefault,
			orderMarkConnectingTapColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderMarkConnectingTapAllColumns,
			orderMarkConnectingTapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_connecting_tap, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderMarkConnectingTapPrimaryKeyColumns))
			copy(conflict, orderMarkConnectingTapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"order_mark_connecting_tap\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderMarkConnectingTapType, orderMarkConnectingTapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkConnectingTapType, orderMarkConnectingTapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_connecting_tap")
	}

	if !cached {
		orderMarkConnectingTapUpsertCacheMut.Lock()
		orderMarkConnectingTapUpsertCache[key] = cache
		orderMarkConnectingTapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkConnectingTap record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkConnectingTap) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkConnectingTap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkConnectingTap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkConnectingTap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkConnectingTapPrimaryKeyMapping)
	sql := "DELETE FROM \"order_mark_connecting_tap\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_connecting_tap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_connecting_tap")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkConnectingTapQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkConnectingTapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkConnectingTapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_connecting_tap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_connecting_tap")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkConnectingTapSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkConnectingTapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkConnectingTapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkConnectingTapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_mark_connecting_tap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkConnectingTapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkConnectingTap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_connecting_tap")
	}

	if len(orderMarkConnectingTapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkConnectingTap) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkConnectingTap provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkConnectingTap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkConnectingTap(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkConnectingTapSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkConnectingTapSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkConnectingTapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkConnectingTapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkConnectingTapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_mark_connecting_tap\".* FROM \"order_mark_connecting_tap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderMarkConnectingTapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkConnectingTapSlice")
	}

	*o = slice

	return nil
}

// OrderMarkConnectingTapExistsG checks if the OrderMarkConnectingTap row exists.
func OrderMarkConnectingTapExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrderMarkConnectingTapExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkConnectingTapExists checks if the OrderMarkConnectingTap row exists.
func OrderMarkConnectingTapExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_mark_connecting_tap\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_connecting_tap exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkConnectingTap row exists.
func (o *OrderMarkConnectingTap) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkConnectingTapExists(ctx, exec, o.ID)
}
