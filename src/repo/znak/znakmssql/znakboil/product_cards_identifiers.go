// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductCardsIdentifier is an object representing the database table.
type ProductCardsIdentifier struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductCards null.Int    `boil:"id_product_cards" json:"id_product_cards,omitempty" toml:"id_product_cards" yaml:"id_product_cards,omitempty"`
	Value          null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Type           null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Multiplier     null.Int    `boil:"multiplier" json:"multiplier,omitempty" toml:"multiplier" yaml:"multiplier,omitempty"`
	Level          null.String `boil:"level" json:"level,omitempty" toml:"level" yaml:"level,omitempty"`

	R *productCardsIdentifierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productCardsIdentifierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductCardsIdentifierColumns = struct {
	ID             string
	IDProductCards string
	Value          string
	Type           string
	Multiplier     string
	Level          string
}{
	ID:             "id",
	IDProductCards: "id_product_cards",
	Value:          "value",
	Type:           "type",
	Multiplier:     "multiplier",
	Level:          "level",
}

var ProductCardsIdentifierTableColumns = struct {
	ID             string
	IDProductCards string
	Value          string
	Type           string
	Multiplier     string
	Level          string
}{
	ID:             "product_cards_identifiers.id",
	IDProductCards: "product_cards_identifiers.id_product_cards",
	Value:          "product_cards_identifiers.value",
	Type:           "product_cards_identifiers.type",
	Multiplier:     "product_cards_identifiers.multiplier",
	Level:          "product_cards_identifiers.level",
}

// Generated where

var ProductCardsIdentifierWhere = struct {
	ID             whereHelperint
	IDProductCards whereHelpernull_Int
	Value          whereHelpernull_String
	Type           whereHelpernull_String
	Multiplier     whereHelpernull_Int
	Level          whereHelpernull_String
}{
	ID:             whereHelperint{field: "[dbo].[product_cards_identifiers].[id]"},
	IDProductCards: whereHelpernull_Int{field: "[dbo].[product_cards_identifiers].[id_product_cards]"},
	Value:          whereHelpernull_String{field: "[dbo].[product_cards_identifiers].[value]"},
	Type:           whereHelpernull_String{field: "[dbo].[product_cards_identifiers].[type]"},
	Multiplier:     whereHelpernull_Int{field: "[dbo].[product_cards_identifiers].[multiplier]"},
	Level:          whereHelpernull_String{field: "[dbo].[product_cards_identifiers].[level]"},
}

// ProductCardsIdentifierRels is where relationship names are stored.
var ProductCardsIdentifierRels = struct {
}{}

// productCardsIdentifierR is where relationships are stored.
type productCardsIdentifierR struct {
}

// NewStruct creates a new relationship struct
func (*productCardsIdentifierR) NewStruct() *productCardsIdentifierR {
	return &productCardsIdentifierR{}
}

// productCardsIdentifierL is where Load methods for each relationship are stored.
type productCardsIdentifierL struct{}

var (
	productCardsIdentifierAllColumns            = []string{"id", "id_product_cards", "value", "type", "multiplier", "level"}
	productCardsIdentifierColumnsWithoutDefault = []string{"id_product_cards", "value", "type", "multiplier", "level"}
	productCardsIdentifierColumnsWithDefault    = []string{"id"}
	productCardsIdentifierPrimaryKeyColumns     = []string{"id"}
	productCardsIdentifierGeneratedColumns      = []string{"id"}
)

type (
	// ProductCardsIdentifierSlice is an alias for a slice of pointers to ProductCardsIdentifier.
	// This should almost always be used instead of []ProductCardsIdentifier.
	ProductCardsIdentifierSlice []*ProductCardsIdentifier
	// ProductCardsIdentifierHook is the signature for custom ProductCardsIdentifier hook methods
	ProductCardsIdentifierHook func(context.Context, boil.ContextExecutor, *ProductCardsIdentifier) error

	productCardsIdentifierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productCardsIdentifierType                 = reflect.TypeOf(&ProductCardsIdentifier{})
	productCardsIdentifierMapping              = queries.MakeStructMapping(productCardsIdentifierType)
	productCardsIdentifierPrimaryKeyMapping, _ = queries.BindMapping(productCardsIdentifierType, productCardsIdentifierMapping, productCardsIdentifierPrimaryKeyColumns)
	productCardsIdentifierInsertCacheMut       sync.RWMutex
	productCardsIdentifierInsertCache          = make(map[string]insertCache)
	productCardsIdentifierUpdateCacheMut       sync.RWMutex
	productCardsIdentifierUpdateCache          = make(map[string]updateCache)
	productCardsIdentifierUpsertCacheMut       sync.RWMutex
	productCardsIdentifierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productCardsIdentifierAfterSelectMu sync.Mutex
var productCardsIdentifierAfterSelectHooks []ProductCardsIdentifierHook

var productCardsIdentifierBeforeInsertMu sync.Mutex
var productCardsIdentifierBeforeInsertHooks []ProductCardsIdentifierHook
var productCardsIdentifierAfterInsertMu sync.Mutex
var productCardsIdentifierAfterInsertHooks []ProductCardsIdentifierHook

var productCardsIdentifierBeforeUpdateMu sync.Mutex
var productCardsIdentifierBeforeUpdateHooks []ProductCardsIdentifierHook
var productCardsIdentifierAfterUpdateMu sync.Mutex
var productCardsIdentifierAfterUpdateHooks []ProductCardsIdentifierHook

var productCardsIdentifierBeforeDeleteMu sync.Mutex
var productCardsIdentifierBeforeDeleteHooks []ProductCardsIdentifierHook
var productCardsIdentifierAfterDeleteMu sync.Mutex
var productCardsIdentifierAfterDeleteHooks []ProductCardsIdentifierHook

var productCardsIdentifierBeforeUpsertMu sync.Mutex
var productCardsIdentifierBeforeUpsertHooks []ProductCardsIdentifierHook
var productCardsIdentifierAfterUpsertMu sync.Mutex
var productCardsIdentifierAfterUpsertHooks []ProductCardsIdentifierHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductCardsIdentifier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductCardsIdentifier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductCardsIdentifier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductCardsIdentifier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductCardsIdentifier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductCardsIdentifier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductCardsIdentifier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductCardsIdentifier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductCardsIdentifier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsIdentifierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductCardsIdentifierHook registers your hook function for all future operations.
func AddProductCardsIdentifierHook(hookPoint boil.HookPoint, productCardsIdentifierHook ProductCardsIdentifierHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productCardsIdentifierAfterSelectMu.Lock()
		productCardsIdentifierAfterSelectHooks = append(productCardsIdentifierAfterSelectHooks, productCardsIdentifierHook)
		productCardsIdentifierAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productCardsIdentifierBeforeInsertMu.Lock()
		productCardsIdentifierBeforeInsertHooks = append(productCardsIdentifierBeforeInsertHooks, productCardsIdentifierHook)
		productCardsIdentifierBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productCardsIdentifierAfterInsertMu.Lock()
		productCardsIdentifierAfterInsertHooks = append(productCardsIdentifierAfterInsertHooks, productCardsIdentifierHook)
		productCardsIdentifierAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productCardsIdentifierBeforeUpdateMu.Lock()
		productCardsIdentifierBeforeUpdateHooks = append(productCardsIdentifierBeforeUpdateHooks, productCardsIdentifierHook)
		productCardsIdentifierBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productCardsIdentifierAfterUpdateMu.Lock()
		productCardsIdentifierAfterUpdateHooks = append(productCardsIdentifierAfterUpdateHooks, productCardsIdentifierHook)
		productCardsIdentifierAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productCardsIdentifierBeforeDeleteMu.Lock()
		productCardsIdentifierBeforeDeleteHooks = append(productCardsIdentifierBeforeDeleteHooks, productCardsIdentifierHook)
		productCardsIdentifierBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productCardsIdentifierAfterDeleteMu.Lock()
		productCardsIdentifierAfterDeleteHooks = append(productCardsIdentifierAfterDeleteHooks, productCardsIdentifierHook)
		productCardsIdentifierAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productCardsIdentifierBeforeUpsertMu.Lock()
		productCardsIdentifierBeforeUpsertHooks = append(productCardsIdentifierBeforeUpsertHooks, productCardsIdentifierHook)
		productCardsIdentifierBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productCardsIdentifierAfterUpsertMu.Lock()
		productCardsIdentifierAfterUpsertHooks = append(productCardsIdentifierAfterUpsertHooks, productCardsIdentifierHook)
		productCardsIdentifierAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productCardsIdentifier record from the query using the global executor.
func (q productCardsIdentifierQuery) OneG(ctx context.Context) (*ProductCardsIdentifier, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productCardsIdentifier record from the query.
func (q productCardsIdentifierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductCardsIdentifier, error) {
	o := &ProductCardsIdentifier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for product_cards_identifiers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductCardsIdentifier records from the query using the global executor.
func (q productCardsIdentifierQuery) AllG(ctx context.Context) (ProductCardsIdentifierSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductCardsIdentifier records from the query.
func (q productCardsIdentifierQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductCardsIdentifierSlice, error) {
	var o []*ProductCardsIdentifier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to ProductCardsIdentifier slice")
	}

	if len(productCardsIdentifierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductCardsIdentifier records in the query using the global executor
func (q productCardsIdentifierQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductCardsIdentifier records in the query.
func (q productCardsIdentifierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count product_cards_identifiers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productCardsIdentifierQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productCardsIdentifierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if product_cards_identifiers exists")
	}

	return count > 0, nil
}

// ProductCardsIdentifiers retrieves all the records using an executor.
func ProductCardsIdentifiers(mods ...qm.QueryMod) productCardsIdentifierQuery {
	mods = append(mods, qm.From("[dbo].[product_cards_identifiers]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[product_cards_identifiers].*"})
	}

	return productCardsIdentifierQuery{q}
}

// FindProductCardsIdentifierG retrieves a single record by ID.
func FindProductCardsIdentifierG(ctx context.Context, iD int, selectCols ...string) (*ProductCardsIdentifier, error) {
	return FindProductCardsIdentifier(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductCardsIdentifier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductCardsIdentifier(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProductCardsIdentifier, error) {
	productCardsIdentifierObj := &ProductCardsIdentifier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[product_cards_identifiers] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productCardsIdentifierObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from product_cards_identifiers")
	}

	if err = productCardsIdentifierObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productCardsIdentifierObj, err
	}

	return productCardsIdentifierObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductCardsIdentifier) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductCardsIdentifier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_cards_identifiers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCardsIdentifierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productCardsIdentifierInsertCacheMut.RLock()
	cache, cached := productCardsIdentifierInsertCache[key]
	productCardsIdentifierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productCardsIdentifierAllColumns,
			productCardsIdentifierColumnsWithDefault,
			productCardsIdentifierColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productCardsIdentifierGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productCardsIdentifierType, productCardsIdentifierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productCardsIdentifierType, productCardsIdentifierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[product_cards_identifiers] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[product_cards_identifiers] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into product_cards_identifiers")
	}

	if !cached {
		productCardsIdentifierInsertCacheMut.Lock()
		productCardsIdentifierInsertCache[key] = cache
		productCardsIdentifierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductCardsIdentifier record using the global executor.
// See Update for more documentation.
func (o *ProductCardsIdentifier) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductCardsIdentifier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductCardsIdentifier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productCardsIdentifierUpdateCacheMut.RLock()
	cache, cached := productCardsIdentifierUpdateCache[key]
	productCardsIdentifierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productCardsIdentifierAllColumns,
			productCardsIdentifierPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productCardsIdentifierGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update product_cards_identifiers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[product_cards_identifiers] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, productCardsIdentifierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productCardsIdentifierType, productCardsIdentifierMapping, append(wl, productCardsIdentifierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update product_cards_identifiers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for product_cards_identifiers")
	}

	if !cached {
		productCardsIdentifierUpdateCacheMut.Lock()
		productCardsIdentifierUpdateCache[key] = cache
		productCardsIdentifierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productCardsIdentifierQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productCardsIdentifierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for product_cards_identifiers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for product_cards_identifiers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductCardsIdentifierSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductCardsIdentifierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsIdentifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[product_cards_identifiers] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productCardsIdentifierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in productCardsIdentifier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all productCardsIdentifier")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductCardsIdentifier) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ProductCardsIdentifier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_cards_identifiers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCardsIdentifierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productCardsIdentifierUpsertCacheMut.RLock()
	cache, cached := productCardsIdentifierUpsertCache[key]
	productCardsIdentifierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productCardsIdentifierAllColumns,
			productCardsIdentifierColumnsWithDefault,
			productCardsIdentifierColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, productCardsIdentifierGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(productCardsIdentifierPrimaryKeyColumns, v) && strmangle.ContainsAny(productCardsIdentifierColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("znakboil: unable to upsert product_cards_identifiers, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			productCardsIdentifierAllColumns,
			productCardsIdentifierPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productCardsIdentifierGeneratedColumns)

		ret := strmangle.SetComplement(productCardsIdentifierAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("znakboil: unable to upsert product_cards_identifiers, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[product_cards_identifiers]", productCardsIdentifierPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(productCardsIdentifierPrimaryKeyColumns))
		copy(whitelist, productCardsIdentifierPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(productCardsIdentifierType, productCardsIdentifierMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productCardsIdentifierType, productCardsIdentifierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert product_cards_identifiers")
	}

	if !cached {
		productCardsIdentifierUpsertCacheMut.Lock()
		productCardsIdentifierUpsertCache[key] = cache
		productCardsIdentifierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductCardsIdentifier record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductCardsIdentifier) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductCardsIdentifier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductCardsIdentifier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no ProductCardsIdentifier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productCardsIdentifierPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[product_cards_identifiers] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from product_cards_identifiers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for product_cards_identifiers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productCardsIdentifierQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productCardsIdentifierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no productCardsIdentifierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from product_cards_identifiers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_cards_identifiers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductCardsIdentifierSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductCardsIdentifierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productCardsIdentifierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsIdentifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[product_cards_identifiers] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCardsIdentifierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from productCardsIdentifier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_cards_identifiers")
	}

	if len(productCardsIdentifierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductCardsIdentifier) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no ProductCardsIdentifier provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductCardsIdentifier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductCardsIdentifier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCardsIdentifierSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty ProductCardsIdentifierSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCardsIdentifierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductCardsIdentifierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsIdentifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[product_cards_identifiers].* FROM [dbo].[product_cards_identifiers] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCardsIdentifierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in ProductCardsIdentifierSlice")
	}

	*o = slice

	return nil
}

// ProductCardsIdentifierExistsG checks if the ProductCardsIdentifier row exists.
func ProductCardsIdentifierExistsG(ctx context.Context, iD int) (bool, error) {
	return ProductCardsIdentifierExists(ctx, boil.GetContextDB(), iD)
}

// ProductCardsIdentifierExists checks if the ProductCardsIdentifier row exists.
func ProductCardsIdentifierExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[product_cards_identifiers] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if product_cards_identifiers exists")
	}

	return exists, nil
}

// Exists checks if the ProductCardsIdentifier row exists.
func (o *ProductCardsIdentifier) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductCardsIdentifierExists(ctx, exec, o.ID)
}
