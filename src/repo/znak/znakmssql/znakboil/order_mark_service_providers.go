// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkServiceProvider is an object representing the database table.
type OrderMarkServiceProvider struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderMarkTemplateID null.String `boil:"order_mark_template_id" json:"order_mark_template_id,omitempty" toml:"order_mark_template_id" yaml:"order_mark_template_id,omitempty"`
	ProviderID          null.String `boil:"provider_id" json:"provider_id,omitempty" toml:"provider_id" yaml:"provider_id,omitempty"`
	ProviderName        null.String `boil:"provider_name" json:"provider_name,omitempty" toml:"provider_name" yaml:"provider_name,omitempty"`
	ProviderPlatform    null.String `boil:"provider_platform" json:"provider_platform,omitempty" toml:"provider_platform" yaml:"provider_platform,omitempty"`
	ProviderTaxID       null.String `boil:"provider_tax_id" json:"provider_tax_id,omitempty" toml:"provider_tax_id" yaml:"provider_tax_id,omitempty"`
	ProviderCountry     null.String `boil:"provider_country" json:"provider_country,omitempty" toml:"provider_country" yaml:"provider_country,omitempty"`
	ProviderEmail       null.String `boil:"provider_email" json:"provider_email,omitempty" toml:"provider_email" yaml:"provider_email,omitempty"`
	ProviderRole        null.String `boil:"provider_role" json:"provider_role,omitempty" toml:"provider_role" yaml:"provider_role,omitempty"`
	ProviderGroup       null.String `boil:"provider_group" json:"provider_group,omitempty" toml:"provider_group" yaml:"provider_group,omitempty"`

	R *orderMarkServiceProviderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkServiceProviderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkServiceProviderColumns = struct {
	ID                  string
	OrderMarkTemplateID string
	ProviderID          string
	ProviderName        string
	ProviderPlatform    string
	ProviderTaxID       string
	ProviderCountry     string
	ProviderEmail       string
	ProviderRole        string
	ProviderGroup       string
}{
	ID:                  "id",
	OrderMarkTemplateID: "order_mark_template_id",
	ProviderID:          "provider_id",
	ProviderName:        "provider_name",
	ProviderPlatform:    "provider_platform",
	ProviderTaxID:       "provider_tax_id",
	ProviderCountry:     "provider_country",
	ProviderEmail:       "provider_email",
	ProviderRole:        "provider_role",
	ProviderGroup:       "provider_group",
}

var OrderMarkServiceProviderTableColumns = struct {
	ID                  string
	OrderMarkTemplateID string
	ProviderID          string
	ProviderName        string
	ProviderPlatform    string
	ProviderTaxID       string
	ProviderCountry     string
	ProviderEmail       string
	ProviderRole        string
	ProviderGroup       string
}{
	ID:                  "order_mark_service_providers.id",
	OrderMarkTemplateID: "order_mark_service_providers.order_mark_template_id",
	ProviderID:          "order_mark_service_providers.provider_id",
	ProviderName:        "order_mark_service_providers.provider_name",
	ProviderPlatform:    "order_mark_service_providers.provider_platform",
	ProviderTaxID:       "order_mark_service_providers.provider_tax_id",
	ProviderCountry:     "order_mark_service_providers.provider_country",
	ProviderEmail:       "order_mark_service_providers.provider_email",
	ProviderRole:        "order_mark_service_providers.provider_role",
	ProviderGroup:       "order_mark_service_providers.provider_group",
}

// Generated where

var OrderMarkServiceProviderWhere = struct {
	ID                  whereHelperint
	OrderMarkTemplateID whereHelpernull_String
	ProviderID          whereHelpernull_String
	ProviderName        whereHelpernull_String
	ProviderPlatform    whereHelpernull_String
	ProviderTaxID       whereHelpernull_String
	ProviderCountry     whereHelpernull_String
	ProviderEmail       whereHelpernull_String
	ProviderRole        whereHelpernull_String
	ProviderGroup       whereHelpernull_String
}{
	ID:                  whereHelperint{field: "[dbo].[order_mark_service_providers].[id]"},
	OrderMarkTemplateID: whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[order_mark_template_id]"},
	ProviderID:          whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_id]"},
	ProviderName:        whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_name]"},
	ProviderPlatform:    whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_platform]"},
	ProviderTaxID:       whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_tax_id]"},
	ProviderCountry:     whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_country]"},
	ProviderEmail:       whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_email]"},
	ProviderRole:        whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_role]"},
	ProviderGroup:       whereHelpernull_String{field: "[dbo].[order_mark_service_providers].[provider_group]"},
}

// OrderMarkServiceProviderRels is where relationship names are stored.
var OrderMarkServiceProviderRels = struct {
}{}

// orderMarkServiceProviderR is where relationships are stored.
type orderMarkServiceProviderR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkServiceProviderR) NewStruct() *orderMarkServiceProviderR {
	return &orderMarkServiceProviderR{}
}

// orderMarkServiceProviderL is where Load methods for each relationship are stored.
type orderMarkServiceProviderL struct{}

var (
	orderMarkServiceProviderAllColumns            = []string{"id", "order_mark_template_id", "provider_id", "provider_name", "provider_platform", "provider_tax_id", "provider_country", "provider_email", "provider_role", "provider_group"}
	orderMarkServiceProviderColumnsWithoutDefault = []string{"order_mark_template_id", "provider_id", "provider_name", "provider_platform", "provider_tax_id", "provider_country", "provider_email", "provider_role", "provider_group"}
	orderMarkServiceProviderColumnsWithDefault    = []string{"id"}
	orderMarkServiceProviderPrimaryKeyColumns     = []string{"id"}
	orderMarkServiceProviderGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkServiceProviderSlice is an alias for a slice of pointers to OrderMarkServiceProvider.
	// This should almost always be used instead of []OrderMarkServiceProvider.
	OrderMarkServiceProviderSlice []*OrderMarkServiceProvider
	// OrderMarkServiceProviderHook is the signature for custom OrderMarkServiceProvider hook methods
	OrderMarkServiceProviderHook func(context.Context, boil.ContextExecutor, *OrderMarkServiceProvider) error

	orderMarkServiceProviderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkServiceProviderType                 = reflect.TypeOf(&OrderMarkServiceProvider{})
	orderMarkServiceProviderMapping              = queries.MakeStructMapping(orderMarkServiceProviderType)
	orderMarkServiceProviderPrimaryKeyMapping, _ = queries.BindMapping(orderMarkServiceProviderType, orderMarkServiceProviderMapping, orderMarkServiceProviderPrimaryKeyColumns)
	orderMarkServiceProviderInsertCacheMut       sync.RWMutex
	orderMarkServiceProviderInsertCache          = make(map[string]insertCache)
	orderMarkServiceProviderUpdateCacheMut       sync.RWMutex
	orderMarkServiceProviderUpdateCache          = make(map[string]updateCache)
	orderMarkServiceProviderUpsertCacheMut       sync.RWMutex
	orderMarkServiceProviderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkServiceProviderAfterSelectMu sync.Mutex
var orderMarkServiceProviderAfterSelectHooks []OrderMarkServiceProviderHook

var orderMarkServiceProviderBeforeInsertMu sync.Mutex
var orderMarkServiceProviderBeforeInsertHooks []OrderMarkServiceProviderHook
var orderMarkServiceProviderAfterInsertMu sync.Mutex
var orderMarkServiceProviderAfterInsertHooks []OrderMarkServiceProviderHook

var orderMarkServiceProviderBeforeUpdateMu sync.Mutex
var orderMarkServiceProviderBeforeUpdateHooks []OrderMarkServiceProviderHook
var orderMarkServiceProviderAfterUpdateMu sync.Mutex
var orderMarkServiceProviderAfterUpdateHooks []OrderMarkServiceProviderHook

var orderMarkServiceProviderBeforeDeleteMu sync.Mutex
var orderMarkServiceProviderBeforeDeleteHooks []OrderMarkServiceProviderHook
var orderMarkServiceProviderAfterDeleteMu sync.Mutex
var orderMarkServiceProviderAfterDeleteHooks []OrderMarkServiceProviderHook

var orderMarkServiceProviderBeforeUpsertMu sync.Mutex
var orderMarkServiceProviderBeforeUpsertHooks []OrderMarkServiceProviderHook
var orderMarkServiceProviderAfterUpsertMu sync.Mutex
var orderMarkServiceProviderAfterUpsertHooks []OrderMarkServiceProviderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkServiceProvider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkServiceProvider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkServiceProvider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkServiceProvider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkServiceProvider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkServiceProvider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkServiceProvider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkServiceProvider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkServiceProvider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkServiceProviderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkServiceProviderHook registers your hook function for all future operations.
func AddOrderMarkServiceProviderHook(hookPoint boil.HookPoint, orderMarkServiceProviderHook OrderMarkServiceProviderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkServiceProviderAfterSelectMu.Lock()
		orderMarkServiceProviderAfterSelectHooks = append(orderMarkServiceProviderAfterSelectHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkServiceProviderBeforeInsertMu.Lock()
		orderMarkServiceProviderBeforeInsertHooks = append(orderMarkServiceProviderBeforeInsertHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkServiceProviderAfterInsertMu.Lock()
		orderMarkServiceProviderAfterInsertHooks = append(orderMarkServiceProviderAfterInsertHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkServiceProviderBeforeUpdateMu.Lock()
		orderMarkServiceProviderBeforeUpdateHooks = append(orderMarkServiceProviderBeforeUpdateHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkServiceProviderAfterUpdateMu.Lock()
		orderMarkServiceProviderAfterUpdateHooks = append(orderMarkServiceProviderAfterUpdateHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkServiceProviderBeforeDeleteMu.Lock()
		orderMarkServiceProviderBeforeDeleteHooks = append(orderMarkServiceProviderBeforeDeleteHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkServiceProviderAfterDeleteMu.Lock()
		orderMarkServiceProviderAfterDeleteHooks = append(orderMarkServiceProviderAfterDeleteHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkServiceProviderBeforeUpsertMu.Lock()
		orderMarkServiceProviderBeforeUpsertHooks = append(orderMarkServiceProviderBeforeUpsertHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkServiceProviderAfterUpsertMu.Lock()
		orderMarkServiceProviderAfterUpsertHooks = append(orderMarkServiceProviderAfterUpsertHooks, orderMarkServiceProviderHook)
		orderMarkServiceProviderAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkServiceProvider record from the query using the global executor.
func (q orderMarkServiceProviderQuery) OneG(ctx context.Context) (*OrderMarkServiceProvider, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkServiceProvider record from the query.
func (q orderMarkServiceProviderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkServiceProvider, error) {
	o := &OrderMarkServiceProvider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_service_providers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkServiceProvider records from the query using the global executor.
func (q orderMarkServiceProviderQuery) AllG(ctx context.Context) (OrderMarkServiceProviderSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkServiceProvider records from the query.
func (q orderMarkServiceProviderQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkServiceProviderSlice, error) {
	var o []*OrderMarkServiceProvider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkServiceProvider slice")
	}

	if len(orderMarkServiceProviderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkServiceProvider records in the query using the global executor
func (q orderMarkServiceProviderQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkServiceProvider records in the query.
func (q orderMarkServiceProviderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_service_providers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkServiceProviderQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkServiceProviderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_service_providers exists")
	}

	return count > 0, nil
}

// OrderMarkServiceProviders retrieves all the records using an executor.
func OrderMarkServiceProviders(mods ...qm.QueryMod) orderMarkServiceProviderQuery {
	mods = append(mods, qm.From("[dbo].[order_mark_service_providers]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[order_mark_service_providers].*"})
	}

	return orderMarkServiceProviderQuery{q}
}

// FindOrderMarkServiceProviderG retrieves a single record by ID.
func FindOrderMarkServiceProviderG(ctx context.Context, iD int, selectCols ...string) (*OrderMarkServiceProvider, error) {
	return FindOrderMarkServiceProvider(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkServiceProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkServiceProvider(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrderMarkServiceProvider, error) {
	orderMarkServiceProviderObj := &OrderMarkServiceProvider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[order_mark_service_providers] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkServiceProviderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_service_providers")
	}

	if err = orderMarkServiceProviderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkServiceProviderObj, err
	}

	return orderMarkServiceProviderObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkServiceProvider) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkServiceProvider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_service_providers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkServiceProviderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkServiceProviderInsertCacheMut.RLock()
	cache, cached := orderMarkServiceProviderInsertCache[key]
	orderMarkServiceProviderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkServiceProviderAllColumns,
			orderMarkServiceProviderColumnsWithDefault,
			orderMarkServiceProviderColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkServiceProviderGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkServiceProviderType, orderMarkServiceProviderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkServiceProviderType, orderMarkServiceProviderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[order_mark_service_providers] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[order_mark_service_providers] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_service_providers")
	}

	if !cached {
		orderMarkServiceProviderInsertCacheMut.Lock()
		orderMarkServiceProviderInsertCache[key] = cache
		orderMarkServiceProviderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkServiceProvider record using the global executor.
// See Update for more documentation.
func (o *OrderMarkServiceProvider) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkServiceProvider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkServiceProvider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkServiceProviderUpdateCacheMut.RLock()
	cache, cached := orderMarkServiceProviderUpdateCache[key]
	orderMarkServiceProviderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkServiceProviderAllColumns,
			orderMarkServiceProviderPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkServiceProviderGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_service_providers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[order_mark_service_providers] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, orderMarkServiceProviderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkServiceProviderType, orderMarkServiceProviderMapping, append(wl, orderMarkServiceProviderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_service_providers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_service_providers")
	}

	if !cached {
		orderMarkServiceProviderUpdateCacheMut.Lock()
		orderMarkServiceProviderUpdateCache[key] = cache
		orderMarkServiceProviderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkServiceProviderQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkServiceProviderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_service_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_service_providers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkServiceProviderSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkServiceProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkServiceProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[order_mark_service_providers] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderMarkServiceProviderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkServiceProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkServiceProvider")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkServiceProvider) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *OrderMarkServiceProvider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_service_providers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkServiceProviderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkServiceProviderUpsertCacheMut.RLock()
	cache, cached := orderMarkServiceProviderUpsertCache[key]
	orderMarkServiceProviderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderMarkServiceProviderAllColumns,
			orderMarkServiceProviderColumnsWithDefault,
			orderMarkServiceProviderColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, orderMarkServiceProviderGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(orderMarkServiceProviderPrimaryKeyColumns, v) && strmangle.ContainsAny(orderMarkServiceProviderColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_service_providers, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			orderMarkServiceProviderAllColumns,
			orderMarkServiceProviderPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, orderMarkServiceProviderGeneratedColumns)

		ret := strmangle.SetComplement(orderMarkServiceProviderAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_service_providers, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[order_mark_service_providers]", orderMarkServiceProviderPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(orderMarkServiceProviderPrimaryKeyColumns))
		copy(whitelist, orderMarkServiceProviderPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(orderMarkServiceProviderType, orderMarkServiceProviderMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkServiceProviderType, orderMarkServiceProviderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_service_providers")
	}

	if !cached {
		orderMarkServiceProviderUpsertCacheMut.Lock()
		orderMarkServiceProviderUpsertCache[key] = cache
		orderMarkServiceProviderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkServiceProvider record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkServiceProvider) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkServiceProvider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkServiceProvider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkServiceProvider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkServiceProviderPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[order_mark_service_providers] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_service_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_service_providers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkServiceProviderQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkServiceProviderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkServiceProviderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_service_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_service_providers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkServiceProviderSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkServiceProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkServiceProviderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkServiceProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[order_mark_service_providers] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkServiceProviderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkServiceProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_service_providers")
	}

	if len(orderMarkServiceProviderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkServiceProvider) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkServiceProvider provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkServiceProvider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkServiceProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkServiceProviderSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkServiceProviderSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkServiceProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkServiceProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkServiceProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[order_mark_service_providers].* FROM [dbo].[order_mark_service_providers] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkServiceProviderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkServiceProviderSlice")
	}

	*o = slice

	return nil
}

// OrderMarkServiceProviderExistsG checks if the OrderMarkServiceProvider row exists.
func OrderMarkServiceProviderExistsG(ctx context.Context, iD int) (bool, error) {
	return OrderMarkServiceProviderExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkServiceProviderExists checks if the OrderMarkServiceProvider row exists.
func OrderMarkServiceProviderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[order_mark_service_providers] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_service_providers exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkServiceProvider row exists.
func (o *OrderMarkServiceProvider) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkServiceProviderExists(ctx, exec, o.ID)
}
