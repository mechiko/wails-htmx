// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkAtkCode is an object representing the database table.
type OrderMarkAtkCode struct {
	ID                     int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDOrderMarkAtk         null.Int    `boil:"id_order_mark_atk" json:"id_order_mark_atk,omitempty" toml:"id_order_mark_atk" yaml:"id_order_mark_atk,omitempty"`
	IDOrderMarkUtilisation null.Int    `boil:"id_order_mark_utilisation" json:"id_order_mark_utilisation,omitempty" toml:"id_order_mark_utilisation" yaml:"id_order_mark_utilisation,omitempty"`
	IDOrderMarkCodes       null.Int    `boil:"id_order_mark_codes" json:"id_order_mark_codes,omitempty" toml:"id_order_mark_codes" yaml:"id_order_mark_codes,omitempty"`
	SerialNumber           null.String `boil:"serial_number" json:"serial_number,omitempty" toml:"serial_number" yaml:"serial_number,omitempty"`
	Code                   null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Status                 null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Gtin                   null.String `boil:"gtin" json:"gtin,omitempty" toml:"gtin" yaml:"gtin,omitempty"`
	ReportDate             null.String `boil:"report_date" json:"report_date,omitempty" toml:"report_date" yaml:"report_date,omitempty"`
	ReportID               null.String `boil:"report_id" json:"report_id,omitempty" toml:"report_id" yaml:"report_id,omitempty"`

	R *orderMarkAtkCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkAtkCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkAtkCodeColumns = struct {
	ID                     string
	IDOrderMarkAtk         string
	IDOrderMarkUtilisation string
	IDOrderMarkCodes       string
	SerialNumber           string
	Code                   string
	Status                 string
	Gtin                   string
	ReportDate             string
	ReportID               string
}{
	ID:                     "id",
	IDOrderMarkAtk:         "id_order_mark_atk",
	IDOrderMarkUtilisation: "id_order_mark_utilisation",
	IDOrderMarkCodes:       "id_order_mark_codes",
	SerialNumber:           "serial_number",
	Code:                   "code",
	Status:                 "status",
	Gtin:                   "gtin",
	ReportDate:             "report_date",
	ReportID:               "report_id",
}

var OrderMarkAtkCodeTableColumns = struct {
	ID                     string
	IDOrderMarkAtk         string
	IDOrderMarkUtilisation string
	IDOrderMarkCodes       string
	SerialNumber           string
	Code                   string
	Status                 string
	Gtin                   string
	ReportDate             string
	ReportID               string
}{
	ID:                     "order_mark_atk_codes.id",
	IDOrderMarkAtk:         "order_mark_atk_codes.id_order_mark_atk",
	IDOrderMarkUtilisation: "order_mark_atk_codes.id_order_mark_utilisation",
	IDOrderMarkCodes:       "order_mark_atk_codes.id_order_mark_codes",
	SerialNumber:           "order_mark_atk_codes.serial_number",
	Code:                   "order_mark_atk_codes.code",
	Status:                 "order_mark_atk_codes.status",
	Gtin:                   "order_mark_atk_codes.gtin",
	ReportDate:             "order_mark_atk_codes.report_date",
	ReportID:               "order_mark_atk_codes.report_id",
}

// Generated where

var OrderMarkAtkCodeWhere = struct {
	ID                     whereHelperint
	IDOrderMarkAtk         whereHelpernull_Int
	IDOrderMarkUtilisation whereHelpernull_Int
	IDOrderMarkCodes       whereHelpernull_Int
	SerialNumber           whereHelpernull_String
	Code                   whereHelpernull_String
	Status                 whereHelpernull_String
	Gtin                   whereHelpernull_String
	ReportDate             whereHelpernull_String
	ReportID               whereHelpernull_String
}{
	ID:                     whereHelperint{field: "[dbo].[order_mark_atk_codes].[id]"},
	IDOrderMarkAtk:         whereHelpernull_Int{field: "[dbo].[order_mark_atk_codes].[id_order_mark_atk]"},
	IDOrderMarkUtilisation: whereHelpernull_Int{field: "[dbo].[order_mark_atk_codes].[id_order_mark_utilisation]"},
	IDOrderMarkCodes:       whereHelpernull_Int{field: "[dbo].[order_mark_atk_codes].[id_order_mark_codes]"},
	SerialNumber:           whereHelpernull_String{field: "[dbo].[order_mark_atk_codes].[serial_number]"},
	Code:                   whereHelpernull_String{field: "[dbo].[order_mark_atk_codes].[code]"},
	Status:                 whereHelpernull_String{field: "[dbo].[order_mark_atk_codes].[status]"},
	Gtin:                   whereHelpernull_String{field: "[dbo].[order_mark_atk_codes].[gtin]"},
	ReportDate:             whereHelpernull_String{field: "[dbo].[order_mark_atk_codes].[report_date]"},
	ReportID:               whereHelpernull_String{field: "[dbo].[order_mark_atk_codes].[report_id]"},
}

// OrderMarkAtkCodeRels is where relationship names are stored.
var OrderMarkAtkCodeRels = struct {
}{}

// orderMarkAtkCodeR is where relationships are stored.
type orderMarkAtkCodeR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkAtkCodeR) NewStruct() *orderMarkAtkCodeR {
	return &orderMarkAtkCodeR{}
}

// orderMarkAtkCodeL is where Load methods for each relationship are stored.
type orderMarkAtkCodeL struct{}

var (
	orderMarkAtkCodeAllColumns            = []string{"id", "id_order_mark_atk", "id_order_mark_utilisation", "id_order_mark_codes", "serial_number", "code", "status", "gtin", "report_date", "report_id"}
	orderMarkAtkCodeColumnsWithoutDefault = []string{"id_order_mark_atk", "id_order_mark_utilisation", "id_order_mark_codes", "serial_number", "code", "status", "gtin", "report_date", "report_id"}
	orderMarkAtkCodeColumnsWithDefault    = []string{"id"}
	orderMarkAtkCodePrimaryKeyColumns     = []string{"id"}
	orderMarkAtkCodeGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkAtkCodeSlice is an alias for a slice of pointers to OrderMarkAtkCode.
	// This should almost always be used instead of []OrderMarkAtkCode.
	OrderMarkAtkCodeSlice []*OrderMarkAtkCode
	// OrderMarkAtkCodeHook is the signature for custom OrderMarkAtkCode hook methods
	OrderMarkAtkCodeHook func(context.Context, boil.ContextExecutor, *OrderMarkAtkCode) error

	orderMarkAtkCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkAtkCodeType                 = reflect.TypeOf(&OrderMarkAtkCode{})
	orderMarkAtkCodeMapping              = queries.MakeStructMapping(orderMarkAtkCodeType)
	orderMarkAtkCodePrimaryKeyMapping, _ = queries.BindMapping(orderMarkAtkCodeType, orderMarkAtkCodeMapping, orderMarkAtkCodePrimaryKeyColumns)
	orderMarkAtkCodeInsertCacheMut       sync.RWMutex
	orderMarkAtkCodeInsertCache          = make(map[string]insertCache)
	orderMarkAtkCodeUpdateCacheMut       sync.RWMutex
	orderMarkAtkCodeUpdateCache          = make(map[string]updateCache)
	orderMarkAtkCodeUpsertCacheMut       sync.RWMutex
	orderMarkAtkCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkAtkCodeAfterSelectMu sync.Mutex
var orderMarkAtkCodeAfterSelectHooks []OrderMarkAtkCodeHook

var orderMarkAtkCodeBeforeInsertMu sync.Mutex
var orderMarkAtkCodeBeforeInsertHooks []OrderMarkAtkCodeHook
var orderMarkAtkCodeAfterInsertMu sync.Mutex
var orderMarkAtkCodeAfterInsertHooks []OrderMarkAtkCodeHook

var orderMarkAtkCodeBeforeUpdateMu sync.Mutex
var orderMarkAtkCodeBeforeUpdateHooks []OrderMarkAtkCodeHook
var orderMarkAtkCodeAfterUpdateMu sync.Mutex
var orderMarkAtkCodeAfterUpdateHooks []OrderMarkAtkCodeHook

var orderMarkAtkCodeBeforeDeleteMu sync.Mutex
var orderMarkAtkCodeBeforeDeleteHooks []OrderMarkAtkCodeHook
var orderMarkAtkCodeAfterDeleteMu sync.Mutex
var orderMarkAtkCodeAfterDeleteHooks []OrderMarkAtkCodeHook

var orderMarkAtkCodeBeforeUpsertMu sync.Mutex
var orderMarkAtkCodeBeforeUpsertHooks []OrderMarkAtkCodeHook
var orderMarkAtkCodeAfterUpsertMu sync.Mutex
var orderMarkAtkCodeAfterUpsertHooks []OrderMarkAtkCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkAtkCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkAtkCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkAtkCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkAtkCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkAtkCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkAtkCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkAtkCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkAtkCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkAtkCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkAtkCodeHook registers your hook function for all future operations.
func AddOrderMarkAtkCodeHook(hookPoint boil.HookPoint, orderMarkAtkCodeHook OrderMarkAtkCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkAtkCodeAfterSelectMu.Lock()
		orderMarkAtkCodeAfterSelectHooks = append(orderMarkAtkCodeAfterSelectHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkAtkCodeBeforeInsertMu.Lock()
		orderMarkAtkCodeBeforeInsertHooks = append(orderMarkAtkCodeBeforeInsertHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkAtkCodeAfterInsertMu.Lock()
		orderMarkAtkCodeAfterInsertHooks = append(orderMarkAtkCodeAfterInsertHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkAtkCodeBeforeUpdateMu.Lock()
		orderMarkAtkCodeBeforeUpdateHooks = append(orderMarkAtkCodeBeforeUpdateHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkAtkCodeAfterUpdateMu.Lock()
		orderMarkAtkCodeAfterUpdateHooks = append(orderMarkAtkCodeAfterUpdateHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkAtkCodeBeforeDeleteMu.Lock()
		orderMarkAtkCodeBeforeDeleteHooks = append(orderMarkAtkCodeBeforeDeleteHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkAtkCodeAfterDeleteMu.Lock()
		orderMarkAtkCodeAfterDeleteHooks = append(orderMarkAtkCodeAfterDeleteHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkAtkCodeBeforeUpsertMu.Lock()
		orderMarkAtkCodeBeforeUpsertHooks = append(orderMarkAtkCodeBeforeUpsertHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkAtkCodeAfterUpsertMu.Lock()
		orderMarkAtkCodeAfterUpsertHooks = append(orderMarkAtkCodeAfterUpsertHooks, orderMarkAtkCodeHook)
		orderMarkAtkCodeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkAtkCode record from the query using the global executor.
func (q orderMarkAtkCodeQuery) OneG(ctx context.Context) (*OrderMarkAtkCode, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkAtkCode record from the query.
func (q orderMarkAtkCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkAtkCode, error) {
	o := &OrderMarkAtkCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_atk_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkAtkCode records from the query using the global executor.
func (q orderMarkAtkCodeQuery) AllG(ctx context.Context) (OrderMarkAtkCodeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkAtkCode records from the query.
func (q orderMarkAtkCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkAtkCodeSlice, error) {
	var o []*OrderMarkAtkCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkAtkCode slice")
	}

	if len(orderMarkAtkCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkAtkCode records in the query using the global executor
func (q orderMarkAtkCodeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkAtkCode records in the query.
func (q orderMarkAtkCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_atk_codes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkAtkCodeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkAtkCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_atk_codes exists")
	}

	return count > 0, nil
}

// OrderMarkAtkCodes retrieves all the records using an executor.
func OrderMarkAtkCodes(mods ...qm.QueryMod) orderMarkAtkCodeQuery {
	mods = append(mods, qm.From("[dbo].[order_mark_atk_codes]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[order_mark_atk_codes].*"})
	}

	return orderMarkAtkCodeQuery{q}
}

// FindOrderMarkAtkCodeG retrieves a single record by ID.
func FindOrderMarkAtkCodeG(ctx context.Context, iD int, selectCols ...string) (*OrderMarkAtkCode, error) {
	return FindOrderMarkAtkCode(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkAtkCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkAtkCode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrderMarkAtkCode, error) {
	orderMarkAtkCodeObj := &OrderMarkAtkCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[order_mark_atk_codes] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkAtkCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_atk_codes")
	}

	if err = orderMarkAtkCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkAtkCodeObj, err
	}

	return orderMarkAtkCodeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkAtkCode) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkAtkCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_atk_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkAtkCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkAtkCodeInsertCacheMut.RLock()
	cache, cached := orderMarkAtkCodeInsertCache[key]
	orderMarkAtkCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkAtkCodeAllColumns,
			orderMarkAtkCodeColumnsWithDefault,
			orderMarkAtkCodeColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkAtkCodeGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkAtkCodeType, orderMarkAtkCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkAtkCodeType, orderMarkAtkCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[order_mark_atk_codes] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[order_mark_atk_codes] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_atk_codes")
	}

	if !cached {
		orderMarkAtkCodeInsertCacheMut.Lock()
		orderMarkAtkCodeInsertCache[key] = cache
		orderMarkAtkCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkAtkCode record using the global executor.
// See Update for more documentation.
func (o *OrderMarkAtkCode) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkAtkCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkAtkCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkAtkCodeUpdateCacheMut.RLock()
	cache, cached := orderMarkAtkCodeUpdateCache[key]
	orderMarkAtkCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkAtkCodeAllColumns,
			orderMarkAtkCodePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkAtkCodeGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_atk_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[order_mark_atk_codes] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, orderMarkAtkCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkAtkCodeType, orderMarkAtkCodeMapping, append(wl, orderMarkAtkCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_atk_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_atk_codes")
	}

	if !cached {
		orderMarkAtkCodeUpdateCacheMut.Lock()
		orderMarkAtkCodeUpdateCache[key] = cache
		orderMarkAtkCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkAtkCodeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkAtkCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_atk_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_atk_codes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkAtkCodeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkAtkCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAtkCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[order_mark_atk_codes] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderMarkAtkCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkAtkCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkAtkCode")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkAtkCode) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *OrderMarkAtkCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_atk_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkAtkCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkAtkCodeUpsertCacheMut.RLock()
	cache, cached := orderMarkAtkCodeUpsertCache[key]
	orderMarkAtkCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderMarkAtkCodeAllColumns,
			orderMarkAtkCodeColumnsWithDefault,
			orderMarkAtkCodeColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, orderMarkAtkCodeGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(orderMarkAtkCodePrimaryKeyColumns, v) && strmangle.ContainsAny(orderMarkAtkCodeColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_atk_codes, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			orderMarkAtkCodeAllColumns,
			orderMarkAtkCodePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, orderMarkAtkCodeGeneratedColumns)

		ret := strmangle.SetComplement(orderMarkAtkCodeAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_atk_codes, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[order_mark_atk_codes]", orderMarkAtkCodePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(orderMarkAtkCodePrimaryKeyColumns))
		copy(whitelist, orderMarkAtkCodePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(orderMarkAtkCodeType, orderMarkAtkCodeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkAtkCodeType, orderMarkAtkCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_atk_codes")
	}

	if !cached {
		orderMarkAtkCodeUpsertCacheMut.Lock()
		orderMarkAtkCodeUpsertCache[key] = cache
		orderMarkAtkCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkAtkCode record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkAtkCode) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkAtkCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkAtkCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkAtkCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkAtkCodePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[order_mark_atk_codes] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_atk_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_atk_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkAtkCodeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkAtkCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkAtkCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_atk_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_atk_codes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkAtkCodeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkAtkCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkAtkCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAtkCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[order_mark_atk_codes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkAtkCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkAtkCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_atk_codes")
	}

	if len(orderMarkAtkCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkAtkCode) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkAtkCode provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkAtkCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkAtkCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkAtkCodeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkAtkCodeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkAtkCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkAtkCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAtkCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[order_mark_atk_codes].* FROM [dbo].[order_mark_atk_codes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkAtkCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkAtkCodeSlice")
	}

	*o = slice

	return nil
}

// OrderMarkAtkCodeExistsG checks if the OrderMarkAtkCode row exists.
func OrderMarkAtkCodeExistsG(ctx context.Context, iD int) (bool, error) {
	return OrderMarkAtkCodeExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkAtkCodeExists checks if the OrderMarkAtkCode row exists.
func OrderMarkAtkCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[order_mark_atk_codes] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_atk_codes exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkAtkCode row exists.
func (o *OrderMarkAtkCode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkAtkCodeExists(ctx, exec, o.ID)
}
