// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderMarkAtk is an object representing the database table.
type OrderMarkAtk struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	Inn        null.String `boil:"inn" json:"inn,omitempty" toml:"inn" yaml:"inn,omitempty"`
	Quantity   null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Version    null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State      null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status     null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	AtkCode    null.String `boil:"atk_code" json:"atk_code,omitempty" toml:"atk_code" yaml:"atk_code,omitempty"`
	OrderID    null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Archive    null.Int    `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	JSON       null.String `boil:"json" json:"json,omitempty" toml:"json" yaml:"json,omitempty"`

	R *orderMarkAtkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderMarkAtkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderMarkAtkColumns = struct {
	ID         string
	CreateDate string
	Inn        string
	Quantity   string
	Version    string
	State      string
	Status     string
	AtkCode    string
	OrderID    string
	Archive    string
	JSON       string
}{
	ID:         "id",
	CreateDate: "create_date",
	Inn:        "inn",
	Quantity:   "quantity",
	Version:    "version",
	State:      "state",
	Status:     "status",
	AtkCode:    "atk_code",
	OrderID:    "order_id",
	Archive:    "archive",
	JSON:       "json",
}

var OrderMarkAtkTableColumns = struct {
	ID         string
	CreateDate string
	Inn        string
	Quantity   string
	Version    string
	State      string
	Status     string
	AtkCode    string
	OrderID    string
	Archive    string
	JSON       string
}{
	ID:         "order_mark_atk.id",
	CreateDate: "order_mark_atk.create_date",
	Inn:        "order_mark_atk.inn",
	Quantity:   "order_mark_atk.quantity",
	Version:    "order_mark_atk.version",
	State:      "order_mark_atk.state",
	Status:     "order_mark_atk.status",
	AtkCode:    "order_mark_atk.atk_code",
	OrderID:    "order_mark_atk.order_id",
	Archive:    "order_mark_atk.archive",
	JSON:       "order_mark_atk.json",
}

// Generated where

var OrderMarkAtkWhere = struct {
	ID         whereHelperint
	CreateDate whereHelpernull_String
	Inn        whereHelpernull_String
	Quantity   whereHelpernull_String
	Version    whereHelpernull_String
	State      whereHelpernull_String
	Status     whereHelpernull_String
	AtkCode    whereHelpernull_String
	OrderID    whereHelpernull_String
	Archive    whereHelpernull_Int
	JSON       whereHelpernull_String
}{
	ID:         whereHelperint{field: "[dbo].[order_mark_atk].[id]"},
	CreateDate: whereHelpernull_String{field: "[dbo].[order_mark_atk].[create_date]"},
	Inn:        whereHelpernull_String{field: "[dbo].[order_mark_atk].[inn]"},
	Quantity:   whereHelpernull_String{field: "[dbo].[order_mark_atk].[quantity]"},
	Version:    whereHelpernull_String{field: "[dbo].[order_mark_atk].[version]"},
	State:      whereHelpernull_String{field: "[dbo].[order_mark_atk].[state]"},
	Status:     whereHelpernull_String{field: "[dbo].[order_mark_atk].[status]"},
	AtkCode:    whereHelpernull_String{field: "[dbo].[order_mark_atk].[atk_code]"},
	OrderID:    whereHelpernull_String{field: "[dbo].[order_mark_atk].[order_id]"},
	Archive:    whereHelpernull_Int{field: "[dbo].[order_mark_atk].[archive]"},
	JSON:       whereHelpernull_String{field: "[dbo].[order_mark_atk].[json]"},
}

// OrderMarkAtkRels is where relationship names are stored.
var OrderMarkAtkRels = struct {
}{}

// orderMarkAtkR is where relationships are stored.
type orderMarkAtkR struct {
}

// NewStruct creates a new relationship struct
func (*orderMarkAtkR) NewStruct() *orderMarkAtkR {
	return &orderMarkAtkR{}
}

// orderMarkAtkL is where Load methods for each relationship are stored.
type orderMarkAtkL struct{}

var (
	orderMarkAtkAllColumns            = []string{"id", "create_date", "inn", "quantity", "version", "state", "status", "atk_code", "order_id", "archive", "json"}
	orderMarkAtkColumnsWithoutDefault = []string{"create_date", "inn", "quantity", "version", "state", "status", "atk_code", "order_id", "archive", "json"}
	orderMarkAtkColumnsWithDefault    = []string{"id"}
	orderMarkAtkPrimaryKeyColumns     = []string{"id"}
	orderMarkAtkGeneratedColumns      = []string{"id"}
)

type (
	// OrderMarkAtkSlice is an alias for a slice of pointers to OrderMarkAtk.
	// This should almost always be used instead of []OrderMarkAtk.
	OrderMarkAtkSlice []*OrderMarkAtk
	// OrderMarkAtkHook is the signature for custom OrderMarkAtk hook methods
	OrderMarkAtkHook func(context.Context, boil.ContextExecutor, *OrderMarkAtk) error

	orderMarkAtkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderMarkAtkType                 = reflect.TypeOf(&OrderMarkAtk{})
	orderMarkAtkMapping              = queries.MakeStructMapping(orderMarkAtkType)
	orderMarkAtkPrimaryKeyMapping, _ = queries.BindMapping(orderMarkAtkType, orderMarkAtkMapping, orderMarkAtkPrimaryKeyColumns)
	orderMarkAtkInsertCacheMut       sync.RWMutex
	orderMarkAtkInsertCache          = make(map[string]insertCache)
	orderMarkAtkUpdateCacheMut       sync.RWMutex
	orderMarkAtkUpdateCache          = make(map[string]updateCache)
	orderMarkAtkUpsertCacheMut       sync.RWMutex
	orderMarkAtkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderMarkAtkAfterSelectMu sync.Mutex
var orderMarkAtkAfterSelectHooks []OrderMarkAtkHook

var orderMarkAtkBeforeInsertMu sync.Mutex
var orderMarkAtkBeforeInsertHooks []OrderMarkAtkHook
var orderMarkAtkAfterInsertMu sync.Mutex
var orderMarkAtkAfterInsertHooks []OrderMarkAtkHook

var orderMarkAtkBeforeUpdateMu sync.Mutex
var orderMarkAtkBeforeUpdateHooks []OrderMarkAtkHook
var orderMarkAtkAfterUpdateMu sync.Mutex
var orderMarkAtkAfterUpdateHooks []OrderMarkAtkHook

var orderMarkAtkBeforeDeleteMu sync.Mutex
var orderMarkAtkBeforeDeleteHooks []OrderMarkAtkHook
var orderMarkAtkAfterDeleteMu sync.Mutex
var orderMarkAtkAfterDeleteHooks []OrderMarkAtkHook

var orderMarkAtkBeforeUpsertMu sync.Mutex
var orderMarkAtkBeforeUpsertHooks []OrderMarkAtkHook
var orderMarkAtkAfterUpsertMu sync.Mutex
var orderMarkAtkAfterUpsertHooks []OrderMarkAtkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderMarkAtk) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderMarkAtk) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderMarkAtk) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderMarkAtk) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderMarkAtk) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderMarkAtk) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderMarkAtk) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderMarkAtk) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderMarkAtk) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderMarkAtkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderMarkAtkHook registers your hook function for all future operations.
func AddOrderMarkAtkHook(hookPoint boil.HookPoint, orderMarkAtkHook OrderMarkAtkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderMarkAtkAfterSelectMu.Lock()
		orderMarkAtkAfterSelectHooks = append(orderMarkAtkAfterSelectHooks, orderMarkAtkHook)
		orderMarkAtkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderMarkAtkBeforeInsertMu.Lock()
		orderMarkAtkBeforeInsertHooks = append(orderMarkAtkBeforeInsertHooks, orderMarkAtkHook)
		orderMarkAtkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderMarkAtkAfterInsertMu.Lock()
		orderMarkAtkAfterInsertHooks = append(orderMarkAtkAfterInsertHooks, orderMarkAtkHook)
		orderMarkAtkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderMarkAtkBeforeUpdateMu.Lock()
		orderMarkAtkBeforeUpdateHooks = append(orderMarkAtkBeforeUpdateHooks, orderMarkAtkHook)
		orderMarkAtkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderMarkAtkAfterUpdateMu.Lock()
		orderMarkAtkAfterUpdateHooks = append(orderMarkAtkAfterUpdateHooks, orderMarkAtkHook)
		orderMarkAtkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderMarkAtkBeforeDeleteMu.Lock()
		orderMarkAtkBeforeDeleteHooks = append(orderMarkAtkBeforeDeleteHooks, orderMarkAtkHook)
		orderMarkAtkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderMarkAtkAfterDeleteMu.Lock()
		orderMarkAtkAfterDeleteHooks = append(orderMarkAtkAfterDeleteHooks, orderMarkAtkHook)
		orderMarkAtkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderMarkAtkBeforeUpsertMu.Lock()
		orderMarkAtkBeforeUpsertHooks = append(orderMarkAtkBeforeUpsertHooks, orderMarkAtkHook)
		orderMarkAtkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderMarkAtkAfterUpsertMu.Lock()
		orderMarkAtkAfterUpsertHooks = append(orderMarkAtkAfterUpsertHooks, orderMarkAtkHook)
		orderMarkAtkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single orderMarkAtk record from the query using the global executor.
func (q orderMarkAtkQuery) OneG(ctx context.Context) (*OrderMarkAtk, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderMarkAtk record from the query.
func (q orderMarkAtkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderMarkAtk, error) {
	o := &OrderMarkAtk{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for order_mark_atk")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderMarkAtk records from the query using the global executor.
func (q orderMarkAtkQuery) AllG(ctx context.Context) (OrderMarkAtkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderMarkAtk records from the query.
func (q orderMarkAtkQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderMarkAtkSlice, error) {
	var o []*OrderMarkAtk

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to OrderMarkAtk slice")
	}

	if len(orderMarkAtkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderMarkAtk records in the query using the global executor
func (q orderMarkAtkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderMarkAtk records in the query.
func (q orderMarkAtkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count order_mark_atk rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q orderMarkAtkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderMarkAtkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if order_mark_atk exists")
	}

	return count > 0, nil
}

// OrderMarkAtks retrieves all the records using an executor.
func OrderMarkAtks(mods ...qm.QueryMod) orderMarkAtkQuery {
	mods = append(mods, qm.From("[dbo].[order_mark_atk]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[order_mark_atk].*"})
	}

	return orderMarkAtkQuery{q}
}

// FindOrderMarkAtkG retrieves a single record by ID.
func FindOrderMarkAtkG(ctx context.Context, iD int, selectCols ...string) (*OrderMarkAtk, error) {
	return FindOrderMarkAtk(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderMarkAtk retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderMarkAtk(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrderMarkAtk, error) {
	orderMarkAtkObj := &OrderMarkAtk{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[order_mark_atk] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderMarkAtkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from order_mark_atk")
	}

	if err = orderMarkAtkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderMarkAtkObj, err
	}

	return orderMarkAtkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderMarkAtk) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderMarkAtk) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_atk provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkAtkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderMarkAtkInsertCacheMut.RLock()
	cache, cached := orderMarkAtkInsertCache[key]
	orderMarkAtkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderMarkAtkAllColumns,
			orderMarkAtkColumnsWithDefault,
			orderMarkAtkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, orderMarkAtkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(orderMarkAtkType, orderMarkAtkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderMarkAtkType, orderMarkAtkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[order_mark_atk] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[order_mark_atk] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into order_mark_atk")
	}

	if !cached {
		orderMarkAtkInsertCacheMut.Lock()
		orderMarkAtkInsertCache[key] = cache
		orderMarkAtkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OrderMarkAtk record using the global executor.
// See Update for more documentation.
func (o *OrderMarkAtk) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderMarkAtk.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderMarkAtk) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderMarkAtkUpdateCacheMut.RLock()
	cache, cached := orderMarkAtkUpdateCache[key]
	orderMarkAtkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderMarkAtkAllColumns,
			orderMarkAtkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, orderMarkAtkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update order_mark_atk, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[order_mark_atk] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, orderMarkAtkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderMarkAtkType, orderMarkAtkMapping, append(wl, orderMarkAtkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update order_mark_atk row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for order_mark_atk")
	}

	if !cached {
		orderMarkAtkUpdateCacheMut.Lock()
		orderMarkAtkUpdateCache[key] = cache
		orderMarkAtkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderMarkAtkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderMarkAtkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for order_mark_atk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for order_mark_atk")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderMarkAtkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderMarkAtkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAtkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[order_mark_atk] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderMarkAtkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in orderMarkAtk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all orderMarkAtk")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderMarkAtk) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *OrderMarkAtk) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no order_mark_atk provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderMarkAtkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderMarkAtkUpsertCacheMut.RLock()
	cache, cached := orderMarkAtkUpsertCache[key]
	orderMarkAtkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderMarkAtkAllColumns,
			orderMarkAtkColumnsWithDefault,
			orderMarkAtkColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, orderMarkAtkGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(orderMarkAtkPrimaryKeyColumns, v) && strmangle.ContainsAny(orderMarkAtkColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_atk, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			orderMarkAtkAllColumns,
			orderMarkAtkPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, orderMarkAtkGeneratedColumns)

		ret := strmangle.SetComplement(orderMarkAtkAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("znakboil: unable to upsert order_mark_atk, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[order_mark_atk]", orderMarkAtkPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(orderMarkAtkPrimaryKeyColumns))
		copy(whitelist, orderMarkAtkPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(orderMarkAtkType, orderMarkAtkMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderMarkAtkType, orderMarkAtkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert order_mark_atk")
	}

	if !cached {
		orderMarkAtkUpsertCacheMut.Lock()
		orderMarkAtkUpsertCache[key] = cache
		orderMarkAtkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OrderMarkAtk record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderMarkAtk) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderMarkAtk record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderMarkAtk) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no OrderMarkAtk provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderMarkAtkPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[order_mark_atk] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from order_mark_atk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for order_mark_atk")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q orderMarkAtkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderMarkAtkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no orderMarkAtkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from order_mark_atk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_atk")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderMarkAtkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderMarkAtkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderMarkAtkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAtkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[order_mark_atk] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkAtkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from orderMarkAtk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for order_mark_atk")
	}

	if len(orderMarkAtkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderMarkAtk) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no OrderMarkAtk provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderMarkAtk) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderMarkAtk(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkAtkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty OrderMarkAtkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderMarkAtkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderMarkAtkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderMarkAtkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[order_mark_atk].* FROM [dbo].[order_mark_atk] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderMarkAtkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in OrderMarkAtkSlice")
	}

	*o = slice

	return nil
}

// OrderMarkAtkExistsG checks if the OrderMarkAtk row exists.
func OrderMarkAtkExistsG(ctx context.Context, iD int) (bool, error) {
	return OrderMarkAtkExists(ctx, boil.GetContextDB(), iD)
}

// OrderMarkAtkExists checks if the OrderMarkAtk row exists.
func OrderMarkAtkExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[order_mark_atk] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if order_mark_atk exists")
	}

	return exists, nil
}

// Exists checks if the OrderMarkAtk row exists.
func (o *OrderMarkAtk) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderMarkAtkExists(ctx, exec, o.ID)
}
