// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package znakboil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductCardsCategory is an object representing the database table.
type ProductCardsCategory struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductCards null.Int    `boil:"id_product_cards" json:"id_product_cards,omitempty" toml:"id_product_cards" yaml:"id_product_cards,omitempty"`
	CatID          null.Int    `boil:"cat_id" json:"cat_id,omitempty" toml:"cat_id" yaml:"cat_id,omitempty"`
	CatName        null.String `boil:"cat_name" json:"cat_name,omitempty" toml:"cat_name" yaml:"cat_name,omitempty"`

	R *productCardsCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productCardsCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductCardsCategoryColumns = struct {
	ID             string
	IDProductCards string
	CatID          string
	CatName        string
}{
	ID:             "id",
	IDProductCards: "id_product_cards",
	CatID:          "cat_id",
	CatName:        "cat_name",
}

var ProductCardsCategoryTableColumns = struct {
	ID             string
	IDProductCards string
	CatID          string
	CatName        string
}{
	ID:             "product_cards_categories.id",
	IDProductCards: "product_cards_categories.id_product_cards",
	CatID:          "product_cards_categories.cat_id",
	CatName:        "product_cards_categories.cat_name",
}

// Generated where

var ProductCardsCategoryWhere = struct {
	ID             whereHelperint
	IDProductCards whereHelpernull_Int
	CatID          whereHelpernull_Int
	CatName        whereHelpernull_String
}{
	ID:             whereHelperint{field: "[dbo].[product_cards_categories].[id]"},
	IDProductCards: whereHelpernull_Int{field: "[dbo].[product_cards_categories].[id_product_cards]"},
	CatID:          whereHelpernull_Int{field: "[dbo].[product_cards_categories].[cat_id]"},
	CatName:        whereHelpernull_String{field: "[dbo].[product_cards_categories].[cat_name]"},
}

// ProductCardsCategoryRels is where relationship names are stored.
var ProductCardsCategoryRels = struct {
}{}

// productCardsCategoryR is where relationships are stored.
type productCardsCategoryR struct {
}

// NewStruct creates a new relationship struct
func (*productCardsCategoryR) NewStruct() *productCardsCategoryR {
	return &productCardsCategoryR{}
}

// productCardsCategoryL is where Load methods for each relationship are stored.
type productCardsCategoryL struct{}

var (
	productCardsCategoryAllColumns            = []string{"id", "id_product_cards", "cat_id", "cat_name"}
	productCardsCategoryColumnsWithoutDefault = []string{"id_product_cards", "cat_id", "cat_name"}
	productCardsCategoryColumnsWithDefault    = []string{"id"}
	productCardsCategoryPrimaryKeyColumns     = []string{"id"}
	productCardsCategoryGeneratedColumns      = []string{"id"}
)

type (
	// ProductCardsCategorySlice is an alias for a slice of pointers to ProductCardsCategory.
	// This should almost always be used instead of []ProductCardsCategory.
	ProductCardsCategorySlice []*ProductCardsCategory
	// ProductCardsCategoryHook is the signature for custom ProductCardsCategory hook methods
	ProductCardsCategoryHook func(context.Context, boil.ContextExecutor, *ProductCardsCategory) error

	productCardsCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productCardsCategoryType                 = reflect.TypeOf(&ProductCardsCategory{})
	productCardsCategoryMapping              = queries.MakeStructMapping(productCardsCategoryType)
	productCardsCategoryPrimaryKeyMapping, _ = queries.BindMapping(productCardsCategoryType, productCardsCategoryMapping, productCardsCategoryPrimaryKeyColumns)
	productCardsCategoryInsertCacheMut       sync.RWMutex
	productCardsCategoryInsertCache          = make(map[string]insertCache)
	productCardsCategoryUpdateCacheMut       sync.RWMutex
	productCardsCategoryUpdateCache          = make(map[string]updateCache)
	productCardsCategoryUpsertCacheMut       sync.RWMutex
	productCardsCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productCardsCategoryAfterSelectMu sync.Mutex
var productCardsCategoryAfterSelectHooks []ProductCardsCategoryHook

var productCardsCategoryBeforeInsertMu sync.Mutex
var productCardsCategoryBeforeInsertHooks []ProductCardsCategoryHook
var productCardsCategoryAfterInsertMu sync.Mutex
var productCardsCategoryAfterInsertHooks []ProductCardsCategoryHook

var productCardsCategoryBeforeUpdateMu sync.Mutex
var productCardsCategoryBeforeUpdateHooks []ProductCardsCategoryHook
var productCardsCategoryAfterUpdateMu sync.Mutex
var productCardsCategoryAfterUpdateHooks []ProductCardsCategoryHook

var productCardsCategoryBeforeDeleteMu sync.Mutex
var productCardsCategoryBeforeDeleteHooks []ProductCardsCategoryHook
var productCardsCategoryAfterDeleteMu sync.Mutex
var productCardsCategoryAfterDeleteHooks []ProductCardsCategoryHook

var productCardsCategoryBeforeUpsertMu sync.Mutex
var productCardsCategoryBeforeUpsertHooks []ProductCardsCategoryHook
var productCardsCategoryAfterUpsertMu sync.Mutex
var productCardsCategoryAfterUpsertHooks []ProductCardsCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductCardsCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductCardsCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductCardsCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductCardsCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductCardsCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductCardsCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductCardsCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductCardsCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductCardsCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCardsCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductCardsCategoryHook registers your hook function for all future operations.
func AddProductCardsCategoryHook(hookPoint boil.HookPoint, productCardsCategoryHook ProductCardsCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productCardsCategoryAfterSelectMu.Lock()
		productCardsCategoryAfterSelectHooks = append(productCardsCategoryAfterSelectHooks, productCardsCategoryHook)
		productCardsCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productCardsCategoryBeforeInsertMu.Lock()
		productCardsCategoryBeforeInsertHooks = append(productCardsCategoryBeforeInsertHooks, productCardsCategoryHook)
		productCardsCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productCardsCategoryAfterInsertMu.Lock()
		productCardsCategoryAfterInsertHooks = append(productCardsCategoryAfterInsertHooks, productCardsCategoryHook)
		productCardsCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productCardsCategoryBeforeUpdateMu.Lock()
		productCardsCategoryBeforeUpdateHooks = append(productCardsCategoryBeforeUpdateHooks, productCardsCategoryHook)
		productCardsCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productCardsCategoryAfterUpdateMu.Lock()
		productCardsCategoryAfterUpdateHooks = append(productCardsCategoryAfterUpdateHooks, productCardsCategoryHook)
		productCardsCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productCardsCategoryBeforeDeleteMu.Lock()
		productCardsCategoryBeforeDeleteHooks = append(productCardsCategoryBeforeDeleteHooks, productCardsCategoryHook)
		productCardsCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productCardsCategoryAfterDeleteMu.Lock()
		productCardsCategoryAfterDeleteHooks = append(productCardsCategoryAfterDeleteHooks, productCardsCategoryHook)
		productCardsCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productCardsCategoryBeforeUpsertMu.Lock()
		productCardsCategoryBeforeUpsertHooks = append(productCardsCategoryBeforeUpsertHooks, productCardsCategoryHook)
		productCardsCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productCardsCategoryAfterUpsertMu.Lock()
		productCardsCategoryAfterUpsertHooks = append(productCardsCategoryAfterUpsertHooks, productCardsCategoryHook)
		productCardsCategoryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productCardsCategory record from the query using the global executor.
func (q productCardsCategoryQuery) OneG(ctx context.Context) (*ProductCardsCategory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productCardsCategory record from the query.
func (q productCardsCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductCardsCategory, error) {
	o := &ProductCardsCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: failed to execute a one query for product_cards_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductCardsCategory records from the query using the global executor.
func (q productCardsCategoryQuery) AllG(ctx context.Context) (ProductCardsCategorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductCardsCategory records from the query.
func (q productCardsCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductCardsCategorySlice, error) {
	var o []*ProductCardsCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "znakboil: failed to assign all query results to ProductCardsCategory slice")
	}

	if len(productCardsCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductCardsCategory records in the query using the global executor
func (q productCardsCategoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductCardsCategory records in the query.
func (q productCardsCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to count product_cards_categories rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productCardsCategoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productCardsCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: failed to check if product_cards_categories exists")
	}

	return count > 0, nil
}

// ProductCardsCategories retrieves all the records using an executor.
func ProductCardsCategories(mods ...qm.QueryMod) productCardsCategoryQuery {
	mods = append(mods, qm.From("[dbo].[product_cards_categories]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[product_cards_categories].*"})
	}

	return productCardsCategoryQuery{q}
}

// FindProductCardsCategoryG retrieves a single record by ID.
func FindProductCardsCategoryG(ctx context.Context, iD int, selectCols ...string) (*ProductCardsCategory, error) {
	return FindProductCardsCategory(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductCardsCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductCardsCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProductCardsCategory, error) {
	productCardsCategoryObj := &ProductCardsCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[product_cards_categories] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productCardsCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "znakboil: unable to select from product_cards_categories")
	}

	if err = productCardsCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productCardsCategoryObj, err
	}

	return productCardsCategoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductCardsCategory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductCardsCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_cards_categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCardsCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productCardsCategoryInsertCacheMut.RLock()
	cache, cached := productCardsCategoryInsertCache[key]
	productCardsCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productCardsCategoryAllColumns,
			productCardsCategoryColumnsWithDefault,
			productCardsCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productCardsCategoryGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productCardsCategoryType, productCardsCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productCardsCategoryType, productCardsCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[product_cards_categories] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[product_cards_categories] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "znakboil: unable to insert into product_cards_categories")
	}

	if !cached {
		productCardsCategoryInsertCacheMut.Lock()
		productCardsCategoryInsertCache[key] = cache
		productCardsCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductCardsCategory record using the global executor.
// See Update for more documentation.
func (o *ProductCardsCategory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductCardsCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductCardsCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productCardsCategoryUpdateCacheMut.RLock()
	cache, cached := productCardsCategoryUpdateCache[key]
	productCardsCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productCardsCategoryAllColumns,
			productCardsCategoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productCardsCategoryGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("znakboil: unable to update product_cards_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[product_cards_categories] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, productCardsCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productCardsCategoryType, productCardsCategoryMapping, append(wl, productCardsCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update product_cards_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by update for product_cards_categories")
	}

	if !cached {
		productCardsCategoryUpdateCacheMut.Lock()
		productCardsCategoryUpdateCache[key] = cache
		productCardsCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productCardsCategoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productCardsCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all for product_cards_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected for product_cards_categories")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductCardsCategorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductCardsCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("znakboil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[product_cards_categories] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productCardsCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to update all in productCardsCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to retrieve rows affected all in update all productCardsCategory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductCardsCategory) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ProductCardsCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("znakboil: no product_cards_categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCardsCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productCardsCategoryUpsertCacheMut.RLock()
	cache, cached := productCardsCategoryUpsertCache[key]
	productCardsCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productCardsCategoryAllColumns,
			productCardsCategoryColumnsWithDefault,
			productCardsCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, productCardsCategoryGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(productCardsCategoryPrimaryKeyColumns, v) && strmangle.ContainsAny(productCardsCategoryColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("znakboil: unable to upsert product_cards_categories, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			productCardsCategoryAllColumns,
			productCardsCategoryPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productCardsCategoryGeneratedColumns)

		ret := strmangle.SetComplement(productCardsCategoryAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("znakboil: unable to upsert product_cards_categories, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[product_cards_categories]", productCardsCategoryPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(productCardsCategoryPrimaryKeyColumns))
		copy(whitelist, productCardsCategoryPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(productCardsCategoryType, productCardsCategoryMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productCardsCategoryType, productCardsCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to upsert product_cards_categories")
	}

	if !cached {
		productCardsCategoryUpsertCacheMut.Lock()
		productCardsCategoryUpsertCache[key] = cache
		productCardsCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductCardsCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductCardsCategory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductCardsCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductCardsCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("znakboil: no ProductCardsCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productCardsCategoryPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[product_cards_categories] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete from product_cards_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by delete for product_cards_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productCardsCategoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productCardsCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("znakboil: no productCardsCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from product_cards_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_cards_categories")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductCardsCategorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductCardsCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productCardsCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[product_cards_categories] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCardsCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: unable to delete all from productCardsCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "znakboil: failed to get rows affected by deleteall for product_cards_categories")
	}

	if len(productCardsCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductCardsCategory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: no ProductCardsCategory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductCardsCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductCardsCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCardsCategorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("znakboil: empty ProductCardsCategorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCardsCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductCardsCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCardsCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[product_cards_categories].* FROM [dbo].[product_cards_categories] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCardsCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "znakboil: unable to reload all in ProductCardsCategorySlice")
	}

	*o = slice

	return nil
}

// ProductCardsCategoryExistsG checks if the ProductCardsCategory row exists.
func ProductCardsCategoryExistsG(ctx context.Context, iD int) (bool, error) {
	return ProductCardsCategoryExists(ctx, boil.GetContextDB(), iD)
}

// ProductCardsCategoryExists checks if the ProductCardsCategory row exists.
func ProductCardsCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[product_cards_categories] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "znakboil: unable to check if product_cards_categories exists")
	}

	return exists, nil
}

// Exists checks if the ProductCardsCategory row exists.
func (o *ProductCardsCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductCardsCategoryExists(ctx, exec, o.ID)
}
