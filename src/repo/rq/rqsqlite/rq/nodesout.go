// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Nodesout is an object representing the database table.
type Nodesout struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	RequestID null.Int64  `boil:"request_id" json:"request_id,omitempty" toml:"request_id" yaml:"request_id,omitempty"`
	Num       null.String `boil:"num" json:"num,omitempty" toml:"num" yaml:"num,omitempty"`
	Typ       null.String `boil:"typ" json:"typ,omitempty" toml:"typ" yaml:"typ,omitempty"`
	ST        null.String `boil:"st" json:"st,omitempty" toml:"st" yaml:"st,omitempty"`
	Tstamp    null.Time   `boil:"tstamp" json:"tstamp,omitempty" toml:"tstamp" yaml:"tstamp,omitempty"`
	Replyid   null.String `boil:"replyid" json:"replyid,omitempty" toml:"replyid" yaml:"replyid,omitempty"`
	Fileid    null.String `boil:"fileid" json:"fileid,omitempty" toml:"fileid" yaml:"fileid,omitempty"`
	Xmlbody   null.String `boil:"xmlbody" json:"xmlbody,omitempty" toml:"xmlbody" yaml:"xmlbody,omitempty"`

	R *nodesoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodesoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodesoutColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	RequestID string
	Num       string
	Typ       string
	ST        string
	Tstamp    string
	Replyid   string
	Fileid    string
	Xmlbody   string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	RequestID: "request_id",
	Num:       "num",
	Typ:       "typ",
	ST:        "st",
	Tstamp:    "tstamp",
	Replyid:   "replyid",
	Fileid:    "fileid",
	Xmlbody:   "xmlbody",
}

var NodesoutTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	RequestID string
	Num       string
	Typ       string
	ST        string
	Tstamp    string
	Replyid   string
	Fileid    string
	Xmlbody   string
}{
	ID:        "nodesout.id",
	CreatedAt: "nodesout.created_at",
	UpdatedAt: "nodesout.updated_at",
	RequestID: "nodesout.request_id",
	Num:       "nodesout.num",
	Typ:       "nodesout.typ",
	ST:        "nodesout.st",
	Tstamp:    "nodesout.tstamp",
	Replyid:   "nodesout.replyid",
	Fileid:    "nodesout.fileid",
	Xmlbody:   "nodesout.xmlbody",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var NodesoutWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpernull_String
	UpdatedAt whereHelpernull_String
	RequestID whereHelpernull_Int64
	Num       whereHelpernull_String
	Typ       whereHelpernull_String
	ST        whereHelpernull_String
	Tstamp    whereHelpernull_Time
	Replyid   whereHelpernull_String
	Fileid    whereHelpernull_String
	Xmlbody   whereHelpernull_String
}{
	ID:        whereHelperint64{field: "\"nodesout\".\"id\""},
	CreatedAt: whereHelpernull_String{field: "\"nodesout\".\"created_at\""},
	UpdatedAt: whereHelpernull_String{field: "\"nodesout\".\"updated_at\""},
	RequestID: whereHelpernull_Int64{field: "\"nodesout\".\"request_id\""},
	Num:       whereHelpernull_String{field: "\"nodesout\".\"num\""},
	Typ:       whereHelpernull_String{field: "\"nodesout\".\"typ\""},
	ST:        whereHelpernull_String{field: "\"nodesout\".\"st\""},
	Tstamp:    whereHelpernull_Time{field: "\"nodesout\".\"tstamp\""},
	Replyid:   whereHelpernull_String{field: "\"nodesout\".\"replyid\""},
	Fileid:    whereHelpernull_String{field: "\"nodesout\".\"fileid\""},
	Xmlbody:   whereHelpernull_String{field: "\"nodesout\".\"xmlbody\""},
}

// NodesoutRels is where relationship names are stored.
var NodesoutRels = struct {
}{}

// nodesoutR is where relationships are stored.
type nodesoutR struct {
}

// NewStruct creates a new relationship struct
func (*nodesoutR) NewStruct() *nodesoutR {
	return &nodesoutR{}
}

// nodesoutL is where Load methods for each relationship are stored.
type nodesoutL struct{}

var (
	nodesoutAllColumns            = []string{"id", "created_at", "updated_at", "request_id", "num", "typ", "st", "tstamp", "replyid", "fileid", "xmlbody"}
	nodesoutColumnsWithoutDefault = []string{}
	nodesoutColumnsWithDefault    = []string{"id", "created_at", "updated_at", "request_id", "num", "typ", "st", "tstamp", "replyid", "fileid", "xmlbody"}
	nodesoutPrimaryKeyColumns     = []string{"id"}
	nodesoutGeneratedColumns      = []string{"id"}
)

type (
	// NodesoutSlice is an alias for a slice of pointers to Nodesout.
	// This should almost always be used instead of []Nodesout.
	NodesoutSlice []*Nodesout
	// NodesoutHook is the signature for custom Nodesout hook methods
	NodesoutHook func(context.Context, boil.ContextExecutor, *Nodesout) error

	nodesoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodesoutType                 = reflect.TypeOf(&Nodesout{})
	nodesoutMapping              = queries.MakeStructMapping(nodesoutType)
	nodesoutPrimaryKeyMapping, _ = queries.BindMapping(nodesoutType, nodesoutMapping, nodesoutPrimaryKeyColumns)
	nodesoutInsertCacheMut       sync.RWMutex
	nodesoutInsertCache          = make(map[string]insertCache)
	nodesoutUpdateCacheMut       sync.RWMutex
	nodesoutUpdateCache          = make(map[string]updateCache)
	nodesoutUpsertCacheMut       sync.RWMutex
	nodesoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodesoutAfterSelectMu sync.Mutex
var nodesoutAfterSelectHooks []NodesoutHook

var nodesoutBeforeInsertMu sync.Mutex
var nodesoutBeforeInsertHooks []NodesoutHook
var nodesoutAfterInsertMu sync.Mutex
var nodesoutAfterInsertHooks []NodesoutHook

var nodesoutBeforeUpdateMu sync.Mutex
var nodesoutBeforeUpdateHooks []NodesoutHook
var nodesoutAfterUpdateMu sync.Mutex
var nodesoutAfterUpdateHooks []NodesoutHook

var nodesoutBeforeDeleteMu sync.Mutex
var nodesoutBeforeDeleteHooks []NodesoutHook
var nodesoutAfterDeleteMu sync.Mutex
var nodesoutAfterDeleteHooks []NodesoutHook

var nodesoutBeforeUpsertMu sync.Mutex
var nodesoutBeforeUpsertHooks []NodesoutHook
var nodesoutAfterUpsertMu sync.Mutex
var nodesoutAfterUpsertHooks []NodesoutHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Nodesout) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Nodesout) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Nodesout) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Nodesout) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Nodesout) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Nodesout) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Nodesout) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Nodesout) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Nodesout) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodesoutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodesoutHook registers your hook function for all future operations.
func AddNodesoutHook(hookPoint boil.HookPoint, nodesoutHook NodesoutHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		nodesoutAfterSelectMu.Lock()
		nodesoutAfterSelectHooks = append(nodesoutAfterSelectHooks, nodesoutHook)
		nodesoutAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		nodesoutBeforeInsertMu.Lock()
		nodesoutBeforeInsertHooks = append(nodesoutBeforeInsertHooks, nodesoutHook)
		nodesoutBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		nodesoutAfterInsertMu.Lock()
		nodesoutAfterInsertHooks = append(nodesoutAfterInsertHooks, nodesoutHook)
		nodesoutAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		nodesoutBeforeUpdateMu.Lock()
		nodesoutBeforeUpdateHooks = append(nodesoutBeforeUpdateHooks, nodesoutHook)
		nodesoutBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		nodesoutAfterUpdateMu.Lock()
		nodesoutAfterUpdateHooks = append(nodesoutAfterUpdateHooks, nodesoutHook)
		nodesoutAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		nodesoutBeforeDeleteMu.Lock()
		nodesoutBeforeDeleteHooks = append(nodesoutBeforeDeleteHooks, nodesoutHook)
		nodesoutBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		nodesoutAfterDeleteMu.Lock()
		nodesoutAfterDeleteHooks = append(nodesoutAfterDeleteHooks, nodesoutHook)
		nodesoutAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		nodesoutBeforeUpsertMu.Lock()
		nodesoutBeforeUpsertHooks = append(nodesoutBeforeUpsertHooks, nodesoutHook)
		nodesoutBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		nodesoutAfterUpsertMu.Lock()
		nodesoutAfterUpsertHooks = append(nodesoutAfterUpsertHooks, nodesoutHook)
		nodesoutAfterUpsertMu.Unlock()
	}
}

// OneG returns a single nodesout record from the query using the global executor.
func (q nodesoutQuery) OneG(ctx context.Context) (*Nodesout, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single nodesout record from the query.
func (q nodesoutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Nodesout, error) {
	o := &Nodesout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for nodesout")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Nodesout records from the query using the global executor.
func (q nodesoutQuery) AllG(ctx context.Context) (NodesoutSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Nodesout records from the query.
func (q nodesoutQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodesoutSlice, error) {
	var o []*Nodesout

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Nodesout slice")
	}

	if len(nodesoutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Nodesout records in the query using the global executor
func (q nodesoutQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Nodesout records in the query.
func (q nodesoutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count nodesout rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q nodesoutQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q nodesoutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if nodesout exists")
	}

	return count > 0, nil
}

// Nodesouts retrieves all the records using an executor.
func Nodesouts(mods ...qm.QueryMod) nodesoutQuery {
	mods = append(mods, qm.From("\"nodesout\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nodesout\".*"})
	}

	return nodesoutQuery{q}
}

// FindNodesoutG retrieves a single record by ID.
func FindNodesoutG(ctx context.Context, iD int64, selectCols ...string) (*Nodesout, error) {
	return FindNodesout(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindNodesout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodesout(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Nodesout, error) {
	nodesoutObj := &Nodesout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nodesout\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodesoutObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from nodesout")
	}

	if err = nodesoutObj.doAfterSelectHooks(ctx, exec); err != nil {
		return nodesoutObj, err
	}

	return nodesoutObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Nodesout) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Nodesout) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no nodesout provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodesoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodesoutInsertCacheMut.RLock()
	cache, cached := nodesoutInsertCache[key]
	nodesoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodesoutAllColumns,
			nodesoutColumnsWithDefault,
			nodesoutColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, nodesoutGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(nodesoutType, nodesoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodesoutType, nodesoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nodesout\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nodesout\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into nodesout")
	}

	if !cached {
		nodesoutInsertCacheMut.Lock()
		nodesoutInsertCache[key] = cache
		nodesoutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Nodesout record using the global executor.
// See Update for more documentation.
func (o *Nodesout) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Nodesout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Nodesout) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodesoutUpdateCacheMut.RLock()
	cache, cached := nodesoutUpdateCache[key]
	nodesoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodesoutAllColumns,
			nodesoutPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, nodesoutGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update nodesout, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nodesout\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nodesoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodesoutType, nodesoutMapping, append(wl, nodesoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update nodesout row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for nodesout")
	}

	if !cached {
		nodesoutUpdateCacheMut.Lock()
		nodesoutUpdateCache[key] = cache
		nodesoutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q nodesoutQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q nodesoutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for nodesout")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for nodesout")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NodesoutSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodesoutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodesoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nodesout\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodesoutPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in nodesout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all nodesout")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Nodesout) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Nodesout) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no nodesout provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodesoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nodesoutUpsertCacheMut.RLock()
	cache, cached := nodesoutUpsertCache[key]
	nodesoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nodesoutAllColumns,
			nodesoutColumnsWithDefault,
			nodesoutColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			nodesoutAllColumns,
			nodesoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert nodesout, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nodesoutPrimaryKeyColumns))
			copy(conflict, nodesoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"nodesout\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nodesoutType, nodesoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nodesoutType, nodesoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert nodesout")
	}

	if !cached {
		nodesoutUpsertCacheMut.Lock()
		nodesoutUpsertCache[key] = cache
		nodesoutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Nodesout record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Nodesout) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Nodesout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Nodesout) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Nodesout provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodesoutPrimaryKeyMapping)
	sql := "DELETE FROM \"nodesout\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from nodesout")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for nodesout")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q nodesoutQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q nodesoutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no nodesoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from nodesout")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for nodesout")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NodesoutSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodesoutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodesoutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodesoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nodesout\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodesoutPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from nodesout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for nodesout")
	}

	if len(nodesoutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Nodesout) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Nodesout provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Nodesout) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodesout(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodesoutSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty NodesoutSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodesoutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodesoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodesoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nodesout\".* FROM \"nodesout\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nodesoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in NodesoutSlice")
	}

	*o = slice

	return nil
}

// NodesoutExistsG checks if the Nodesout row exists.
func NodesoutExistsG(ctx context.Context, iD int64) (bool, error) {
	return NodesoutExists(ctx, boil.GetContextDB(), iD)
}

// NodesoutExists checks if the Nodesout row exists.
func NodesoutExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nodesout\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if nodesout exists")
	}

	return exists, nil
}

// Exists checks if the Nodesout row exists.
func (o *Nodesout) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NodesoutExists(ctx, exec, o.ID)
}
