// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rq

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Request is an object representing the database table.
type Request struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TaskID      null.Int64  `boil:"task_id" json:"task_id,omitempty" toml:"task_id" yaml:"task_id,omitempty"`
	Fsrarid     null.String `boil:"fsrarid" json:"fsrarid,omitempty" toml:"fsrarid" yaml:"fsrarid,omitempty"`
	CreatedAt   null.String `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.String `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	SendTime    null.String `boil:"send_time" json:"send_time,omitempty" toml:"send_time" yaml:"send_time,omitempty"`
	ReceiveTime null.String `boil:"receive_time" json:"receive_time,omitempty" toml:"receive_time" yaml:"receive_time,omitempty"`
	Completed   null.Int64  `boil:"completed" json:"completed,omitempty" toml:"completed" yaml:"completed,omitempty"`
	Rule        null.String `boil:"rule" json:"rule,omitempty" toml:"rule" yaml:"rule,omitempty"`
	ArgName     null.String `boil:"arg_name" json:"arg_name,omitempty" toml:"arg_name" yaml:"arg_name,omitempty"`
	ArgValue    null.String `boil:"arg_value" json:"arg_value,omitempty" toml:"arg_value" yaml:"arg_value,omitempty"`
	StateID     null.Int64  `boil:"state_id" json:"state_id,omitempty" toml:"state_id" yaml:"state_id,omitempty"`
	ReplyID     null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	RawRequest  null.String `boil:"raw_request" json:"raw_request,omitempty" toml:"raw_request" yaml:"raw_request,omitempty"`
	ReplyName   null.String `boil:"reply_name" json:"reply_name,omitempty" toml:"reply_name" yaml:"reply_name,omitempty"`
	RawResponce null.String `boil:"raw_responce" json:"raw_responce,omitempty" toml:"raw_responce" yaml:"raw_responce,omitempty"`
	Rem         null.String `boil:"rem" json:"rem,omitempty" toml:"rem" yaml:"rem,omitempty"`

	R *requestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequestColumns = struct {
	ID          string
	TaskID      string
	Fsrarid     string
	CreatedAt   string
	UpdatedAt   string
	SendTime    string
	ReceiveTime string
	Completed   string
	Rule        string
	ArgName     string
	ArgValue    string
	StateID     string
	ReplyID     string
	RawRequest  string
	ReplyName   string
	RawResponce string
	Rem         string
}{
	ID:          "id",
	TaskID:      "task_id",
	Fsrarid:     "fsrarid",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	SendTime:    "send_time",
	ReceiveTime: "receive_time",
	Completed:   "completed",
	Rule:        "rule",
	ArgName:     "arg_name",
	ArgValue:    "arg_value",
	StateID:     "state_id",
	ReplyID:     "reply_id",
	RawRequest:  "raw_request",
	ReplyName:   "reply_name",
	RawResponce: "raw_responce",
	Rem:         "rem",
}

var RequestTableColumns = struct {
	ID          string
	TaskID      string
	Fsrarid     string
	CreatedAt   string
	UpdatedAt   string
	SendTime    string
	ReceiveTime string
	Completed   string
	Rule        string
	ArgName     string
	ArgValue    string
	StateID     string
	ReplyID     string
	RawRequest  string
	ReplyName   string
	RawResponce string
	Rem         string
}{
	ID:          "request.id",
	TaskID:      "request.task_id",
	Fsrarid:     "request.fsrarid",
	CreatedAt:   "request.created_at",
	UpdatedAt:   "request.updated_at",
	SendTime:    "request.send_time",
	ReceiveTime: "request.receive_time",
	Completed:   "request.completed",
	Rule:        "request.rule",
	ArgName:     "request.arg_name",
	ArgValue:    "request.arg_value",
	StateID:     "request.state_id",
	ReplyID:     "request.reply_id",
	RawRequest:  "request.raw_request",
	ReplyName:   "request.reply_name",
	RawResponce: "request.raw_responce",
	Rem:         "request.rem",
}

// Generated where

var RequestWhere = struct {
	ID          whereHelperint64
	TaskID      whereHelpernull_Int64
	Fsrarid     whereHelpernull_String
	CreatedAt   whereHelpernull_String
	UpdatedAt   whereHelpernull_String
	SendTime    whereHelpernull_String
	ReceiveTime whereHelpernull_String
	Completed   whereHelpernull_Int64
	Rule        whereHelpernull_String
	ArgName     whereHelpernull_String
	ArgValue    whereHelpernull_String
	StateID     whereHelpernull_Int64
	ReplyID     whereHelpernull_String
	RawRequest  whereHelpernull_String
	ReplyName   whereHelpernull_String
	RawResponce whereHelpernull_String
	Rem         whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"request\".\"id\""},
	TaskID:      whereHelpernull_Int64{field: "\"request\".\"task_id\""},
	Fsrarid:     whereHelpernull_String{field: "\"request\".\"fsrarid\""},
	CreatedAt:   whereHelpernull_String{field: "\"request\".\"created_at\""},
	UpdatedAt:   whereHelpernull_String{field: "\"request\".\"updated_at\""},
	SendTime:    whereHelpernull_String{field: "\"request\".\"send_time\""},
	ReceiveTime: whereHelpernull_String{field: "\"request\".\"receive_time\""},
	Completed:   whereHelpernull_Int64{field: "\"request\".\"completed\""},
	Rule:        whereHelpernull_String{field: "\"request\".\"rule\""},
	ArgName:     whereHelpernull_String{field: "\"request\".\"arg_name\""},
	ArgValue:    whereHelpernull_String{field: "\"request\".\"arg_value\""},
	StateID:     whereHelpernull_Int64{field: "\"request\".\"state_id\""},
	ReplyID:     whereHelpernull_String{field: "\"request\".\"reply_id\""},
	RawRequest:  whereHelpernull_String{field: "\"request\".\"raw_request\""},
	ReplyName:   whereHelpernull_String{field: "\"request\".\"reply_name\""},
	RawResponce: whereHelpernull_String{field: "\"request\".\"raw_responce\""},
	Rem:         whereHelpernull_String{field: "\"request\".\"rem\""},
}

// RequestRels is where relationship names are stored.
var RequestRels = struct {
}{}

// requestR is where relationships are stored.
type requestR struct {
}

// NewStruct creates a new relationship struct
func (*requestR) NewStruct() *requestR {
	return &requestR{}
}

// requestL is where Load methods for each relationship are stored.
type requestL struct{}

var (
	requestAllColumns            = []string{"id", "task_id", "fsrarid", "created_at", "updated_at", "send_time", "receive_time", "completed", "rule", "arg_name", "arg_value", "state_id", "reply_id", "raw_request", "reply_name", "raw_responce", "rem"}
	requestColumnsWithoutDefault = []string{}
	requestColumnsWithDefault    = []string{"id", "task_id", "fsrarid", "created_at", "updated_at", "send_time", "receive_time", "completed", "rule", "arg_name", "arg_value", "state_id", "reply_id", "raw_request", "reply_name", "raw_responce", "rem"}
	requestPrimaryKeyColumns     = []string{"id"}
	requestGeneratedColumns      = []string{"id"}
)

type (
	// RequestSlice is an alias for a slice of pointers to Request.
	// This should almost always be used instead of []Request.
	RequestSlice []*Request
	// RequestHook is the signature for custom Request hook methods
	RequestHook func(context.Context, boil.ContextExecutor, *Request) error

	requestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requestType                 = reflect.TypeOf(&Request{})
	requestMapping              = queries.MakeStructMapping(requestType)
	requestPrimaryKeyMapping, _ = queries.BindMapping(requestType, requestMapping, requestPrimaryKeyColumns)
	requestInsertCacheMut       sync.RWMutex
	requestInsertCache          = make(map[string]insertCache)
	requestUpdateCacheMut       sync.RWMutex
	requestUpdateCache          = make(map[string]updateCache)
	requestUpsertCacheMut       sync.RWMutex
	requestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requestAfterSelectMu sync.Mutex
var requestAfterSelectHooks []RequestHook

var requestBeforeInsertMu sync.Mutex
var requestBeforeInsertHooks []RequestHook
var requestAfterInsertMu sync.Mutex
var requestAfterInsertHooks []RequestHook

var requestBeforeUpdateMu sync.Mutex
var requestBeforeUpdateHooks []RequestHook
var requestAfterUpdateMu sync.Mutex
var requestAfterUpdateHooks []RequestHook

var requestBeforeDeleteMu sync.Mutex
var requestBeforeDeleteHooks []RequestHook
var requestAfterDeleteMu sync.Mutex
var requestAfterDeleteHooks []RequestHook

var requestBeforeUpsertMu sync.Mutex
var requestBeforeUpsertHooks []RequestHook
var requestAfterUpsertMu sync.Mutex
var requestAfterUpsertHooks []RequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Request) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Request) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Request) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Request) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Request) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Request) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Request) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Request) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Request) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequestHook registers your hook function for all future operations.
func AddRequestHook(hookPoint boil.HookPoint, requestHook RequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		requestAfterSelectMu.Lock()
		requestAfterSelectHooks = append(requestAfterSelectHooks, requestHook)
		requestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		requestBeforeInsertMu.Lock()
		requestBeforeInsertHooks = append(requestBeforeInsertHooks, requestHook)
		requestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		requestAfterInsertMu.Lock()
		requestAfterInsertHooks = append(requestAfterInsertHooks, requestHook)
		requestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		requestBeforeUpdateMu.Lock()
		requestBeforeUpdateHooks = append(requestBeforeUpdateHooks, requestHook)
		requestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		requestAfterUpdateMu.Lock()
		requestAfterUpdateHooks = append(requestAfterUpdateHooks, requestHook)
		requestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		requestBeforeDeleteMu.Lock()
		requestBeforeDeleteHooks = append(requestBeforeDeleteHooks, requestHook)
		requestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		requestAfterDeleteMu.Lock()
		requestAfterDeleteHooks = append(requestAfterDeleteHooks, requestHook)
		requestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		requestBeforeUpsertMu.Lock()
		requestBeforeUpsertHooks = append(requestBeforeUpsertHooks, requestHook)
		requestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		requestAfterUpsertMu.Lock()
		requestAfterUpsertHooks = append(requestAfterUpsertHooks, requestHook)
		requestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single request record from the query using the global executor.
func (q requestQuery) OneG(ctx context.Context) (*Request, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single request record from the query.
func (q requestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Request, error) {
	o := &Request{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: failed to execute a one query for request")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Request records from the query using the global executor.
func (q requestQuery) AllG(ctx context.Context) (RequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Request records from the query.
func (q requestQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestSlice, error) {
	var o []*Request

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "rq: failed to assign all query results to Request slice")
	}

	if len(requestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Request records in the query using the global executor
func (q requestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Request records in the query.
func (q requestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to count request rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q requestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q requestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "rq: failed to check if request exists")
	}

	return count > 0, nil
}

// Requests retrieves all the records using an executor.
func Requests(mods ...qm.QueryMod) requestQuery {
	mods = append(mods, qm.From("\"request\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"request\".*"})
	}

	return requestQuery{q}
}

// FindRequestG retrieves a single record by ID.
func FindRequestG(ctx context.Context, iD int64, selectCols ...string) (*Request, error) {
	return FindRequest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Request, error) {
	requestObj := &Request{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"request\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "rq: unable to select from request")
	}

	if err = requestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return requestObj, err
	}

	return requestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Request) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Request) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no request provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requestInsertCacheMut.RLock()
	cache, cached := requestInsertCache[key]
	requestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requestAllColumns,
			requestColumnsWithDefault,
			requestColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, requestGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(requestType, requestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requestType, requestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"request\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"request\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "rq: unable to insert into request")
	}

	if !cached {
		requestInsertCacheMut.Lock()
		requestInsertCache[key] = cache
		requestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Request record using the global executor.
// See Update for more documentation.
func (o *Request) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Request.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Request) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requestUpdateCacheMut.RLock()
	cache, cached := requestUpdateCache[key]
	requestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requestAllColumns,
			requestPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, requestGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("rq: unable to update request, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"request\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, requestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requestType, requestMapping, append(wl, requestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update request row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by update for request")
	}

	if !cached {
		requestUpdateCacheMut.Lock()
		requestUpdateCache[key] = cache
		requestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q requestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q requestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all for request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected for request")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("rq: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"request\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, requestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to update all in request slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to retrieve rows affected all in update all request")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Request) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Request) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("rq: no request provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requestUpsertCacheMut.RLock()
	cache, cached := requestUpsertCache[key]
	requestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			requestAllColumns,
			requestColumnsWithDefault,
			requestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			requestAllColumns,
			requestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("rq: unable to upsert request, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(requestPrimaryKeyColumns))
			copy(conflict, requestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"request\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(requestType, requestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requestType, requestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "rq: unable to upsert request")
	}

	if !cached {
		requestUpsertCacheMut.Lock()
		requestUpsertCache[key] = cache
		requestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Request record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Request) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Request record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Request) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("rq: no Request provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requestPrimaryKeyMapping)
	sql := "DELETE FROM \"request\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete from request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by delete for request")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q requestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q requestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("rq: no requestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for request")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, requestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "rq: unable to delete all from request slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "rq: failed to get rows affected by deleteall for request")
	}

	if len(requestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Request) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: no Request provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Request) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("rq: empty RequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"request\".* FROM \"request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, requestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "rq: unable to reload all in RequestSlice")
	}

	*o = slice

	return nil
}

// RequestExistsG checks if the Request row exists.
func RequestExistsG(ctx context.Context, iD int64) (bool, error) {
	return RequestExists(ctx, boil.GetContextDB(), iD)
}

// RequestExists checks if the Request row exists.
func RequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"request\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "rq: unable to check if request exists")
	}

	return exists, nil
}

// Exists checks if the Request row exists.
func (o *Request) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RequestExists(ctx, exec, o.ID)
}
