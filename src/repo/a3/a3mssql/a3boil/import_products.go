// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImportProduct is an object representing the database table.
type ImportProduct struct {
	ID                     int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDImportReports        null.Int    `boil:"id_import_reports" json:"id_import_reports,omitempty" toml:"id_import_reports" yaml:"id_import_reports,omitempty"`
	ProductFullName        null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity        null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume       null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcVolumeMin    null.String `boil:"product_alc_volume_min" json:"product_alc_volume_min,omitempty" toml:"product_alc_volume_min" yaml:"product_alc_volume_min,omitempty"`
	ProductAlcVolumeMax    null.String `boil:"product_alc_volume_max" json:"product_alc_volume_max,omitempty" toml:"product_alc_volume_max" yaml:"product_alc_volume_max,omitempty"`
	ProductAlcCode         null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode            null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType        null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProductIddomain        null.String `boil:"product_iddomain" json:"product_iddomain,omitempty" toml:"product_iddomain" yaml:"product_iddomain,omitempty"`
	ProductQuantity        null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	ProductPlannedImportID null.String `boil:"product_planned_import_id" json:"product_planned_import_id,omitempty" toml:"product_planned_import_id" yaml:"product_planned_import_id,omitempty"`
	ProductParty           null.String `boil:"product_party" json:"product_party,omitempty" toml:"product_party" yaml:"product_party,omitempty"`
	ProductComment         null.String `boil:"product_comment" json:"product_comment,omitempty" toml:"product_comment" yaml:"product_comment,omitempty"`
	ProducerType           null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID    null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn            null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP            null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName       null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName      null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode    null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode     null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription    null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *importProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L importProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImportProductColumns = struct {
	ID                     string
	IDImportReports        string
	ProductFullName        string
	ProductCapacity        string
	ProductAlcVolume       string
	ProductAlcVolumeMin    string
	ProductAlcVolumeMax    string
	ProductAlcCode         string
	ProductCode            string
	ProductUnitType        string
	ProductIddomain        string
	ProductQuantity        string
	ProductPlannedImportID string
	ProductParty           string
	ProductComment         string
	ProducerType           string
	ProducerClientRegID    string
	ProducerInn            string
	ProducerKPP            string
	ProducerFullName       string
	ProducerShortName      string
	ProducerCountryCode    string
	ProducerRegionCode     string
	ProducerDescription    string
}{
	ID:                     "id",
	IDImportReports:        "id_import_reports",
	ProductFullName:        "product_full_name",
	ProductCapacity:        "product_capacity",
	ProductAlcVolume:       "product_alc_volume",
	ProductAlcVolumeMin:    "product_alc_volume_min",
	ProductAlcVolumeMax:    "product_alc_volume_max",
	ProductAlcCode:         "product_alc_code",
	ProductCode:            "product_code",
	ProductUnitType:        "product_unit_type",
	ProductIddomain:        "product_iddomain",
	ProductQuantity:        "product_quantity",
	ProductPlannedImportID: "product_planned_import_id",
	ProductParty:           "product_party",
	ProductComment:         "product_comment",
	ProducerType:           "producer_type",
	ProducerClientRegID:    "producer_client_reg_id",
	ProducerInn:            "producer_inn",
	ProducerKPP:            "producer_kpp",
	ProducerFullName:       "producer_full_name",
	ProducerShortName:      "producer_short_name",
	ProducerCountryCode:    "producer_country_code",
	ProducerRegionCode:     "producer_region_code",
	ProducerDescription:    "producer_description",
}

var ImportProductTableColumns = struct {
	ID                     string
	IDImportReports        string
	ProductFullName        string
	ProductCapacity        string
	ProductAlcVolume       string
	ProductAlcVolumeMin    string
	ProductAlcVolumeMax    string
	ProductAlcCode         string
	ProductCode            string
	ProductUnitType        string
	ProductIddomain        string
	ProductQuantity        string
	ProductPlannedImportID string
	ProductParty           string
	ProductComment         string
	ProducerType           string
	ProducerClientRegID    string
	ProducerInn            string
	ProducerKPP            string
	ProducerFullName       string
	ProducerShortName      string
	ProducerCountryCode    string
	ProducerRegionCode     string
	ProducerDescription    string
}{
	ID:                     "import_products.id",
	IDImportReports:        "import_products.id_import_reports",
	ProductFullName:        "import_products.product_full_name",
	ProductCapacity:        "import_products.product_capacity",
	ProductAlcVolume:       "import_products.product_alc_volume",
	ProductAlcVolumeMin:    "import_products.product_alc_volume_min",
	ProductAlcVolumeMax:    "import_products.product_alc_volume_max",
	ProductAlcCode:         "import_products.product_alc_code",
	ProductCode:            "import_products.product_code",
	ProductUnitType:        "import_products.product_unit_type",
	ProductIddomain:        "import_products.product_iddomain",
	ProductQuantity:        "import_products.product_quantity",
	ProductPlannedImportID: "import_products.product_planned_import_id",
	ProductParty:           "import_products.product_party",
	ProductComment:         "import_products.product_comment",
	ProducerType:           "import_products.producer_type",
	ProducerClientRegID:    "import_products.producer_client_reg_id",
	ProducerInn:            "import_products.producer_inn",
	ProducerKPP:            "import_products.producer_kpp",
	ProducerFullName:       "import_products.producer_full_name",
	ProducerShortName:      "import_products.producer_short_name",
	ProducerCountryCode:    "import_products.producer_country_code",
	ProducerRegionCode:     "import_products.producer_region_code",
	ProducerDescription:    "import_products.producer_description",
}

// Generated where

var ImportProductWhere = struct {
	ID                     whereHelperint
	IDImportReports        whereHelpernull_Int
	ProductFullName        whereHelpernull_String
	ProductCapacity        whereHelpernull_String
	ProductAlcVolume       whereHelpernull_String
	ProductAlcVolumeMin    whereHelpernull_String
	ProductAlcVolumeMax    whereHelpernull_String
	ProductAlcCode         whereHelpernull_String
	ProductCode            whereHelpernull_String
	ProductUnitType        whereHelpernull_String
	ProductIddomain        whereHelpernull_String
	ProductQuantity        whereHelpernull_String
	ProductPlannedImportID whereHelpernull_String
	ProductParty           whereHelpernull_String
	ProductComment         whereHelpernull_String
	ProducerType           whereHelpernull_String
	ProducerClientRegID    whereHelpernull_String
	ProducerInn            whereHelpernull_String
	ProducerKPP            whereHelpernull_String
	ProducerFullName       whereHelpernull_String
	ProducerShortName      whereHelpernull_String
	ProducerCountryCode    whereHelpernull_String
	ProducerRegionCode     whereHelpernull_String
	ProducerDescription    whereHelpernull_String
}{
	ID:                     whereHelperint{field: "[dbo].[import_products].[id]"},
	IDImportReports:        whereHelpernull_Int{field: "[dbo].[import_products].[id_import_reports]"},
	ProductFullName:        whereHelpernull_String{field: "[dbo].[import_products].[product_full_name]"},
	ProductCapacity:        whereHelpernull_String{field: "[dbo].[import_products].[product_capacity]"},
	ProductAlcVolume:       whereHelpernull_String{field: "[dbo].[import_products].[product_alc_volume]"},
	ProductAlcVolumeMin:    whereHelpernull_String{field: "[dbo].[import_products].[product_alc_volume_min]"},
	ProductAlcVolumeMax:    whereHelpernull_String{field: "[dbo].[import_products].[product_alc_volume_max]"},
	ProductAlcCode:         whereHelpernull_String{field: "[dbo].[import_products].[product_alc_code]"},
	ProductCode:            whereHelpernull_String{field: "[dbo].[import_products].[product_code]"},
	ProductUnitType:        whereHelpernull_String{field: "[dbo].[import_products].[product_unit_type]"},
	ProductIddomain:        whereHelpernull_String{field: "[dbo].[import_products].[product_iddomain]"},
	ProductQuantity:        whereHelpernull_String{field: "[dbo].[import_products].[product_quantity]"},
	ProductPlannedImportID: whereHelpernull_String{field: "[dbo].[import_products].[product_planned_import_id]"},
	ProductParty:           whereHelpernull_String{field: "[dbo].[import_products].[product_party]"},
	ProductComment:         whereHelpernull_String{field: "[dbo].[import_products].[product_comment]"},
	ProducerType:           whereHelpernull_String{field: "[dbo].[import_products].[producer_type]"},
	ProducerClientRegID:    whereHelpernull_String{field: "[dbo].[import_products].[producer_client_reg_id]"},
	ProducerInn:            whereHelpernull_String{field: "[dbo].[import_products].[producer_inn]"},
	ProducerKPP:            whereHelpernull_String{field: "[dbo].[import_products].[producer_kpp]"},
	ProducerFullName:       whereHelpernull_String{field: "[dbo].[import_products].[producer_full_name]"},
	ProducerShortName:      whereHelpernull_String{field: "[dbo].[import_products].[producer_short_name]"},
	ProducerCountryCode:    whereHelpernull_String{field: "[dbo].[import_products].[producer_country_code]"},
	ProducerRegionCode:     whereHelpernull_String{field: "[dbo].[import_products].[producer_region_code]"},
	ProducerDescription:    whereHelpernull_String{field: "[dbo].[import_products].[producer_description]"},
}

// ImportProductRels is where relationship names are stored.
var ImportProductRels = struct {
}{}

// importProductR is where relationships are stored.
type importProductR struct {
}

// NewStruct creates a new relationship struct
func (*importProductR) NewStruct() *importProductR {
	return &importProductR{}
}

// importProductL is where Load methods for each relationship are stored.
type importProductL struct{}

var (
	importProductAllColumns            = []string{"id", "id_import_reports", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_volume_min", "product_alc_volume_max", "product_alc_code", "product_code", "product_unit_type", "product_iddomain", "product_quantity", "product_planned_import_id", "product_party", "product_comment", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	importProductColumnsWithoutDefault = []string{"id_import_reports", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_volume_min", "product_alc_volume_max", "product_alc_code", "product_code", "product_unit_type", "product_iddomain", "product_quantity", "product_planned_import_id", "product_party", "product_comment", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	importProductColumnsWithDefault    = []string{"id"}
	importProductPrimaryKeyColumns     = []string{"id"}
	importProductGeneratedColumns      = []string{"id"}
)

type (
	// ImportProductSlice is an alias for a slice of pointers to ImportProduct.
	// This should almost always be used instead of []ImportProduct.
	ImportProductSlice []*ImportProduct
	// ImportProductHook is the signature for custom ImportProduct hook methods
	ImportProductHook func(context.Context, boil.ContextExecutor, *ImportProduct) error

	importProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	importProductType                 = reflect.TypeOf(&ImportProduct{})
	importProductMapping              = queries.MakeStructMapping(importProductType)
	importProductPrimaryKeyMapping, _ = queries.BindMapping(importProductType, importProductMapping, importProductPrimaryKeyColumns)
	importProductInsertCacheMut       sync.RWMutex
	importProductInsertCache          = make(map[string]insertCache)
	importProductUpdateCacheMut       sync.RWMutex
	importProductUpdateCache          = make(map[string]updateCache)
	importProductUpsertCacheMut       sync.RWMutex
	importProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var importProductAfterSelectMu sync.Mutex
var importProductAfterSelectHooks []ImportProductHook

var importProductBeforeInsertMu sync.Mutex
var importProductBeforeInsertHooks []ImportProductHook
var importProductAfterInsertMu sync.Mutex
var importProductAfterInsertHooks []ImportProductHook

var importProductBeforeUpdateMu sync.Mutex
var importProductBeforeUpdateHooks []ImportProductHook
var importProductAfterUpdateMu sync.Mutex
var importProductAfterUpdateHooks []ImportProductHook

var importProductBeforeDeleteMu sync.Mutex
var importProductBeforeDeleteHooks []ImportProductHook
var importProductAfterDeleteMu sync.Mutex
var importProductAfterDeleteHooks []ImportProductHook

var importProductBeforeUpsertMu sync.Mutex
var importProductBeforeUpsertHooks []ImportProductHook
var importProductAfterUpsertMu sync.Mutex
var importProductAfterUpsertHooks []ImportProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImportProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImportProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImportProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImportProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImportProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImportProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImportProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImportProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImportProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImportProductHook registers your hook function for all future operations.
func AddImportProductHook(hookPoint boil.HookPoint, importProductHook ImportProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		importProductAfterSelectMu.Lock()
		importProductAfterSelectHooks = append(importProductAfterSelectHooks, importProductHook)
		importProductAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		importProductBeforeInsertMu.Lock()
		importProductBeforeInsertHooks = append(importProductBeforeInsertHooks, importProductHook)
		importProductBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		importProductAfterInsertMu.Lock()
		importProductAfterInsertHooks = append(importProductAfterInsertHooks, importProductHook)
		importProductAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		importProductBeforeUpdateMu.Lock()
		importProductBeforeUpdateHooks = append(importProductBeforeUpdateHooks, importProductHook)
		importProductBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		importProductAfterUpdateMu.Lock()
		importProductAfterUpdateHooks = append(importProductAfterUpdateHooks, importProductHook)
		importProductAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		importProductBeforeDeleteMu.Lock()
		importProductBeforeDeleteHooks = append(importProductBeforeDeleteHooks, importProductHook)
		importProductBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		importProductAfterDeleteMu.Lock()
		importProductAfterDeleteHooks = append(importProductAfterDeleteHooks, importProductHook)
		importProductAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		importProductBeforeUpsertMu.Lock()
		importProductBeforeUpsertHooks = append(importProductBeforeUpsertHooks, importProductHook)
		importProductBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		importProductAfterUpsertMu.Lock()
		importProductAfterUpsertHooks = append(importProductAfterUpsertHooks, importProductHook)
		importProductAfterUpsertMu.Unlock()
	}
}

// OneG returns a single importProduct record from the query using the global executor.
func (q importProductQuery) OneG(ctx context.Context) (*ImportProduct, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single importProduct record from the query.
func (q importProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ImportProduct, error) {
	o := &ImportProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for import_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ImportProduct records from the query using the global executor.
func (q importProductQuery) AllG(ctx context.Context) (ImportProductSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ImportProduct records from the query.
func (q importProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImportProductSlice, error) {
	var o []*ImportProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ImportProduct slice")
	}

	if len(importProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ImportProduct records in the query using the global executor
func (q importProductQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ImportProduct records in the query.
func (q importProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count import_products rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q importProductQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q importProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if import_products exists")
	}

	return count > 0, nil
}

// ImportProducts retrieves all the records using an executor.
func ImportProducts(mods ...qm.QueryMod) importProductQuery {
	mods = append(mods, qm.From("[dbo].[import_products]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[import_products].*"})
	}

	return importProductQuery{q}
}

// FindImportProductG retrieves a single record by ID.
func FindImportProductG(ctx context.Context, iD int, selectCols ...string) (*ImportProduct, error) {
	return FindImportProduct(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindImportProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImportProduct(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ImportProduct, error) {
	importProductObj := &ImportProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[import_products] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, importProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from import_products")
	}

	if err = importProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return importProductObj, err
	}

	return importProductObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ImportProduct) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImportProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	importProductInsertCacheMut.RLock()
	cache, cached := importProductInsertCache[key]
	importProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			importProductAllColumns,
			importProductColumnsWithDefault,
			importProductColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, importProductGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(importProductType, importProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(importProductType, importProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[import_products] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[import_products] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into import_products")
	}

	if !cached {
		importProductInsertCacheMut.Lock()
		importProductInsertCache[key] = cache
		importProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ImportProduct record using the global executor.
// See Update for more documentation.
func (o *ImportProduct) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ImportProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImportProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	importProductUpdateCacheMut.RLock()
	cache, cached := importProductUpdateCache[key]
	importProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			importProductAllColumns,
			importProductPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, importProductGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update import_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[import_products] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, importProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(importProductType, importProductMapping, append(wl, importProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update import_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for import_products")
	}

	if !cached {
		importProductUpdateCacheMut.Lock()
		importProductUpdateCache[key] = cache
		importProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q importProductQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q importProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for import_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for import_products")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ImportProductSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImportProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[import_products] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, importProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in importProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all importProduct")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ImportProduct) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ImportProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	importProductUpsertCacheMut.RLock()
	cache, cached := importProductUpsertCache[key]
	importProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			importProductAllColumns,
			importProductColumnsWithDefault,
			importProductColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, importProductGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(importProductPrimaryKeyColumns, v) && strmangle.ContainsAny(importProductColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert import_products, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			importProductAllColumns,
			importProductPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, importProductGeneratedColumns)

		ret := strmangle.SetComplement(importProductAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert import_products, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[import_products]", importProductPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(importProductPrimaryKeyColumns))
		copy(whitelist, importProductPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(importProductType, importProductMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(importProductType, importProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert import_products")
	}

	if !cached {
		importProductUpsertCacheMut.Lock()
		importProductUpsertCache[key] = cache
		importProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ImportProduct record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ImportProduct) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ImportProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImportProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ImportProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), importProductPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[import_products] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from import_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for import_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q importProductQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q importProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no importProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from import_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_products")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ImportProductSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImportProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(importProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[import_products] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, importProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from importProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_products")
	}

	if len(importProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ImportProduct) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ImportProduct provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImportProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImportProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportProductSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ImportProductSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImportProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[import_products].* FROM [dbo].[import_products] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, importProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ImportProductSlice")
	}

	*o = slice

	return nil
}

// ImportProductExistsG checks if the ImportProduct row exists.
func ImportProductExistsG(ctx context.Context, iD int) (bool, error) {
	return ImportProductExists(ctx, boil.GetContextDB(), iD)
}

// ImportProductExists checks if the ImportProduct row exists.
func ImportProductExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[import_products] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if import_products exists")
	}

	return exists, nil
}

// Exists checks if the ImportProduct row exists.
func (o *ImportProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImportProductExists(ctx, exec, o.ID)
}
