// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionGrape is an object representing the database table.
type ProductionGrape struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionReports  null.Int    `boil:"id_production_reports" json:"id_production_reports,omitempty" toml:"id_production_reports" yaml:"id_production_reports,omitempty"`
	IDProductionProducts null.Int    `boil:"id_production_products" json:"id_production_products,omitempty" toml:"id_production_products" yaml:"id_production_products,omitempty"`
	GrapeSort            null.String `boil:"grape_sort" json:"grape_sort,omitempty" toml:"grape_sort" yaml:"grape_sort,omitempty"`
	GrapeCode            null.String `boil:"grape_code" json:"grape_code,omitempty" toml:"grape_code" yaml:"grape_code,omitempty"`
	GrapeWeight          null.String `boil:"grape_weight" json:"grape_weight,omitempty" toml:"grape_weight" yaml:"grape_weight,omitempty"`
	VineyardNumber       null.String `boil:"vineyard_number" json:"vineyard_number,omitempty" toml:"vineyard_number" yaml:"vineyard_number,omitempty"`
	ReceiptDate          null.String `boil:"receipt_date" json:"receipt_date,omitempty" toml:"receipt_date" yaml:"receipt_date,omitempty"`
	GrapeIddomain        null.String `boil:"grape_iddomain" json:"grape_iddomain,omitempty" toml:"grape_iddomain" yaml:"grape_iddomain,omitempty"`
	SupplierType         null.String `boil:"supplier_type" json:"supplier_type,omitempty" toml:"supplier_type" yaml:"supplier_type,omitempty"`
	SupplierClientRegID  null.String `boil:"supplier_client_reg_id" json:"supplier_client_reg_id,omitempty" toml:"supplier_client_reg_id" yaml:"supplier_client_reg_id,omitempty"`
	SupplierInn          null.String `boil:"supplier_inn" json:"supplier_inn,omitempty" toml:"supplier_inn" yaml:"supplier_inn,omitempty"`
	SupplierKPP          null.String `boil:"supplier_kpp" json:"supplier_kpp,omitempty" toml:"supplier_kpp" yaml:"supplier_kpp,omitempty"`
	SupplierFullName     null.String `boil:"supplier_full_name" json:"supplier_full_name,omitempty" toml:"supplier_full_name" yaml:"supplier_full_name,omitempty"`
	SupplierShortName    null.String `boil:"supplier_short_name" json:"supplier_short_name,omitempty" toml:"supplier_short_name" yaml:"supplier_short_name,omitempty"`
	SupplierCountryCode  null.String `boil:"supplier_country_code" json:"supplier_country_code,omitempty" toml:"supplier_country_code" yaml:"supplier_country_code,omitempty"`
	SupplierRegionCode   null.String `boil:"supplier_region_code" json:"supplier_region_code,omitempty" toml:"supplier_region_code" yaml:"supplier_region_code,omitempty"`
	SupplierDescription  null.String `boil:"supplier_description" json:"supplier_description,omitempty" toml:"supplier_description" yaml:"supplier_description,omitempty"`

	R *productionGrapeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionGrapeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionGrapeColumns = struct {
	ID                   string
	IDProductionReports  string
	IDProductionProducts string
	GrapeSort            string
	GrapeCode            string
	GrapeWeight          string
	VineyardNumber       string
	ReceiptDate          string
	GrapeIddomain        string
	SupplierType         string
	SupplierClientRegID  string
	SupplierInn          string
	SupplierKPP          string
	SupplierFullName     string
	SupplierShortName    string
	SupplierCountryCode  string
	SupplierRegionCode   string
	SupplierDescription  string
}{
	ID:                   "id",
	IDProductionReports:  "id_production_reports",
	IDProductionProducts: "id_production_products",
	GrapeSort:            "grape_sort",
	GrapeCode:            "grape_code",
	GrapeWeight:          "grape_weight",
	VineyardNumber:       "vineyard_number",
	ReceiptDate:          "receipt_date",
	GrapeIddomain:        "grape_iddomain",
	SupplierType:         "supplier_type",
	SupplierClientRegID:  "supplier_client_reg_id",
	SupplierInn:          "supplier_inn",
	SupplierKPP:          "supplier_kpp",
	SupplierFullName:     "supplier_full_name",
	SupplierShortName:    "supplier_short_name",
	SupplierCountryCode:  "supplier_country_code",
	SupplierRegionCode:   "supplier_region_code",
	SupplierDescription:  "supplier_description",
}

var ProductionGrapeTableColumns = struct {
	ID                   string
	IDProductionReports  string
	IDProductionProducts string
	GrapeSort            string
	GrapeCode            string
	GrapeWeight          string
	VineyardNumber       string
	ReceiptDate          string
	GrapeIddomain        string
	SupplierType         string
	SupplierClientRegID  string
	SupplierInn          string
	SupplierKPP          string
	SupplierFullName     string
	SupplierShortName    string
	SupplierCountryCode  string
	SupplierRegionCode   string
	SupplierDescription  string
}{
	ID:                   "production_grapes.id",
	IDProductionReports:  "production_grapes.id_production_reports",
	IDProductionProducts: "production_grapes.id_production_products",
	GrapeSort:            "production_grapes.grape_sort",
	GrapeCode:            "production_grapes.grape_code",
	GrapeWeight:          "production_grapes.grape_weight",
	VineyardNumber:       "production_grapes.vineyard_number",
	ReceiptDate:          "production_grapes.receipt_date",
	GrapeIddomain:        "production_grapes.grape_iddomain",
	SupplierType:         "production_grapes.supplier_type",
	SupplierClientRegID:  "production_grapes.supplier_client_reg_id",
	SupplierInn:          "production_grapes.supplier_inn",
	SupplierKPP:          "production_grapes.supplier_kpp",
	SupplierFullName:     "production_grapes.supplier_full_name",
	SupplierShortName:    "production_grapes.supplier_short_name",
	SupplierCountryCode:  "production_grapes.supplier_country_code",
	SupplierRegionCode:   "production_grapes.supplier_region_code",
	SupplierDescription:  "production_grapes.supplier_description",
}

// Generated where

var ProductionGrapeWhere = struct {
	ID                   whereHelperint
	IDProductionReports  whereHelpernull_Int
	IDProductionProducts whereHelpernull_Int
	GrapeSort            whereHelpernull_String
	GrapeCode            whereHelpernull_String
	GrapeWeight          whereHelpernull_String
	VineyardNumber       whereHelpernull_String
	ReceiptDate          whereHelpernull_String
	GrapeIddomain        whereHelpernull_String
	SupplierType         whereHelpernull_String
	SupplierClientRegID  whereHelpernull_String
	SupplierInn          whereHelpernull_String
	SupplierKPP          whereHelpernull_String
	SupplierFullName     whereHelpernull_String
	SupplierShortName    whereHelpernull_String
	SupplierCountryCode  whereHelpernull_String
	SupplierRegionCode   whereHelpernull_String
	SupplierDescription  whereHelpernull_String
}{
	ID:                   whereHelperint{field: "[dbo].[production_grapes].[id]"},
	IDProductionReports:  whereHelpernull_Int{field: "[dbo].[production_grapes].[id_production_reports]"},
	IDProductionProducts: whereHelpernull_Int{field: "[dbo].[production_grapes].[id_production_products]"},
	GrapeSort:            whereHelpernull_String{field: "[dbo].[production_grapes].[grape_sort]"},
	GrapeCode:            whereHelpernull_String{field: "[dbo].[production_grapes].[grape_code]"},
	GrapeWeight:          whereHelpernull_String{field: "[dbo].[production_grapes].[grape_weight]"},
	VineyardNumber:       whereHelpernull_String{field: "[dbo].[production_grapes].[vineyard_number]"},
	ReceiptDate:          whereHelpernull_String{field: "[dbo].[production_grapes].[receipt_date]"},
	GrapeIddomain:        whereHelpernull_String{field: "[dbo].[production_grapes].[grape_iddomain]"},
	SupplierType:         whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_type]"},
	SupplierClientRegID:  whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_client_reg_id]"},
	SupplierInn:          whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_inn]"},
	SupplierKPP:          whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_kpp]"},
	SupplierFullName:     whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_full_name]"},
	SupplierShortName:    whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_short_name]"},
	SupplierCountryCode:  whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_country_code]"},
	SupplierRegionCode:   whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_region_code]"},
	SupplierDescription:  whereHelpernull_String{field: "[dbo].[production_grapes].[supplier_description]"},
}

// ProductionGrapeRels is where relationship names are stored.
var ProductionGrapeRels = struct {
}{}

// productionGrapeR is where relationships are stored.
type productionGrapeR struct {
}

// NewStruct creates a new relationship struct
func (*productionGrapeR) NewStruct() *productionGrapeR {
	return &productionGrapeR{}
}

// productionGrapeL is where Load methods for each relationship are stored.
type productionGrapeL struct{}

var (
	productionGrapeAllColumns            = []string{"id", "id_production_reports", "id_production_products", "grape_sort", "grape_code", "grape_weight", "vineyard_number", "receipt_date", "grape_iddomain", "supplier_type", "supplier_client_reg_id", "supplier_inn", "supplier_kpp", "supplier_full_name", "supplier_short_name", "supplier_country_code", "supplier_region_code", "supplier_description"}
	productionGrapeColumnsWithoutDefault = []string{"id_production_reports", "id_production_products", "grape_sort", "grape_code", "grape_weight", "vineyard_number", "receipt_date", "grape_iddomain", "supplier_type", "supplier_client_reg_id", "supplier_inn", "supplier_kpp", "supplier_full_name", "supplier_short_name", "supplier_country_code", "supplier_region_code", "supplier_description"}
	productionGrapeColumnsWithDefault    = []string{"id"}
	productionGrapePrimaryKeyColumns     = []string{"id"}
	productionGrapeGeneratedColumns      = []string{"id"}
)

type (
	// ProductionGrapeSlice is an alias for a slice of pointers to ProductionGrape.
	// This should almost always be used instead of []ProductionGrape.
	ProductionGrapeSlice []*ProductionGrape
	// ProductionGrapeHook is the signature for custom ProductionGrape hook methods
	ProductionGrapeHook func(context.Context, boil.ContextExecutor, *ProductionGrape) error

	productionGrapeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionGrapeType                 = reflect.TypeOf(&ProductionGrape{})
	productionGrapeMapping              = queries.MakeStructMapping(productionGrapeType)
	productionGrapePrimaryKeyMapping, _ = queries.BindMapping(productionGrapeType, productionGrapeMapping, productionGrapePrimaryKeyColumns)
	productionGrapeInsertCacheMut       sync.RWMutex
	productionGrapeInsertCache          = make(map[string]insertCache)
	productionGrapeUpdateCacheMut       sync.RWMutex
	productionGrapeUpdateCache          = make(map[string]updateCache)
	productionGrapeUpsertCacheMut       sync.RWMutex
	productionGrapeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionGrapeAfterSelectMu sync.Mutex
var productionGrapeAfterSelectHooks []ProductionGrapeHook

var productionGrapeBeforeInsertMu sync.Mutex
var productionGrapeBeforeInsertHooks []ProductionGrapeHook
var productionGrapeAfterInsertMu sync.Mutex
var productionGrapeAfterInsertHooks []ProductionGrapeHook

var productionGrapeBeforeUpdateMu sync.Mutex
var productionGrapeBeforeUpdateHooks []ProductionGrapeHook
var productionGrapeAfterUpdateMu sync.Mutex
var productionGrapeAfterUpdateHooks []ProductionGrapeHook

var productionGrapeBeforeDeleteMu sync.Mutex
var productionGrapeBeforeDeleteHooks []ProductionGrapeHook
var productionGrapeAfterDeleteMu sync.Mutex
var productionGrapeAfterDeleteHooks []ProductionGrapeHook

var productionGrapeBeforeUpsertMu sync.Mutex
var productionGrapeBeforeUpsertHooks []ProductionGrapeHook
var productionGrapeAfterUpsertMu sync.Mutex
var productionGrapeAfterUpsertHooks []ProductionGrapeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionGrape) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionGrape) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionGrape) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionGrape) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionGrape) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionGrape) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionGrape) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionGrape) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionGrape) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionGrapeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionGrapeHook registers your hook function for all future operations.
func AddProductionGrapeHook(hookPoint boil.HookPoint, productionGrapeHook ProductionGrapeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionGrapeAfterSelectMu.Lock()
		productionGrapeAfterSelectHooks = append(productionGrapeAfterSelectHooks, productionGrapeHook)
		productionGrapeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionGrapeBeforeInsertMu.Lock()
		productionGrapeBeforeInsertHooks = append(productionGrapeBeforeInsertHooks, productionGrapeHook)
		productionGrapeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionGrapeAfterInsertMu.Lock()
		productionGrapeAfterInsertHooks = append(productionGrapeAfterInsertHooks, productionGrapeHook)
		productionGrapeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionGrapeBeforeUpdateMu.Lock()
		productionGrapeBeforeUpdateHooks = append(productionGrapeBeforeUpdateHooks, productionGrapeHook)
		productionGrapeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionGrapeAfterUpdateMu.Lock()
		productionGrapeAfterUpdateHooks = append(productionGrapeAfterUpdateHooks, productionGrapeHook)
		productionGrapeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionGrapeBeforeDeleteMu.Lock()
		productionGrapeBeforeDeleteHooks = append(productionGrapeBeforeDeleteHooks, productionGrapeHook)
		productionGrapeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionGrapeAfterDeleteMu.Lock()
		productionGrapeAfterDeleteHooks = append(productionGrapeAfterDeleteHooks, productionGrapeHook)
		productionGrapeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionGrapeBeforeUpsertMu.Lock()
		productionGrapeBeforeUpsertHooks = append(productionGrapeBeforeUpsertHooks, productionGrapeHook)
		productionGrapeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionGrapeAfterUpsertMu.Lock()
		productionGrapeAfterUpsertHooks = append(productionGrapeAfterUpsertHooks, productionGrapeHook)
		productionGrapeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionGrape record from the query using the global executor.
func (q productionGrapeQuery) OneG(ctx context.Context) (*ProductionGrape, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionGrape record from the query.
func (q productionGrapeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionGrape, error) {
	o := &ProductionGrape{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_grapes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionGrape records from the query using the global executor.
func (q productionGrapeQuery) AllG(ctx context.Context) (ProductionGrapeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionGrape records from the query.
func (q productionGrapeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionGrapeSlice, error) {
	var o []*ProductionGrape

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionGrape slice")
	}

	if len(productionGrapeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionGrape records in the query using the global executor
func (q productionGrapeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionGrape records in the query.
func (q productionGrapeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_grapes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionGrapeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionGrapeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_grapes exists")
	}

	return count > 0, nil
}

// ProductionGrapes retrieves all the records using an executor.
func ProductionGrapes(mods ...qm.QueryMod) productionGrapeQuery {
	mods = append(mods, qm.From("[dbo].[production_grapes]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[production_grapes].*"})
	}

	return productionGrapeQuery{q}
}

// FindProductionGrapeG retrieves a single record by ID.
func FindProductionGrapeG(ctx context.Context, iD int, selectCols ...string) (*ProductionGrape, error) {
	return FindProductionGrape(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionGrape retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionGrape(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProductionGrape, error) {
	productionGrapeObj := &ProductionGrape{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[production_grapes] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionGrapeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_grapes")
	}

	if err = productionGrapeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionGrapeObj, err
	}

	return productionGrapeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionGrape) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionGrape) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_grapes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionGrapeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionGrapeInsertCacheMut.RLock()
	cache, cached := productionGrapeInsertCache[key]
	productionGrapeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionGrapeAllColumns,
			productionGrapeColumnsWithDefault,
			productionGrapeColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionGrapeGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionGrapeType, productionGrapeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionGrapeType, productionGrapeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[production_grapes] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[production_grapes] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_grapes")
	}

	if !cached {
		productionGrapeInsertCacheMut.Lock()
		productionGrapeInsertCache[key] = cache
		productionGrapeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionGrape record using the global executor.
// See Update for more documentation.
func (o *ProductionGrape) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionGrape.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionGrape) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionGrapeUpdateCacheMut.RLock()
	cache, cached := productionGrapeUpdateCache[key]
	productionGrapeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionGrapeAllColumns,
			productionGrapePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionGrapeGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_grapes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[production_grapes] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, productionGrapePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionGrapeType, productionGrapeMapping, append(wl, productionGrapePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_grapes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_grapes")
	}

	if !cached {
		productionGrapeUpdateCacheMut.Lock()
		productionGrapeUpdateCache[key] = cache
		productionGrapeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionGrapeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionGrapeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_grapes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_grapes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionGrapeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionGrapeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionGrapePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[production_grapes] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productionGrapePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionGrape slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionGrape")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionGrape) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ProductionGrape) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_grapes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionGrapeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionGrapeUpsertCacheMut.RLock()
	cache, cached := productionGrapeUpsertCache[key]
	productionGrapeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productionGrapeAllColumns,
			productionGrapeColumnsWithDefault,
			productionGrapeColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, productionGrapeGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(productionGrapePrimaryKeyColumns, v) && strmangle.ContainsAny(productionGrapeColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert production_grapes, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			productionGrapeAllColumns,
			productionGrapePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productionGrapeGeneratedColumns)

		ret := strmangle.SetComplement(productionGrapeAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_grapes, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[production_grapes]", productionGrapePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(productionGrapePrimaryKeyColumns))
		copy(whitelist, productionGrapePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(productionGrapeType, productionGrapeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionGrapeType, productionGrapeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_grapes")
	}

	if !cached {
		productionGrapeUpsertCacheMut.Lock()
		productionGrapeUpsertCache[key] = cache
		productionGrapeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionGrape record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionGrape) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionGrape record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionGrape) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionGrape provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionGrapePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[production_grapes] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_grapes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_grapes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionGrapeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionGrapeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionGrapeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_grapes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_grapes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionGrapeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionGrapeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionGrapeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionGrapePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[production_grapes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productionGrapePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionGrape slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_grapes")
	}

	if len(productionGrapeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionGrape) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionGrape provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionGrape) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionGrape(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionGrapeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionGrapeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionGrapeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionGrapeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionGrapePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[production_grapes].* FROM [dbo].[production_grapes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productionGrapePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionGrapeSlice")
	}

	*o = slice

	return nil
}

// ProductionGrapeExistsG checks if the ProductionGrape row exists.
func ProductionGrapeExistsG(ctx context.Context, iD int) (bool, error) {
	return ProductionGrapeExists(ctx, boil.GetContextDB(), iD)
}

// ProductionGrapeExists checks if the ProductionGrape row exists.
func ProductionGrapeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[production_grapes] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_grapes exists")
	}

	return exists, nil
}

// Exists checks if the ProductionGrape row exists.
func (o *ProductionGrape) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionGrapeExists(ctx, exec, o.ID)
}
