// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ApEgais is an object representing the database table.
type ApEgais struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDRequests          null.Int    `boil:"id_requests" json:"id_requests,omitempty" toml:"id_requests" yaml:"id_requests,omitempty"`
	ProductFullName     null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity     null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume    null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode      null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode         null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType     null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProducerType        null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn         null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP         null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName    null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName   null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode  null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *apEgaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L apEgaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApEgaisColumns = struct {
	ID                  string
	IDRequests          string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "id",
	IDRequests:          "id_requests",
	ProductFullName:     "product_full_name",
	ProductCapacity:     "product_capacity",
	ProductAlcVolume:    "product_alc_volume",
	ProductAlcCode:      "product_alc_code",
	ProductCode:         "product_code",
	ProductUnitType:     "product_unit_type",
	ProducerType:        "producer_type",
	ProducerClientRegID: "producer_client_reg_id",
	ProducerInn:         "producer_inn",
	ProducerKPP:         "producer_kpp",
	ProducerFullName:    "producer_full_name",
	ProducerShortName:   "producer_short_name",
	ProducerCountryCode: "producer_country_code",
	ProducerRegionCode:  "producer_region_code",
	ProducerDescription: "producer_description",
}

var ApEgaisTableColumns = struct {
	ID                  string
	IDRequests          string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "ap_egais.id",
	IDRequests:          "ap_egais.id_requests",
	ProductFullName:     "ap_egais.product_full_name",
	ProductCapacity:     "ap_egais.product_capacity",
	ProductAlcVolume:    "ap_egais.product_alc_volume",
	ProductAlcCode:      "ap_egais.product_alc_code",
	ProductCode:         "ap_egais.product_code",
	ProductUnitType:     "ap_egais.product_unit_type",
	ProducerType:        "ap_egais.producer_type",
	ProducerClientRegID: "ap_egais.producer_client_reg_id",
	ProducerInn:         "ap_egais.producer_inn",
	ProducerKPP:         "ap_egais.producer_kpp",
	ProducerFullName:    "ap_egais.producer_full_name",
	ProducerShortName:   "ap_egais.producer_short_name",
	ProducerCountryCode: "ap_egais.producer_country_code",
	ProducerRegionCode:  "ap_egais.producer_region_code",
	ProducerDescription: "ap_egais.producer_description",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ApEgaisWhere = struct {
	ID                  whereHelperint
	IDRequests          whereHelpernull_Int
	ProductFullName     whereHelpernull_String
	ProductCapacity     whereHelpernull_String
	ProductAlcVolume    whereHelpernull_String
	ProductAlcCode      whereHelpernull_String
	ProductCode         whereHelpernull_String
	ProductUnitType     whereHelpernull_String
	ProducerType        whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	ProducerInn         whereHelpernull_String
	ProducerKPP         whereHelpernull_String
	ProducerFullName    whereHelpernull_String
	ProducerShortName   whereHelpernull_String
	ProducerCountryCode whereHelpernull_String
	ProducerRegionCode  whereHelpernull_String
	ProducerDescription whereHelpernull_String
}{
	ID:                  whereHelperint{field: "[dbo].[ap_egais].[id]"},
	IDRequests:          whereHelpernull_Int{field: "[dbo].[ap_egais].[id_requests]"},
	ProductFullName:     whereHelpernull_String{field: "[dbo].[ap_egais].[product_full_name]"},
	ProductCapacity:     whereHelpernull_String{field: "[dbo].[ap_egais].[product_capacity]"},
	ProductAlcVolume:    whereHelpernull_String{field: "[dbo].[ap_egais].[product_alc_volume]"},
	ProductAlcCode:      whereHelpernull_String{field: "[dbo].[ap_egais].[product_alc_code]"},
	ProductCode:         whereHelpernull_String{field: "[dbo].[ap_egais].[product_code]"},
	ProductUnitType:     whereHelpernull_String{field: "[dbo].[ap_egais].[product_unit_type]"},
	ProducerType:        whereHelpernull_String{field: "[dbo].[ap_egais].[producer_type]"},
	ProducerClientRegID: whereHelpernull_String{field: "[dbo].[ap_egais].[producer_client_reg_id]"},
	ProducerInn:         whereHelpernull_String{field: "[dbo].[ap_egais].[producer_inn]"},
	ProducerKPP:         whereHelpernull_String{field: "[dbo].[ap_egais].[producer_kpp]"},
	ProducerFullName:    whereHelpernull_String{field: "[dbo].[ap_egais].[producer_full_name]"},
	ProducerShortName:   whereHelpernull_String{field: "[dbo].[ap_egais].[producer_short_name]"},
	ProducerCountryCode: whereHelpernull_String{field: "[dbo].[ap_egais].[producer_country_code]"},
	ProducerRegionCode:  whereHelpernull_String{field: "[dbo].[ap_egais].[producer_region_code]"},
	ProducerDescription: whereHelpernull_String{field: "[dbo].[ap_egais].[producer_description]"},
}

// ApEgaisRels is where relationship names are stored.
var ApEgaisRels = struct {
}{}

// apEgaisR is where relationships are stored.
type apEgaisR struct {
}

// NewStruct creates a new relationship struct
func (*apEgaisR) NewStruct() *apEgaisR {
	return &apEgaisR{}
}

// apEgaisL is where Load methods for each relationship are stored.
type apEgaisL struct{}

var (
	apEgaisAllColumns            = []string{"id", "id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	apEgaisColumnsWithoutDefault = []string{"id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	apEgaisColumnsWithDefault    = []string{"id"}
	apEgaisPrimaryKeyColumns     = []string{"id"}
	apEgaisGeneratedColumns      = []string{"id"}
)

type (
	// ApEgaisSlice is an alias for a slice of pointers to ApEgais.
	// This should almost always be used instead of []ApEgais.
	ApEgaisSlice []*ApEgais
	// ApEgaisHook is the signature for custom ApEgais hook methods
	ApEgaisHook func(context.Context, boil.ContextExecutor, *ApEgais) error

	apEgaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	apEgaisType                 = reflect.TypeOf(&ApEgais{})
	apEgaisMapping              = queries.MakeStructMapping(apEgaisType)
	apEgaisPrimaryKeyMapping, _ = queries.BindMapping(apEgaisType, apEgaisMapping, apEgaisPrimaryKeyColumns)
	apEgaisInsertCacheMut       sync.RWMutex
	apEgaisInsertCache          = make(map[string]insertCache)
	apEgaisUpdateCacheMut       sync.RWMutex
	apEgaisUpdateCache          = make(map[string]updateCache)
	apEgaisUpsertCacheMut       sync.RWMutex
	apEgaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var apEgaisAfterSelectMu sync.Mutex
var apEgaisAfterSelectHooks []ApEgaisHook

var apEgaisBeforeInsertMu sync.Mutex
var apEgaisBeforeInsertHooks []ApEgaisHook
var apEgaisAfterInsertMu sync.Mutex
var apEgaisAfterInsertHooks []ApEgaisHook

var apEgaisBeforeUpdateMu sync.Mutex
var apEgaisBeforeUpdateHooks []ApEgaisHook
var apEgaisAfterUpdateMu sync.Mutex
var apEgaisAfterUpdateHooks []ApEgaisHook

var apEgaisBeforeDeleteMu sync.Mutex
var apEgaisBeforeDeleteHooks []ApEgaisHook
var apEgaisAfterDeleteMu sync.Mutex
var apEgaisAfterDeleteHooks []ApEgaisHook

var apEgaisBeforeUpsertMu sync.Mutex
var apEgaisBeforeUpsertHooks []ApEgaisHook
var apEgaisAfterUpsertMu sync.Mutex
var apEgaisAfterUpsertHooks []ApEgaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ApEgais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ApEgais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ApEgais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ApEgais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ApEgais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ApEgais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ApEgais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ApEgais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ApEgais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apEgaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddApEgaisHook registers your hook function for all future operations.
func AddApEgaisHook(hookPoint boil.HookPoint, apEgaisHook ApEgaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		apEgaisAfterSelectMu.Lock()
		apEgaisAfterSelectHooks = append(apEgaisAfterSelectHooks, apEgaisHook)
		apEgaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		apEgaisBeforeInsertMu.Lock()
		apEgaisBeforeInsertHooks = append(apEgaisBeforeInsertHooks, apEgaisHook)
		apEgaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		apEgaisAfterInsertMu.Lock()
		apEgaisAfterInsertHooks = append(apEgaisAfterInsertHooks, apEgaisHook)
		apEgaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		apEgaisBeforeUpdateMu.Lock()
		apEgaisBeforeUpdateHooks = append(apEgaisBeforeUpdateHooks, apEgaisHook)
		apEgaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		apEgaisAfterUpdateMu.Lock()
		apEgaisAfterUpdateHooks = append(apEgaisAfterUpdateHooks, apEgaisHook)
		apEgaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		apEgaisBeforeDeleteMu.Lock()
		apEgaisBeforeDeleteHooks = append(apEgaisBeforeDeleteHooks, apEgaisHook)
		apEgaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		apEgaisAfterDeleteMu.Lock()
		apEgaisAfterDeleteHooks = append(apEgaisAfterDeleteHooks, apEgaisHook)
		apEgaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		apEgaisBeforeUpsertMu.Lock()
		apEgaisBeforeUpsertHooks = append(apEgaisBeforeUpsertHooks, apEgaisHook)
		apEgaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		apEgaisAfterUpsertMu.Lock()
		apEgaisAfterUpsertHooks = append(apEgaisAfterUpsertHooks, apEgaisHook)
		apEgaisAfterUpsertMu.Unlock()
	}
}

// OneG returns a single apEgais record from the query using the global executor.
func (q apEgaisQuery) OneG(ctx context.Context) (*ApEgais, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single apEgais record from the query.
func (q apEgaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ApEgais, error) {
	o := &ApEgais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ap_egais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ApEgais records from the query using the global executor.
func (q apEgaisQuery) AllG(ctx context.Context) (ApEgaisSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ApEgais records from the query.
func (q apEgaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (ApEgaisSlice, error) {
	var o []*ApEgais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ApEgais slice")
	}

	if len(apEgaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ApEgais records in the query using the global executor
func (q apEgaisQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ApEgais records in the query.
func (q apEgaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ap_egais rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q apEgaisQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q apEgaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ap_egais exists")
	}

	return count > 0, nil
}

// ApEgaiss retrieves all the records using an executor.
func ApEgaiss(mods ...qm.QueryMod) apEgaisQuery {
	mods = append(mods, qm.From("[dbo].[ap_egais]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ap_egais].*"})
	}

	return apEgaisQuery{q}
}

// FindApEgaisG retrieves a single record by ID.
func FindApEgaisG(ctx context.Context, iD int, selectCols ...string) (*ApEgais, error) {
	return FindApEgais(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindApEgais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApEgais(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ApEgais, error) {
	apEgaisObj := &ApEgais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ap_egais] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, apEgaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ap_egais")
	}

	if err = apEgaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return apEgaisObj, err
	}

	return apEgaisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ApEgais) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ApEgais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ap_egais provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apEgaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	apEgaisInsertCacheMut.RLock()
	cache, cached := apEgaisInsertCache[key]
	apEgaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			apEgaisAllColumns,
			apEgaisColumnsWithDefault,
			apEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, apEgaisGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(apEgaisType, apEgaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(apEgaisType, apEgaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ap_egais] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ap_egais] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ap_egais")
	}

	if !cached {
		apEgaisInsertCacheMut.Lock()
		apEgaisInsertCache[key] = cache
		apEgaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ApEgais record using the global executor.
// See Update for more documentation.
func (o *ApEgais) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ApEgais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ApEgais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	apEgaisUpdateCacheMut.RLock()
	cache, cached := apEgaisUpdateCache[key]
	apEgaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			apEgaisAllColumns,
			apEgaisPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, apEgaisGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ap_egais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ap_egais] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, apEgaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(apEgaisType, apEgaisMapping, append(wl, apEgaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ap_egais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ap_egais")
	}

	if !cached {
		apEgaisUpdateCacheMut.Lock()
		apEgaisUpdateCache[key] = cache
		apEgaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q apEgaisQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q apEgaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ap_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ap_egais")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ApEgaisSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApEgaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ap_egais] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, apEgaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in apEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all apEgais")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ApEgais) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ApEgais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ap_egais provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apEgaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	apEgaisUpsertCacheMut.RLock()
	cache, cached := apEgaisUpsertCache[key]
	apEgaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			apEgaisAllColumns,
			apEgaisColumnsWithDefault,
			apEgaisColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, apEgaisGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(apEgaisPrimaryKeyColumns, v) && strmangle.ContainsAny(apEgaisColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ap_egais, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			apEgaisAllColumns,
			apEgaisPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, apEgaisGeneratedColumns)

		ret := strmangle.SetComplement(apEgaisAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ap_egais, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ap_egais]", apEgaisPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(apEgaisPrimaryKeyColumns))
		copy(whitelist, apEgaisPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(apEgaisType, apEgaisMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(apEgaisType, apEgaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ap_egais")
	}

	if !cached {
		apEgaisUpsertCacheMut.Lock()
		apEgaisUpsertCache[key] = cache
		apEgaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ApEgais record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ApEgais) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ApEgais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ApEgais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ApEgais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), apEgaisPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ap_egais] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ap_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ap_egais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q apEgaisQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q apEgaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no apEgaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ap_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ap_egais")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ApEgaisSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApEgaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(apEgaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ap_egais] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apEgaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from apEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ap_egais")
	}

	if len(apEgaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ApEgais) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ApEgais provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ApEgais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindApEgais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApEgaisSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ApEgaisSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApEgaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApEgaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ap_egais].* FROM [dbo].[ap_egais] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apEgaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ApEgaisSlice")
	}

	*o = slice

	return nil
}

// ApEgaisExistsG checks if the ApEgais row exists.
func ApEgaisExistsG(ctx context.Context, iD int) (bool, error) {
	return ApEgaisExists(ctx, boil.GetContextDB(), iD)
}

// ApEgaisExists checks if the ApEgais row exists.
func ApEgaisExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ap_egais] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ap_egais exists")
	}

	return exists, nil
}

// Exists checks if the ApEgais row exists.
func (o *ApEgais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ApEgaisExists(ctx, exec, o.ID)
}
