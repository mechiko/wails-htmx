// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PartnersEgais is an object representing the database table.
type PartnersEgais struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDRequests        null.Int    `boil:"id_requests" json:"id_requests,omitempty" toml:"id_requests" yaml:"id_requests,omitempty"`
	ClientType        null.String `boil:"client_type" json:"client_type,omitempty" toml:"client_type" yaml:"client_type,omitempty"`
	ClientRegID       null.String `boil:"client_reg_id" json:"client_reg_id,omitempty" toml:"client_reg_id" yaml:"client_reg_id,omitempty"`
	ClientInn         null.String `boil:"client_inn" json:"client_inn,omitempty" toml:"client_inn" yaml:"client_inn,omitempty"`
	ClientKPP         null.String `boil:"client_kpp" json:"client_kpp,omitempty" toml:"client_kpp" yaml:"client_kpp,omitempty"`
	ClientFullName    null.String `boil:"client_full_name" json:"client_full_name,omitempty" toml:"client_full_name" yaml:"client_full_name,omitempty"`
	ClientShortName   null.String `boil:"client_short_name" json:"client_short_name,omitempty" toml:"client_short_name" yaml:"client_short_name,omitempty"`
	ClientCountryCode null.String `boil:"client_country_code" json:"client_country_code,omitempty" toml:"client_country_code" yaml:"client_country_code,omitempty"`
	ClientRegionCode  null.String `boil:"client_region_code" json:"client_region_code,omitempty" toml:"client_region_code" yaml:"client_region_code,omitempty"`
	ClientDescription null.String `boil:"client_description" json:"client_description,omitempty" toml:"client_description" yaml:"client_description,omitempty"`
	ClientState       null.String `boil:"client_state" json:"client_state,omitempty" toml:"client_state" yaml:"client_state,omitempty"`
	ClientWBVersion   null.String `boil:"client_wb_version" json:"client_wb_version,omitempty" toml:"client_wb_version" yaml:"client_wb_version,omitempty"`
	ClientLicense     null.String `boil:"client_license" json:"client_license,omitempty" toml:"client_license" yaml:"client_license,omitempty"`

	R *partnersEgaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L partnersEgaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PartnersEgaisColumns = struct {
	ID                string
	IDRequests        string
	ClientType        string
	ClientRegID       string
	ClientInn         string
	ClientKPP         string
	ClientFullName    string
	ClientShortName   string
	ClientCountryCode string
	ClientRegionCode  string
	ClientDescription string
	ClientState       string
	ClientWBVersion   string
	ClientLicense     string
}{
	ID:                "id",
	IDRequests:        "id_requests",
	ClientType:        "client_type",
	ClientRegID:       "client_reg_id",
	ClientInn:         "client_inn",
	ClientKPP:         "client_kpp",
	ClientFullName:    "client_full_name",
	ClientShortName:   "client_short_name",
	ClientCountryCode: "client_country_code",
	ClientRegionCode:  "client_region_code",
	ClientDescription: "client_description",
	ClientState:       "client_state",
	ClientWBVersion:   "client_wb_version",
	ClientLicense:     "client_license",
}

var PartnersEgaisTableColumns = struct {
	ID                string
	IDRequests        string
	ClientType        string
	ClientRegID       string
	ClientInn         string
	ClientKPP         string
	ClientFullName    string
	ClientShortName   string
	ClientCountryCode string
	ClientRegionCode  string
	ClientDescription string
	ClientState       string
	ClientWBVersion   string
	ClientLicense     string
}{
	ID:                "partners_egais.id",
	IDRequests:        "partners_egais.id_requests",
	ClientType:        "partners_egais.client_type",
	ClientRegID:       "partners_egais.client_reg_id",
	ClientInn:         "partners_egais.client_inn",
	ClientKPP:         "partners_egais.client_kpp",
	ClientFullName:    "partners_egais.client_full_name",
	ClientShortName:   "partners_egais.client_short_name",
	ClientCountryCode: "partners_egais.client_country_code",
	ClientRegionCode:  "partners_egais.client_region_code",
	ClientDescription: "partners_egais.client_description",
	ClientState:       "partners_egais.client_state",
	ClientWBVersion:   "partners_egais.client_wb_version",
	ClientLicense:     "partners_egais.client_license",
}

// Generated where

var PartnersEgaisWhere = struct {
	ID                whereHelperint
	IDRequests        whereHelpernull_Int
	ClientType        whereHelpernull_String
	ClientRegID       whereHelpernull_String
	ClientInn         whereHelpernull_String
	ClientKPP         whereHelpernull_String
	ClientFullName    whereHelpernull_String
	ClientShortName   whereHelpernull_String
	ClientCountryCode whereHelpernull_String
	ClientRegionCode  whereHelpernull_String
	ClientDescription whereHelpernull_String
	ClientState       whereHelpernull_String
	ClientWBVersion   whereHelpernull_String
	ClientLicense     whereHelpernull_String
}{
	ID:                whereHelperint{field: "[dbo].[partners_egais].[id]"},
	IDRequests:        whereHelpernull_Int{field: "[dbo].[partners_egais].[id_requests]"},
	ClientType:        whereHelpernull_String{field: "[dbo].[partners_egais].[client_type]"},
	ClientRegID:       whereHelpernull_String{field: "[dbo].[partners_egais].[client_reg_id]"},
	ClientInn:         whereHelpernull_String{field: "[dbo].[partners_egais].[client_inn]"},
	ClientKPP:         whereHelpernull_String{field: "[dbo].[partners_egais].[client_kpp]"},
	ClientFullName:    whereHelpernull_String{field: "[dbo].[partners_egais].[client_full_name]"},
	ClientShortName:   whereHelpernull_String{field: "[dbo].[partners_egais].[client_short_name]"},
	ClientCountryCode: whereHelpernull_String{field: "[dbo].[partners_egais].[client_country_code]"},
	ClientRegionCode:  whereHelpernull_String{field: "[dbo].[partners_egais].[client_region_code]"},
	ClientDescription: whereHelpernull_String{field: "[dbo].[partners_egais].[client_description]"},
	ClientState:       whereHelpernull_String{field: "[dbo].[partners_egais].[client_state]"},
	ClientWBVersion:   whereHelpernull_String{field: "[dbo].[partners_egais].[client_wb_version]"},
	ClientLicense:     whereHelpernull_String{field: "[dbo].[partners_egais].[client_license]"},
}

// PartnersEgaisRels is where relationship names are stored.
var PartnersEgaisRels = struct {
}{}

// partnersEgaisR is where relationships are stored.
type partnersEgaisR struct {
}

// NewStruct creates a new relationship struct
func (*partnersEgaisR) NewStruct() *partnersEgaisR {
	return &partnersEgaisR{}
}

// partnersEgaisL is where Load methods for each relationship are stored.
type partnersEgaisL struct{}

var (
	partnersEgaisAllColumns            = []string{"id", "id_requests", "client_type", "client_reg_id", "client_inn", "client_kpp", "client_full_name", "client_short_name", "client_country_code", "client_region_code", "client_description", "client_state", "client_wb_version", "client_license"}
	partnersEgaisColumnsWithoutDefault = []string{"id_requests", "client_type", "client_reg_id", "client_inn", "client_kpp", "client_full_name", "client_short_name", "client_country_code", "client_region_code", "client_description", "client_state", "client_wb_version", "client_license"}
	partnersEgaisColumnsWithDefault    = []string{"id"}
	partnersEgaisPrimaryKeyColumns     = []string{"id"}
	partnersEgaisGeneratedColumns      = []string{"id"}
)

type (
	// PartnersEgaisSlice is an alias for a slice of pointers to PartnersEgais.
	// This should almost always be used instead of []PartnersEgais.
	PartnersEgaisSlice []*PartnersEgais
	// PartnersEgaisHook is the signature for custom PartnersEgais hook methods
	PartnersEgaisHook func(context.Context, boil.ContextExecutor, *PartnersEgais) error

	partnersEgaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	partnersEgaisType                 = reflect.TypeOf(&PartnersEgais{})
	partnersEgaisMapping              = queries.MakeStructMapping(partnersEgaisType)
	partnersEgaisPrimaryKeyMapping, _ = queries.BindMapping(partnersEgaisType, partnersEgaisMapping, partnersEgaisPrimaryKeyColumns)
	partnersEgaisInsertCacheMut       sync.RWMutex
	partnersEgaisInsertCache          = make(map[string]insertCache)
	partnersEgaisUpdateCacheMut       sync.RWMutex
	partnersEgaisUpdateCache          = make(map[string]updateCache)
	partnersEgaisUpsertCacheMut       sync.RWMutex
	partnersEgaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var partnersEgaisAfterSelectMu sync.Mutex
var partnersEgaisAfterSelectHooks []PartnersEgaisHook

var partnersEgaisBeforeInsertMu sync.Mutex
var partnersEgaisBeforeInsertHooks []PartnersEgaisHook
var partnersEgaisAfterInsertMu sync.Mutex
var partnersEgaisAfterInsertHooks []PartnersEgaisHook

var partnersEgaisBeforeUpdateMu sync.Mutex
var partnersEgaisBeforeUpdateHooks []PartnersEgaisHook
var partnersEgaisAfterUpdateMu sync.Mutex
var partnersEgaisAfterUpdateHooks []PartnersEgaisHook

var partnersEgaisBeforeDeleteMu sync.Mutex
var partnersEgaisBeforeDeleteHooks []PartnersEgaisHook
var partnersEgaisAfterDeleteMu sync.Mutex
var partnersEgaisAfterDeleteHooks []PartnersEgaisHook

var partnersEgaisBeforeUpsertMu sync.Mutex
var partnersEgaisBeforeUpsertHooks []PartnersEgaisHook
var partnersEgaisAfterUpsertMu sync.Mutex
var partnersEgaisAfterUpsertHooks []PartnersEgaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PartnersEgais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PartnersEgais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PartnersEgais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PartnersEgais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PartnersEgais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PartnersEgais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PartnersEgais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PartnersEgais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PartnersEgais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range partnersEgaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPartnersEgaisHook registers your hook function for all future operations.
func AddPartnersEgaisHook(hookPoint boil.HookPoint, partnersEgaisHook PartnersEgaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		partnersEgaisAfterSelectMu.Lock()
		partnersEgaisAfterSelectHooks = append(partnersEgaisAfterSelectHooks, partnersEgaisHook)
		partnersEgaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		partnersEgaisBeforeInsertMu.Lock()
		partnersEgaisBeforeInsertHooks = append(partnersEgaisBeforeInsertHooks, partnersEgaisHook)
		partnersEgaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		partnersEgaisAfterInsertMu.Lock()
		partnersEgaisAfterInsertHooks = append(partnersEgaisAfterInsertHooks, partnersEgaisHook)
		partnersEgaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		partnersEgaisBeforeUpdateMu.Lock()
		partnersEgaisBeforeUpdateHooks = append(partnersEgaisBeforeUpdateHooks, partnersEgaisHook)
		partnersEgaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		partnersEgaisAfterUpdateMu.Lock()
		partnersEgaisAfterUpdateHooks = append(partnersEgaisAfterUpdateHooks, partnersEgaisHook)
		partnersEgaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		partnersEgaisBeforeDeleteMu.Lock()
		partnersEgaisBeforeDeleteHooks = append(partnersEgaisBeforeDeleteHooks, partnersEgaisHook)
		partnersEgaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		partnersEgaisAfterDeleteMu.Lock()
		partnersEgaisAfterDeleteHooks = append(partnersEgaisAfterDeleteHooks, partnersEgaisHook)
		partnersEgaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		partnersEgaisBeforeUpsertMu.Lock()
		partnersEgaisBeforeUpsertHooks = append(partnersEgaisBeforeUpsertHooks, partnersEgaisHook)
		partnersEgaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		partnersEgaisAfterUpsertMu.Lock()
		partnersEgaisAfterUpsertHooks = append(partnersEgaisAfterUpsertHooks, partnersEgaisHook)
		partnersEgaisAfterUpsertMu.Unlock()
	}
}

// OneG returns a single partnersEgais record from the query using the global executor.
func (q partnersEgaisQuery) OneG(ctx context.Context) (*PartnersEgais, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single partnersEgais record from the query.
func (q partnersEgaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PartnersEgais, error) {
	o := &PartnersEgais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for partners_egais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PartnersEgais records from the query using the global executor.
func (q partnersEgaisQuery) AllG(ctx context.Context) (PartnersEgaisSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PartnersEgais records from the query.
func (q partnersEgaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (PartnersEgaisSlice, error) {
	var o []*PartnersEgais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to PartnersEgais slice")
	}

	if len(partnersEgaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PartnersEgais records in the query using the global executor
func (q partnersEgaisQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PartnersEgais records in the query.
func (q partnersEgaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count partners_egais rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q partnersEgaisQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q partnersEgaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if partners_egais exists")
	}

	return count > 0, nil
}

// PartnersEgaiss retrieves all the records using an executor.
func PartnersEgaiss(mods ...qm.QueryMod) partnersEgaisQuery {
	mods = append(mods, qm.From("[dbo].[partners_egais]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[partners_egais].*"})
	}

	return partnersEgaisQuery{q}
}

// FindPartnersEgaisG retrieves a single record by ID.
func FindPartnersEgaisG(ctx context.Context, iD int, selectCols ...string) (*PartnersEgais, error) {
	return FindPartnersEgais(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPartnersEgais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPartnersEgais(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PartnersEgais, error) {
	partnersEgaisObj := &PartnersEgais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[partners_egais] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, partnersEgaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from partners_egais")
	}

	if err = partnersEgaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return partnersEgaisObj, err
	}

	return partnersEgaisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PartnersEgais) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PartnersEgais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no partners_egais provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partnersEgaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	partnersEgaisInsertCacheMut.RLock()
	cache, cached := partnersEgaisInsertCache[key]
	partnersEgaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			partnersEgaisAllColumns,
			partnersEgaisColumnsWithDefault,
			partnersEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, partnersEgaisGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(partnersEgaisType, partnersEgaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(partnersEgaisType, partnersEgaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[partners_egais] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[partners_egais] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into partners_egais")
	}

	if !cached {
		partnersEgaisInsertCacheMut.Lock()
		partnersEgaisInsertCache[key] = cache
		partnersEgaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PartnersEgais record using the global executor.
// See Update for more documentation.
func (o *PartnersEgais) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PartnersEgais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PartnersEgais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	partnersEgaisUpdateCacheMut.RLock()
	cache, cached := partnersEgaisUpdateCache[key]
	partnersEgaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			partnersEgaisAllColumns,
			partnersEgaisPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, partnersEgaisGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update partners_egais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[partners_egais] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, partnersEgaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(partnersEgaisType, partnersEgaisMapping, append(wl, partnersEgaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update partners_egais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for partners_egais")
	}

	if !cached {
		partnersEgaisUpdateCacheMut.Lock()
		partnersEgaisUpdateCache[key] = cache
		partnersEgaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q partnersEgaisQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q partnersEgaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for partners_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for partners_egais")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PartnersEgaisSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PartnersEgaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partnersEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[partners_egais] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, partnersEgaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in partnersEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all partnersEgais")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PartnersEgais) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PartnersEgais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no partners_egais provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partnersEgaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	partnersEgaisUpsertCacheMut.RLock()
	cache, cached := partnersEgaisUpsertCache[key]
	partnersEgaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			partnersEgaisAllColumns,
			partnersEgaisColumnsWithDefault,
			partnersEgaisColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, partnersEgaisGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(partnersEgaisPrimaryKeyColumns, v) && strmangle.ContainsAny(partnersEgaisColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert partners_egais, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			partnersEgaisAllColumns,
			partnersEgaisPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, partnersEgaisGeneratedColumns)

		ret := strmangle.SetComplement(partnersEgaisAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert partners_egais, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[partners_egais]", partnersEgaisPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(partnersEgaisPrimaryKeyColumns))
		copy(whitelist, partnersEgaisPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(partnersEgaisType, partnersEgaisMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(partnersEgaisType, partnersEgaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert partners_egais")
	}

	if !cached {
		partnersEgaisUpsertCacheMut.Lock()
		partnersEgaisUpsertCache[key] = cache
		partnersEgaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PartnersEgais record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PartnersEgais) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PartnersEgais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PartnersEgais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no PartnersEgais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), partnersEgaisPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[partners_egais] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from partners_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for partners_egais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q partnersEgaisQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q partnersEgaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no partnersEgaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from partners_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for partners_egais")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PartnersEgaisSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PartnersEgaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(partnersEgaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partnersEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[partners_egais] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partnersEgaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from partnersEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for partners_egais")
	}

	if len(partnersEgaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PartnersEgais) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no PartnersEgais provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PartnersEgais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPartnersEgais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartnersEgaisSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty PartnersEgaisSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartnersEgaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PartnersEgaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partnersEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[partners_egais].* FROM [dbo].[partners_egais] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partnersEgaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in PartnersEgaisSlice")
	}

	*o = slice

	return nil
}

// PartnersEgaisExistsG checks if the PartnersEgais row exists.
func PartnersEgaisExistsG(ctx context.Context, iD int) (bool, error) {
	return PartnersEgaisExists(ctx, boil.GetContextDB(), iD)
}

// PartnersEgaisExists checks if the PartnersEgais row exists.
func PartnersEgaisExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[partners_egais] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if partners_egais exists")
	}

	return exists, nil
}

// Exists checks if the PartnersEgais row exists.
func (o *PartnersEgais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PartnersEgaisExists(ctx, exec, o.ID)
}
