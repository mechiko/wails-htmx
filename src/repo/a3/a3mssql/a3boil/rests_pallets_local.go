// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RestsPalletsLocal is an object representing the database table.
type RestsPalletsLocal struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PalletNumber  null.String `boil:"pallet_number" json:"pallet_number,omitempty" toml:"pallet_number" yaml:"pallet_number,omitempty"`
	InformF2RegID null.String `boil:"inform_f2_reg_id" json:"inform_f2_reg_id,omitempty" toml:"inform_f2_reg_id" yaml:"inform_f2_reg_id,omitempty"`
	Archive       null.Int    `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`

	R *restsPalletsLocalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restsPalletsLocalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestsPalletsLocalColumns = struct {
	ID            string
	PalletNumber  string
	InformF2RegID string
	Archive       string
}{
	ID:            "id",
	PalletNumber:  "pallet_number",
	InformF2RegID: "inform_f2_reg_id",
	Archive:       "archive",
}

var RestsPalletsLocalTableColumns = struct {
	ID            string
	PalletNumber  string
	InformF2RegID string
	Archive       string
}{
	ID:            "rests_pallets_local.id",
	PalletNumber:  "rests_pallets_local.pallet_number",
	InformF2RegID: "rests_pallets_local.inform_f2_reg_id",
	Archive:       "rests_pallets_local.archive",
}

// Generated where

var RestsPalletsLocalWhere = struct {
	ID            whereHelperint
	PalletNumber  whereHelpernull_String
	InformF2RegID whereHelpernull_String
	Archive       whereHelpernull_Int
}{
	ID:            whereHelperint{field: "[dbo].[rests_pallets_local].[id]"},
	PalletNumber:  whereHelpernull_String{field: "[dbo].[rests_pallets_local].[pallet_number]"},
	InformF2RegID: whereHelpernull_String{field: "[dbo].[rests_pallets_local].[inform_f2_reg_id]"},
	Archive:       whereHelpernull_Int{field: "[dbo].[rests_pallets_local].[archive]"},
}

// RestsPalletsLocalRels is where relationship names are stored.
var RestsPalletsLocalRels = struct {
}{}

// restsPalletsLocalR is where relationships are stored.
type restsPalletsLocalR struct {
}

// NewStruct creates a new relationship struct
func (*restsPalletsLocalR) NewStruct() *restsPalletsLocalR {
	return &restsPalletsLocalR{}
}

// restsPalletsLocalL is where Load methods for each relationship are stored.
type restsPalletsLocalL struct{}

var (
	restsPalletsLocalAllColumns            = []string{"id", "pallet_number", "inform_f2_reg_id", "archive"}
	restsPalletsLocalColumnsWithoutDefault = []string{"pallet_number", "inform_f2_reg_id", "archive"}
	restsPalletsLocalColumnsWithDefault    = []string{"id"}
	restsPalletsLocalPrimaryKeyColumns     = []string{"id"}
	restsPalletsLocalGeneratedColumns      = []string{"id"}
)

type (
	// RestsPalletsLocalSlice is an alias for a slice of pointers to RestsPalletsLocal.
	// This should almost always be used instead of []RestsPalletsLocal.
	RestsPalletsLocalSlice []*RestsPalletsLocal
	// RestsPalletsLocalHook is the signature for custom RestsPalletsLocal hook methods
	RestsPalletsLocalHook func(context.Context, boil.ContextExecutor, *RestsPalletsLocal) error

	restsPalletsLocalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restsPalletsLocalType                 = reflect.TypeOf(&RestsPalletsLocal{})
	restsPalletsLocalMapping              = queries.MakeStructMapping(restsPalletsLocalType)
	restsPalletsLocalPrimaryKeyMapping, _ = queries.BindMapping(restsPalletsLocalType, restsPalletsLocalMapping, restsPalletsLocalPrimaryKeyColumns)
	restsPalletsLocalInsertCacheMut       sync.RWMutex
	restsPalletsLocalInsertCache          = make(map[string]insertCache)
	restsPalletsLocalUpdateCacheMut       sync.RWMutex
	restsPalletsLocalUpdateCache          = make(map[string]updateCache)
	restsPalletsLocalUpsertCacheMut       sync.RWMutex
	restsPalletsLocalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restsPalletsLocalAfterSelectMu sync.Mutex
var restsPalletsLocalAfterSelectHooks []RestsPalletsLocalHook

var restsPalletsLocalBeforeInsertMu sync.Mutex
var restsPalletsLocalBeforeInsertHooks []RestsPalletsLocalHook
var restsPalletsLocalAfterInsertMu sync.Mutex
var restsPalletsLocalAfterInsertHooks []RestsPalletsLocalHook

var restsPalletsLocalBeforeUpdateMu sync.Mutex
var restsPalletsLocalBeforeUpdateHooks []RestsPalletsLocalHook
var restsPalletsLocalAfterUpdateMu sync.Mutex
var restsPalletsLocalAfterUpdateHooks []RestsPalletsLocalHook

var restsPalletsLocalBeforeDeleteMu sync.Mutex
var restsPalletsLocalBeforeDeleteHooks []RestsPalletsLocalHook
var restsPalletsLocalAfterDeleteMu sync.Mutex
var restsPalletsLocalAfterDeleteHooks []RestsPalletsLocalHook

var restsPalletsLocalBeforeUpsertMu sync.Mutex
var restsPalletsLocalBeforeUpsertHooks []RestsPalletsLocalHook
var restsPalletsLocalAfterUpsertMu sync.Mutex
var restsPalletsLocalAfterUpsertHooks []RestsPalletsLocalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RestsPalletsLocal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RestsPalletsLocal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RestsPalletsLocal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RestsPalletsLocal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RestsPalletsLocal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RestsPalletsLocal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RestsPalletsLocal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RestsPalletsLocal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RestsPalletsLocal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsPalletsLocalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestsPalletsLocalHook registers your hook function for all future operations.
func AddRestsPalletsLocalHook(hookPoint boil.HookPoint, restsPalletsLocalHook RestsPalletsLocalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		restsPalletsLocalAfterSelectMu.Lock()
		restsPalletsLocalAfterSelectHooks = append(restsPalletsLocalAfterSelectHooks, restsPalletsLocalHook)
		restsPalletsLocalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		restsPalletsLocalBeforeInsertMu.Lock()
		restsPalletsLocalBeforeInsertHooks = append(restsPalletsLocalBeforeInsertHooks, restsPalletsLocalHook)
		restsPalletsLocalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		restsPalletsLocalAfterInsertMu.Lock()
		restsPalletsLocalAfterInsertHooks = append(restsPalletsLocalAfterInsertHooks, restsPalletsLocalHook)
		restsPalletsLocalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		restsPalletsLocalBeforeUpdateMu.Lock()
		restsPalletsLocalBeforeUpdateHooks = append(restsPalletsLocalBeforeUpdateHooks, restsPalletsLocalHook)
		restsPalletsLocalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		restsPalletsLocalAfterUpdateMu.Lock()
		restsPalletsLocalAfterUpdateHooks = append(restsPalletsLocalAfterUpdateHooks, restsPalletsLocalHook)
		restsPalletsLocalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		restsPalletsLocalBeforeDeleteMu.Lock()
		restsPalletsLocalBeforeDeleteHooks = append(restsPalletsLocalBeforeDeleteHooks, restsPalletsLocalHook)
		restsPalletsLocalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		restsPalletsLocalAfterDeleteMu.Lock()
		restsPalletsLocalAfterDeleteHooks = append(restsPalletsLocalAfterDeleteHooks, restsPalletsLocalHook)
		restsPalletsLocalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		restsPalletsLocalBeforeUpsertMu.Lock()
		restsPalletsLocalBeforeUpsertHooks = append(restsPalletsLocalBeforeUpsertHooks, restsPalletsLocalHook)
		restsPalletsLocalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		restsPalletsLocalAfterUpsertMu.Lock()
		restsPalletsLocalAfterUpsertHooks = append(restsPalletsLocalAfterUpsertHooks, restsPalletsLocalHook)
		restsPalletsLocalAfterUpsertMu.Unlock()
	}
}

// OneG returns a single restsPalletsLocal record from the query using the global executor.
func (q restsPalletsLocalQuery) OneG(ctx context.Context) (*RestsPalletsLocal, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single restsPalletsLocal record from the query.
func (q restsPalletsLocalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RestsPalletsLocal, error) {
	o := &RestsPalletsLocal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for rests_pallets_local")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RestsPalletsLocal records from the query using the global executor.
func (q restsPalletsLocalQuery) AllG(ctx context.Context) (RestsPalletsLocalSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RestsPalletsLocal records from the query.
func (q restsPalletsLocalQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestsPalletsLocalSlice, error) {
	var o []*RestsPalletsLocal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to RestsPalletsLocal slice")
	}

	if len(restsPalletsLocalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RestsPalletsLocal records in the query using the global executor
func (q restsPalletsLocalQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RestsPalletsLocal records in the query.
func (q restsPalletsLocalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count rests_pallets_local rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q restsPalletsLocalQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q restsPalletsLocalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if rests_pallets_local exists")
	}

	return count > 0, nil
}

// RestsPalletsLocals retrieves all the records using an executor.
func RestsPalletsLocals(mods ...qm.QueryMod) restsPalletsLocalQuery {
	mods = append(mods, qm.From("[dbo].[rests_pallets_local]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[rests_pallets_local].*"})
	}

	return restsPalletsLocalQuery{q}
}

// FindRestsPalletsLocalG retrieves a single record by ID.
func FindRestsPalletsLocalG(ctx context.Context, iD int, selectCols ...string) (*RestsPalletsLocal, error) {
	return FindRestsPalletsLocal(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRestsPalletsLocal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestsPalletsLocal(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RestsPalletsLocal, error) {
	restsPalletsLocalObj := &RestsPalletsLocal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[rests_pallets_local] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restsPalletsLocalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from rests_pallets_local")
	}

	if err = restsPalletsLocalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restsPalletsLocalObj, err
	}

	return restsPalletsLocalObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RestsPalletsLocal) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RestsPalletsLocal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no rests_pallets_local provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restsPalletsLocalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restsPalletsLocalInsertCacheMut.RLock()
	cache, cached := restsPalletsLocalInsertCache[key]
	restsPalletsLocalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restsPalletsLocalAllColumns,
			restsPalletsLocalColumnsWithDefault,
			restsPalletsLocalColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, restsPalletsLocalGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(restsPalletsLocalType, restsPalletsLocalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restsPalletsLocalType, restsPalletsLocalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[rests_pallets_local] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[rests_pallets_local] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into rests_pallets_local")
	}

	if !cached {
		restsPalletsLocalInsertCacheMut.Lock()
		restsPalletsLocalInsertCache[key] = cache
		restsPalletsLocalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RestsPalletsLocal record using the global executor.
// See Update for more documentation.
func (o *RestsPalletsLocal) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RestsPalletsLocal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RestsPalletsLocal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restsPalletsLocalUpdateCacheMut.RLock()
	cache, cached := restsPalletsLocalUpdateCache[key]
	restsPalletsLocalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restsPalletsLocalAllColumns,
			restsPalletsLocalPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, restsPalletsLocalGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update rests_pallets_local, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[rests_pallets_local] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, restsPalletsLocalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restsPalletsLocalType, restsPalletsLocalMapping, append(wl, restsPalletsLocalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update rests_pallets_local row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for rests_pallets_local")
	}

	if !cached {
		restsPalletsLocalUpdateCacheMut.Lock()
		restsPalletsLocalUpdateCache[key] = cache
		restsPalletsLocalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q restsPalletsLocalQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q restsPalletsLocalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for rests_pallets_local")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for rests_pallets_local")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RestsPalletsLocalSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestsPalletsLocalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsPalletsLocalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[rests_pallets_local] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, restsPalletsLocalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in restsPalletsLocal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all restsPalletsLocal")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RestsPalletsLocal) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *RestsPalletsLocal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no rests_pallets_local provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restsPalletsLocalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restsPalletsLocalUpsertCacheMut.RLock()
	cache, cached := restsPalletsLocalUpsertCache[key]
	restsPalletsLocalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			restsPalletsLocalAllColumns,
			restsPalletsLocalColumnsWithDefault,
			restsPalletsLocalColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, restsPalletsLocalGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(restsPalletsLocalPrimaryKeyColumns, v) && strmangle.ContainsAny(restsPalletsLocalColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert rests_pallets_local, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			restsPalletsLocalAllColumns,
			restsPalletsLocalPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, restsPalletsLocalGeneratedColumns)

		ret := strmangle.SetComplement(restsPalletsLocalAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert rests_pallets_local, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[rests_pallets_local]", restsPalletsLocalPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(restsPalletsLocalPrimaryKeyColumns))
		copy(whitelist, restsPalletsLocalPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(restsPalletsLocalType, restsPalletsLocalMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restsPalletsLocalType, restsPalletsLocalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert rests_pallets_local")
	}

	if !cached {
		restsPalletsLocalUpsertCacheMut.Lock()
		restsPalletsLocalUpsertCache[key] = cache
		restsPalletsLocalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RestsPalletsLocal record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RestsPalletsLocal) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RestsPalletsLocal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RestsPalletsLocal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no RestsPalletsLocal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restsPalletsLocalPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[rests_pallets_local] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from rests_pallets_local")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for rests_pallets_local")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q restsPalletsLocalQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q restsPalletsLocalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no restsPalletsLocalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from rests_pallets_local")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for rests_pallets_local")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RestsPalletsLocalSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestsPalletsLocalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restsPalletsLocalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsPalletsLocalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[rests_pallets_local] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restsPalletsLocalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from restsPalletsLocal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for rests_pallets_local")
	}

	if len(restsPalletsLocalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RestsPalletsLocal) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no RestsPalletsLocal provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RestsPalletsLocal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestsPalletsLocal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestsPalletsLocalSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty RestsPalletsLocalSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestsPalletsLocalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestsPalletsLocalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsPalletsLocalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[rests_pallets_local].* FROM [dbo].[rests_pallets_local] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restsPalletsLocalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in RestsPalletsLocalSlice")
	}

	*o = slice

	return nil
}

// RestsPalletsLocalExistsG checks if the RestsPalletsLocal row exists.
func RestsPalletsLocalExistsG(ctx context.Context, iD int) (bool, error) {
	return RestsPalletsLocalExists(ctx, boil.GetContextDB(), iD)
}

// RestsPalletsLocalExists checks if the RestsPalletsLocal row exists.
func RestsPalletsLocalExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[rests_pallets_local] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if rests_pallets_local exists")
	}

	return exists, nil
}

// Exists checks if the RestsPalletsLocal row exists.
func (o *RestsPalletsLocal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RestsPalletsLocalExists(ctx, exec, o.ID)
}
