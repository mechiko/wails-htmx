// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SpEgais is an object representing the database table.
type SpEgais struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDRequests       null.Int    `boil:"id_requests" json:"id_requests,omitempty" toml:"id_requests" yaml:"id_requests,omitempty"`
	ProductFullName  null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity  null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode   null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode      null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType  null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`

	R *spEgaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L spEgaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpEgaisColumns = struct {
	ID               string
	IDRequests       string
	ProductFullName  string
	ProductCapacity  string
	ProductAlcVolume string
	ProductAlcCode   string
	ProductCode      string
	ProductUnitType  string
}{
	ID:               "id",
	IDRequests:       "id_requests",
	ProductFullName:  "product_full_name",
	ProductCapacity:  "product_capacity",
	ProductAlcVolume: "product_alc_volume",
	ProductAlcCode:   "product_alc_code",
	ProductCode:      "product_code",
	ProductUnitType:  "product_unit_type",
}

var SpEgaisTableColumns = struct {
	ID               string
	IDRequests       string
	ProductFullName  string
	ProductCapacity  string
	ProductAlcVolume string
	ProductAlcCode   string
	ProductCode      string
	ProductUnitType  string
}{
	ID:               "sp_egais.id",
	IDRequests:       "sp_egais.id_requests",
	ProductFullName:  "sp_egais.product_full_name",
	ProductCapacity:  "sp_egais.product_capacity",
	ProductAlcVolume: "sp_egais.product_alc_volume",
	ProductAlcCode:   "sp_egais.product_alc_code",
	ProductCode:      "sp_egais.product_code",
	ProductUnitType:  "sp_egais.product_unit_type",
}

// Generated where

var SpEgaisWhere = struct {
	ID               whereHelperint
	IDRequests       whereHelpernull_Int
	ProductFullName  whereHelpernull_String
	ProductCapacity  whereHelpernull_String
	ProductAlcVolume whereHelpernull_String
	ProductAlcCode   whereHelpernull_String
	ProductCode      whereHelpernull_String
	ProductUnitType  whereHelpernull_String
}{
	ID:               whereHelperint{field: "[dbo].[sp_egais].[id]"},
	IDRequests:       whereHelpernull_Int{field: "[dbo].[sp_egais].[id_requests]"},
	ProductFullName:  whereHelpernull_String{field: "[dbo].[sp_egais].[product_full_name]"},
	ProductCapacity:  whereHelpernull_String{field: "[dbo].[sp_egais].[product_capacity]"},
	ProductAlcVolume: whereHelpernull_String{field: "[dbo].[sp_egais].[product_alc_volume]"},
	ProductAlcCode:   whereHelpernull_String{field: "[dbo].[sp_egais].[product_alc_code]"},
	ProductCode:      whereHelpernull_String{field: "[dbo].[sp_egais].[product_code]"},
	ProductUnitType:  whereHelpernull_String{field: "[dbo].[sp_egais].[product_unit_type]"},
}

// SpEgaisRels is where relationship names are stored.
var SpEgaisRels = struct {
}{}

// spEgaisR is where relationships are stored.
type spEgaisR struct {
}

// NewStruct creates a new relationship struct
func (*spEgaisR) NewStruct() *spEgaisR {
	return &spEgaisR{}
}

// spEgaisL is where Load methods for each relationship are stored.
type spEgaisL struct{}

var (
	spEgaisAllColumns            = []string{"id", "id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type"}
	spEgaisColumnsWithoutDefault = []string{"id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type"}
	spEgaisColumnsWithDefault    = []string{"id"}
	spEgaisPrimaryKeyColumns     = []string{"id"}
	spEgaisGeneratedColumns      = []string{"id"}
)

type (
	// SpEgaisSlice is an alias for a slice of pointers to SpEgais.
	// This should almost always be used instead of []SpEgais.
	SpEgaisSlice []*SpEgais
	// SpEgaisHook is the signature for custom SpEgais hook methods
	SpEgaisHook func(context.Context, boil.ContextExecutor, *SpEgais) error

	spEgaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	spEgaisType                 = reflect.TypeOf(&SpEgais{})
	spEgaisMapping              = queries.MakeStructMapping(spEgaisType)
	spEgaisPrimaryKeyMapping, _ = queries.BindMapping(spEgaisType, spEgaisMapping, spEgaisPrimaryKeyColumns)
	spEgaisInsertCacheMut       sync.RWMutex
	spEgaisInsertCache          = make(map[string]insertCache)
	spEgaisUpdateCacheMut       sync.RWMutex
	spEgaisUpdateCache          = make(map[string]updateCache)
	spEgaisUpsertCacheMut       sync.RWMutex
	spEgaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var spEgaisAfterSelectMu sync.Mutex
var spEgaisAfterSelectHooks []SpEgaisHook

var spEgaisBeforeInsertMu sync.Mutex
var spEgaisBeforeInsertHooks []SpEgaisHook
var spEgaisAfterInsertMu sync.Mutex
var spEgaisAfterInsertHooks []SpEgaisHook

var spEgaisBeforeUpdateMu sync.Mutex
var spEgaisBeforeUpdateHooks []SpEgaisHook
var spEgaisAfterUpdateMu sync.Mutex
var spEgaisAfterUpdateHooks []SpEgaisHook

var spEgaisBeforeDeleteMu sync.Mutex
var spEgaisBeforeDeleteHooks []SpEgaisHook
var spEgaisAfterDeleteMu sync.Mutex
var spEgaisAfterDeleteHooks []SpEgaisHook

var spEgaisBeforeUpsertMu sync.Mutex
var spEgaisBeforeUpsertHooks []SpEgaisHook
var spEgaisAfterUpsertMu sync.Mutex
var spEgaisAfterUpsertHooks []SpEgaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SpEgais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SpEgais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SpEgais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SpEgais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SpEgais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SpEgais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SpEgais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SpEgais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SpEgais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range spEgaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpEgaisHook registers your hook function for all future operations.
func AddSpEgaisHook(hookPoint boil.HookPoint, spEgaisHook SpEgaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		spEgaisAfterSelectMu.Lock()
		spEgaisAfterSelectHooks = append(spEgaisAfterSelectHooks, spEgaisHook)
		spEgaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		spEgaisBeforeInsertMu.Lock()
		spEgaisBeforeInsertHooks = append(spEgaisBeforeInsertHooks, spEgaisHook)
		spEgaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		spEgaisAfterInsertMu.Lock()
		spEgaisAfterInsertHooks = append(spEgaisAfterInsertHooks, spEgaisHook)
		spEgaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		spEgaisBeforeUpdateMu.Lock()
		spEgaisBeforeUpdateHooks = append(spEgaisBeforeUpdateHooks, spEgaisHook)
		spEgaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		spEgaisAfterUpdateMu.Lock()
		spEgaisAfterUpdateHooks = append(spEgaisAfterUpdateHooks, spEgaisHook)
		spEgaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		spEgaisBeforeDeleteMu.Lock()
		spEgaisBeforeDeleteHooks = append(spEgaisBeforeDeleteHooks, spEgaisHook)
		spEgaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		spEgaisAfterDeleteMu.Lock()
		spEgaisAfterDeleteHooks = append(spEgaisAfterDeleteHooks, spEgaisHook)
		spEgaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		spEgaisBeforeUpsertMu.Lock()
		spEgaisBeforeUpsertHooks = append(spEgaisBeforeUpsertHooks, spEgaisHook)
		spEgaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		spEgaisAfterUpsertMu.Lock()
		spEgaisAfterUpsertHooks = append(spEgaisAfterUpsertHooks, spEgaisHook)
		spEgaisAfterUpsertMu.Unlock()
	}
}

// OneG returns a single spEgais record from the query using the global executor.
func (q spEgaisQuery) OneG(ctx context.Context) (*SpEgais, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single spEgais record from the query.
func (q spEgaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpEgais, error) {
	o := &SpEgais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for sp_egais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SpEgais records from the query using the global executor.
func (q spEgaisQuery) AllG(ctx context.Context) (SpEgaisSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SpEgais records from the query.
func (q spEgaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpEgaisSlice, error) {
	var o []*SpEgais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to SpEgais slice")
	}

	if len(spEgaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SpEgais records in the query using the global executor
func (q spEgaisQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SpEgais records in the query.
func (q spEgaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count sp_egais rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q spEgaisQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q spEgaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if sp_egais exists")
	}

	return count > 0, nil
}

// SpEgaiss retrieves all the records using an executor.
func SpEgaiss(mods ...qm.QueryMod) spEgaisQuery {
	mods = append(mods, qm.From("[dbo].[sp_egais]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[sp_egais].*"})
	}

	return spEgaisQuery{q}
}

// FindSpEgaisG retrieves a single record by ID.
func FindSpEgaisG(ctx context.Context, iD int, selectCols ...string) (*SpEgais, error) {
	return FindSpEgais(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSpEgais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpEgais(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpEgais, error) {
	spEgaisObj := &SpEgais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[sp_egais] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, spEgaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from sp_egais")
	}

	if err = spEgaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return spEgaisObj, err
	}

	return spEgaisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SpEgais) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SpEgais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no sp_egais provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spEgaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	spEgaisInsertCacheMut.RLock()
	cache, cached := spEgaisInsertCache[key]
	spEgaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			spEgaisAllColumns,
			spEgaisColumnsWithDefault,
			spEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, spEgaisGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(spEgaisType, spEgaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(spEgaisType, spEgaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[sp_egais] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[sp_egais] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into sp_egais")
	}

	if !cached {
		spEgaisInsertCacheMut.Lock()
		spEgaisInsertCache[key] = cache
		spEgaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SpEgais record using the global executor.
// See Update for more documentation.
func (o *SpEgais) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SpEgais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SpEgais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	spEgaisUpdateCacheMut.RLock()
	cache, cached := spEgaisUpdateCache[key]
	spEgaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			spEgaisAllColumns,
			spEgaisPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, spEgaisGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update sp_egais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[sp_egais] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, spEgaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(spEgaisType, spEgaisMapping, append(wl, spEgaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update sp_egais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for sp_egais")
	}

	if !cached {
		spEgaisUpdateCacheMut.Lock()
		spEgaisUpdateCache[key] = cache
		spEgaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q spEgaisQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q spEgaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for sp_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for sp_egais")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SpEgaisSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpEgaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[sp_egais] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, spEgaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in spEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all spEgais")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SpEgais) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SpEgais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no sp_egais provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spEgaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	spEgaisUpsertCacheMut.RLock()
	cache, cached := spEgaisUpsertCache[key]
	spEgaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			spEgaisAllColumns,
			spEgaisColumnsWithDefault,
			spEgaisColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, spEgaisGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(spEgaisPrimaryKeyColumns, v) && strmangle.ContainsAny(spEgaisColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert sp_egais, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			spEgaisAllColumns,
			spEgaisPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, spEgaisGeneratedColumns)

		ret := strmangle.SetComplement(spEgaisAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert sp_egais, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[sp_egais]", spEgaisPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(spEgaisPrimaryKeyColumns))
		copy(whitelist, spEgaisPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(spEgaisType, spEgaisMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(spEgaisType, spEgaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert sp_egais")
	}

	if !cached {
		spEgaisUpsertCacheMut.Lock()
		spEgaisUpsertCache[key] = cache
		spEgaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SpEgais record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SpEgais) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SpEgais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SpEgais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no SpEgais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), spEgaisPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[sp_egais] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from sp_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for sp_egais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q spEgaisQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q spEgaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no spEgaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from sp_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for sp_egais")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SpEgaisSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpEgaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(spEgaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[sp_egais] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, spEgaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from spEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for sp_egais")
	}

	if len(spEgaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SpEgais) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no SpEgais provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SpEgais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpEgais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpEgaisSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty SpEgaisSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpEgaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpEgaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[sp_egais].* FROM [dbo].[sp_egais] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, spEgaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in SpEgaisSlice")
	}

	*o = slice

	return nil
}

// SpEgaisExistsG checks if the SpEgais row exists.
func SpEgaisExistsG(ctx context.Context, iD int) (bool, error) {
	return SpEgaisExists(ctx, boil.GetContextDB(), iD)
}

// SpEgaisExists checks if the SpEgais row exists.
func SpEgaisExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[sp_egais] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if sp_egais exists")
	}

	return exists, nil
}

// Exists checks if the SpEgais row exists.
func (o *SpEgais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SpEgaisExists(ctx, exec, o.ID)
}
