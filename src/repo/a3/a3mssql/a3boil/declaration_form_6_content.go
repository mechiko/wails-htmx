// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeclarationForm6Content is an object representing the database table.
type DeclarationForm6Content struct {
	ID                          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDDeclarationForm6Companies null.Int    `boil:"id_declaration_form_6_companies" json:"id_declaration_form_6_companies,omitempty" toml:"id_declaration_form_6_companies" yaml:"id_declaration_form_6_companies,omitempty"`
	ActivityCode                null.String `boil:"activity_code" json:"activity_code,omitempty" toml:"activity_code" yaml:"activity_code,omitempty"`
	ActivityName                null.String `boil:"activity_name" json:"activity_name,omitempty" toml:"activity_name" yaml:"activity_name,omitempty"`
	ProductCode                 null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductCodeName             null.String `boil:"product_code_name" json:"product_code_name,omitempty" toml:"product_code_name" yaml:"product_code_name,omitempty"`
	PowerYear                   null.String `boil:"power_year" json:"power_year,omitempty" toml:"power_year" yaml:"power_year,omitempty"`
	PowerFirstQuarter           null.String `boil:"power_first_quarter" json:"power_first_quarter,omitempty" toml:"power_first_quarter" yaml:"power_first_quarter,omitempty"`
	PowerSecondQuarter          null.String `boil:"power_second_quarter" json:"power_second_quarter,omitempty" toml:"power_second_quarter" yaml:"power_second_quarter,omitempty"`
	PowerThirdQuarter           null.String `boil:"power_third_quarter" json:"power_third_quarter,omitempty" toml:"power_third_quarter" yaml:"power_third_quarter,omitempty"`
	PowerFourthQuarter          null.String `boil:"power_fourth_quarter" json:"power_fourth_quarter,omitempty" toml:"power_fourth_quarter" yaml:"power_fourth_quarter,omitempty"`
	Production                  null.String `boil:"production" json:"production,omitempty" toml:"production" yaml:"production,omitempty"`
	Utilization                 null.String `boil:"utilization" json:"utilization,omitempty" toml:"utilization" yaml:"utilization,omitempty"`

	R *declarationForm6ContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L declarationForm6ContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeclarationForm6ContentColumns = struct {
	ID                          string
	IDDeclarationForm6Companies string
	ActivityCode                string
	ActivityName                string
	ProductCode                 string
	ProductCodeName             string
	PowerYear                   string
	PowerFirstQuarter           string
	PowerSecondQuarter          string
	PowerThirdQuarter           string
	PowerFourthQuarter          string
	Production                  string
	Utilization                 string
}{
	ID:                          "id",
	IDDeclarationForm6Companies: "id_declaration_form_6_companies",
	ActivityCode:                "activity_code",
	ActivityName:                "activity_name",
	ProductCode:                 "product_code",
	ProductCodeName:             "product_code_name",
	PowerYear:                   "power_year",
	PowerFirstQuarter:           "power_first_quarter",
	PowerSecondQuarter:          "power_second_quarter",
	PowerThirdQuarter:           "power_third_quarter",
	PowerFourthQuarter:          "power_fourth_quarter",
	Production:                  "production",
	Utilization:                 "utilization",
}

var DeclarationForm6ContentTableColumns = struct {
	ID                          string
	IDDeclarationForm6Companies string
	ActivityCode                string
	ActivityName                string
	ProductCode                 string
	ProductCodeName             string
	PowerYear                   string
	PowerFirstQuarter           string
	PowerSecondQuarter          string
	PowerThirdQuarter           string
	PowerFourthQuarter          string
	Production                  string
	Utilization                 string
}{
	ID:                          "declaration_form_6_content.id",
	IDDeclarationForm6Companies: "declaration_form_6_content.id_declaration_form_6_companies",
	ActivityCode:                "declaration_form_6_content.activity_code",
	ActivityName:                "declaration_form_6_content.activity_name",
	ProductCode:                 "declaration_form_6_content.product_code",
	ProductCodeName:             "declaration_form_6_content.product_code_name",
	PowerYear:                   "declaration_form_6_content.power_year",
	PowerFirstQuarter:           "declaration_form_6_content.power_first_quarter",
	PowerSecondQuarter:          "declaration_form_6_content.power_second_quarter",
	PowerThirdQuarter:           "declaration_form_6_content.power_third_quarter",
	PowerFourthQuarter:          "declaration_form_6_content.power_fourth_quarter",
	Production:                  "declaration_form_6_content.production",
	Utilization:                 "declaration_form_6_content.utilization",
}

// Generated where

var DeclarationForm6ContentWhere = struct {
	ID                          whereHelperint
	IDDeclarationForm6Companies whereHelpernull_Int
	ActivityCode                whereHelpernull_String
	ActivityName                whereHelpernull_String
	ProductCode                 whereHelpernull_String
	ProductCodeName             whereHelpernull_String
	PowerYear                   whereHelpernull_String
	PowerFirstQuarter           whereHelpernull_String
	PowerSecondQuarter          whereHelpernull_String
	PowerThirdQuarter           whereHelpernull_String
	PowerFourthQuarter          whereHelpernull_String
	Production                  whereHelpernull_String
	Utilization                 whereHelpernull_String
}{
	ID:                          whereHelperint{field: "[dbo].[declaration_form_6_content].[id]"},
	IDDeclarationForm6Companies: whereHelpernull_Int{field: "[dbo].[declaration_form_6_content].[id_declaration_form_6_companies]"},
	ActivityCode:                whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[activity_code]"},
	ActivityName:                whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[activity_name]"},
	ProductCode:                 whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[product_code]"},
	ProductCodeName:             whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[product_code_name]"},
	PowerYear:                   whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[power_year]"},
	PowerFirstQuarter:           whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[power_first_quarter]"},
	PowerSecondQuarter:          whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[power_second_quarter]"},
	PowerThirdQuarter:           whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[power_third_quarter]"},
	PowerFourthQuarter:          whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[power_fourth_quarter]"},
	Production:                  whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[production]"},
	Utilization:                 whereHelpernull_String{field: "[dbo].[declaration_form_6_content].[utilization]"},
}

// DeclarationForm6ContentRels is where relationship names are stored.
var DeclarationForm6ContentRels = struct {
}{}

// declarationForm6ContentR is where relationships are stored.
type declarationForm6ContentR struct {
}

// NewStruct creates a new relationship struct
func (*declarationForm6ContentR) NewStruct() *declarationForm6ContentR {
	return &declarationForm6ContentR{}
}

// declarationForm6ContentL is where Load methods for each relationship are stored.
type declarationForm6ContentL struct{}

var (
	declarationForm6ContentAllColumns            = []string{"id", "id_declaration_form_6_companies", "activity_code", "activity_name", "product_code", "product_code_name", "power_year", "power_first_quarter", "power_second_quarter", "power_third_quarter", "power_fourth_quarter", "production", "utilization"}
	declarationForm6ContentColumnsWithoutDefault = []string{"id_declaration_form_6_companies", "activity_code", "activity_name", "product_code", "product_code_name", "power_year", "power_first_quarter", "power_second_quarter", "power_third_quarter", "power_fourth_quarter", "production", "utilization"}
	declarationForm6ContentColumnsWithDefault    = []string{"id"}
	declarationForm6ContentPrimaryKeyColumns     = []string{"id"}
	declarationForm6ContentGeneratedColumns      = []string{"id"}
)

type (
	// DeclarationForm6ContentSlice is an alias for a slice of pointers to DeclarationForm6Content.
	// This should almost always be used instead of []DeclarationForm6Content.
	DeclarationForm6ContentSlice []*DeclarationForm6Content
	// DeclarationForm6ContentHook is the signature for custom DeclarationForm6Content hook methods
	DeclarationForm6ContentHook func(context.Context, boil.ContextExecutor, *DeclarationForm6Content) error

	declarationForm6ContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	declarationForm6ContentType                 = reflect.TypeOf(&DeclarationForm6Content{})
	declarationForm6ContentMapping              = queries.MakeStructMapping(declarationForm6ContentType)
	declarationForm6ContentPrimaryKeyMapping, _ = queries.BindMapping(declarationForm6ContentType, declarationForm6ContentMapping, declarationForm6ContentPrimaryKeyColumns)
	declarationForm6ContentInsertCacheMut       sync.RWMutex
	declarationForm6ContentInsertCache          = make(map[string]insertCache)
	declarationForm6ContentUpdateCacheMut       sync.RWMutex
	declarationForm6ContentUpdateCache          = make(map[string]updateCache)
	declarationForm6ContentUpsertCacheMut       sync.RWMutex
	declarationForm6ContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var declarationForm6ContentAfterSelectMu sync.Mutex
var declarationForm6ContentAfterSelectHooks []DeclarationForm6ContentHook

var declarationForm6ContentBeforeInsertMu sync.Mutex
var declarationForm6ContentBeforeInsertHooks []DeclarationForm6ContentHook
var declarationForm6ContentAfterInsertMu sync.Mutex
var declarationForm6ContentAfterInsertHooks []DeclarationForm6ContentHook

var declarationForm6ContentBeforeUpdateMu sync.Mutex
var declarationForm6ContentBeforeUpdateHooks []DeclarationForm6ContentHook
var declarationForm6ContentAfterUpdateMu sync.Mutex
var declarationForm6ContentAfterUpdateHooks []DeclarationForm6ContentHook

var declarationForm6ContentBeforeDeleteMu sync.Mutex
var declarationForm6ContentBeforeDeleteHooks []DeclarationForm6ContentHook
var declarationForm6ContentAfterDeleteMu sync.Mutex
var declarationForm6ContentAfterDeleteHooks []DeclarationForm6ContentHook

var declarationForm6ContentBeforeUpsertMu sync.Mutex
var declarationForm6ContentBeforeUpsertHooks []DeclarationForm6ContentHook
var declarationForm6ContentAfterUpsertMu sync.Mutex
var declarationForm6ContentAfterUpsertHooks []DeclarationForm6ContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeclarationForm6Content) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeclarationForm6Content) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeclarationForm6Content) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeclarationForm6Content) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeclarationForm6Content) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeclarationForm6Content) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeclarationForm6Content) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeclarationForm6Content) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeclarationForm6Content) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6ContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeclarationForm6ContentHook registers your hook function for all future operations.
func AddDeclarationForm6ContentHook(hookPoint boil.HookPoint, declarationForm6ContentHook DeclarationForm6ContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		declarationForm6ContentAfterSelectMu.Lock()
		declarationForm6ContentAfterSelectHooks = append(declarationForm6ContentAfterSelectHooks, declarationForm6ContentHook)
		declarationForm6ContentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		declarationForm6ContentBeforeInsertMu.Lock()
		declarationForm6ContentBeforeInsertHooks = append(declarationForm6ContentBeforeInsertHooks, declarationForm6ContentHook)
		declarationForm6ContentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		declarationForm6ContentAfterInsertMu.Lock()
		declarationForm6ContentAfterInsertHooks = append(declarationForm6ContentAfterInsertHooks, declarationForm6ContentHook)
		declarationForm6ContentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		declarationForm6ContentBeforeUpdateMu.Lock()
		declarationForm6ContentBeforeUpdateHooks = append(declarationForm6ContentBeforeUpdateHooks, declarationForm6ContentHook)
		declarationForm6ContentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		declarationForm6ContentAfterUpdateMu.Lock()
		declarationForm6ContentAfterUpdateHooks = append(declarationForm6ContentAfterUpdateHooks, declarationForm6ContentHook)
		declarationForm6ContentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		declarationForm6ContentBeforeDeleteMu.Lock()
		declarationForm6ContentBeforeDeleteHooks = append(declarationForm6ContentBeforeDeleteHooks, declarationForm6ContentHook)
		declarationForm6ContentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		declarationForm6ContentAfterDeleteMu.Lock()
		declarationForm6ContentAfterDeleteHooks = append(declarationForm6ContentAfterDeleteHooks, declarationForm6ContentHook)
		declarationForm6ContentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		declarationForm6ContentBeforeUpsertMu.Lock()
		declarationForm6ContentBeforeUpsertHooks = append(declarationForm6ContentBeforeUpsertHooks, declarationForm6ContentHook)
		declarationForm6ContentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		declarationForm6ContentAfterUpsertMu.Lock()
		declarationForm6ContentAfterUpsertHooks = append(declarationForm6ContentAfterUpsertHooks, declarationForm6ContentHook)
		declarationForm6ContentAfterUpsertMu.Unlock()
	}
}

// OneG returns a single declarationForm6Content record from the query using the global executor.
func (q declarationForm6ContentQuery) OneG(ctx context.Context) (*DeclarationForm6Content, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single declarationForm6Content record from the query.
func (q declarationForm6ContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeclarationForm6Content, error) {
	o := &DeclarationForm6Content{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for declaration_form_6_content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DeclarationForm6Content records from the query using the global executor.
func (q declarationForm6ContentQuery) AllG(ctx context.Context) (DeclarationForm6ContentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeclarationForm6Content records from the query.
func (q declarationForm6ContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeclarationForm6ContentSlice, error) {
	var o []*DeclarationForm6Content

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to DeclarationForm6Content slice")
	}

	if len(declarationForm6ContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DeclarationForm6Content records in the query using the global executor
func (q declarationForm6ContentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeclarationForm6Content records in the query.
func (q declarationForm6ContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count declaration_form_6_content rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q declarationForm6ContentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q declarationForm6ContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if declaration_form_6_content exists")
	}

	return count > 0, nil
}

// DeclarationForm6Contents retrieves all the records using an executor.
func DeclarationForm6Contents(mods ...qm.QueryMod) declarationForm6ContentQuery {
	mods = append(mods, qm.From("[dbo].[declaration_form_6_content]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[declaration_form_6_content].*"})
	}

	return declarationForm6ContentQuery{q}
}

// FindDeclarationForm6ContentG retrieves a single record by ID.
func FindDeclarationForm6ContentG(ctx context.Context, iD int, selectCols ...string) (*DeclarationForm6Content, error) {
	return FindDeclarationForm6Content(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeclarationForm6Content retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeclarationForm6Content(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeclarationForm6Content, error) {
	declarationForm6ContentObj := &DeclarationForm6Content{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[declaration_form_6_content] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, declarationForm6ContentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from declaration_form_6_content")
	}

	if err = declarationForm6ContentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return declarationForm6ContentObj, err
	}

	return declarationForm6ContentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeclarationForm6Content) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeclarationForm6Content) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no declaration_form_6_content provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(declarationForm6ContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	declarationForm6ContentInsertCacheMut.RLock()
	cache, cached := declarationForm6ContentInsertCache[key]
	declarationForm6ContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			declarationForm6ContentAllColumns,
			declarationForm6ContentColumnsWithDefault,
			declarationForm6ContentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, declarationForm6ContentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(declarationForm6ContentType, declarationForm6ContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(declarationForm6ContentType, declarationForm6ContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[declaration_form_6_content] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[declaration_form_6_content] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into declaration_form_6_content")
	}

	if !cached {
		declarationForm6ContentInsertCacheMut.Lock()
		declarationForm6ContentInsertCache[key] = cache
		declarationForm6ContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DeclarationForm6Content record using the global executor.
// See Update for more documentation.
func (o *DeclarationForm6Content) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeclarationForm6Content.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeclarationForm6Content) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	declarationForm6ContentUpdateCacheMut.RLock()
	cache, cached := declarationForm6ContentUpdateCache[key]
	declarationForm6ContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			declarationForm6ContentAllColumns,
			declarationForm6ContentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, declarationForm6ContentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update declaration_form_6_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[declaration_form_6_content] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, declarationForm6ContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(declarationForm6ContentType, declarationForm6ContentMapping, append(wl, declarationForm6ContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update declaration_form_6_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for declaration_form_6_content")
	}

	if !cached {
		declarationForm6ContentUpdateCacheMut.Lock()
		declarationForm6ContentUpdateCache[key] = cache
		declarationForm6ContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q declarationForm6ContentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q declarationForm6ContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for declaration_form_6_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for declaration_form_6_content")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeclarationForm6ContentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeclarationForm6ContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationForm6ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[declaration_form_6_content] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, declarationForm6ContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in declarationForm6Content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all declarationForm6Content")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeclarationForm6Content) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DeclarationForm6Content) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no declaration_form_6_content provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(declarationForm6ContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	declarationForm6ContentUpsertCacheMut.RLock()
	cache, cached := declarationForm6ContentUpsertCache[key]
	declarationForm6ContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			declarationForm6ContentAllColumns,
			declarationForm6ContentColumnsWithDefault,
			declarationForm6ContentColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, declarationForm6ContentGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(declarationForm6ContentPrimaryKeyColumns, v) && strmangle.ContainsAny(declarationForm6ContentColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert declaration_form_6_content, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			declarationForm6ContentAllColumns,
			declarationForm6ContentPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, declarationForm6ContentGeneratedColumns)

		ret := strmangle.SetComplement(declarationForm6ContentAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert declaration_form_6_content, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[declaration_form_6_content]", declarationForm6ContentPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(declarationForm6ContentPrimaryKeyColumns))
		copy(whitelist, declarationForm6ContentPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(declarationForm6ContentType, declarationForm6ContentMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(declarationForm6ContentType, declarationForm6ContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert declaration_form_6_content")
	}

	if !cached {
		declarationForm6ContentUpsertCacheMut.Lock()
		declarationForm6ContentUpsertCache[key] = cache
		declarationForm6ContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DeclarationForm6Content record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeclarationForm6Content) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeclarationForm6Content record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeclarationForm6Content) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no DeclarationForm6Content provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), declarationForm6ContentPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[declaration_form_6_content] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from declaration_form_6_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for declaration_form_6_content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q declarationForm6ContentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q declarationForm6ContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no declarationForm6ContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from declaration_form_6_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for declaration_form_6_content")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeclarationForm6ContentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeclarationForm6ContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(declarationForm6ContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationForm6ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[declaration_form_6_content] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, declarationForm6ContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from declarationForm6Content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for declaration_form_6_content")
	}

	if len(declarationForm6ContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeclarationForm6Content) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no DeclarationForm6Content provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeclarationForm6Content) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeclarationForm6Content(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeclarationForm6ContentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty DeclarationForm6ContentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeclarationForm6ContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeclarationForm6ContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationForm6ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[declaration_form_6_content].* FROM [dbo].[declaration_form_6_content] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, declarationForm6ContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in DeclarationForm6ContentSlice")
	}

	*o = slice

	return nil
}

// DeclarationForm6ContentExistsG checks if the DeclarationForm6Content row exists.
func DeclarationForm6ContentExistsG(ctx context.Context, iD int) (bool, error) {
	return DeclarationForm6ContentExists(ctx, boil.GetContextDB(), iD)
}

// DeclarationForm6ContentExists checks if the DeclarationForm6Content row exists.
func DeclarationForm6ContentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[declaration_form_6_content] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if declaration_form_6_content exists")
	}

	return exists, nil
}

// Exists checks if the DeclarationForm6Content row exists.
func (o *DeclarationForm6Content) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeclarationForm6ContentExists(ctx, exec, o.ID)
}
