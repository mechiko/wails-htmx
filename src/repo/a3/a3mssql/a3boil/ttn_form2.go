// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNForm2 is an object representing the database table.
type TTNForm2 struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTN                null.Int    `boil:"id_ttn" json:"id_ttn,omitempty" toml:"id_ttn" yaml:"id_ttn,omitempty"`
	DocIddomain          null.String `boil:"doc_iddomain" json:"doc_iddomain,omitempty" toml:"doc_iddomain" yaml:"doc_iddomain,omitempty"`
	DocRegID             null.String `boil:"doc_reg_id" json:"doc_reg_id,omitempty" toml:"doc_reg_id" yaml:"doc_reg_id,omitempty"`
	DocFixNumber         null.String `boil:"doc_fix_number" json:"doc_fix_number,omitempty" toml:"doc_fix_number" yaml:"doc_fix_number,omitempty"`
	DocFixDate           null.String `boil:"doc_fix_date" json:"doc_fix_date,omitempty" toml:"doc_fix_date" yaml:"doc_fix_date,omitempty"`
	DocNumber            null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	DocDate              null.String `boil:"doc_date" json:"doc_date,omitempty" toml:"doc_date" yaml:"doc_date,omitempty"`
	ShipperType          null.String `boil:"shipper_type" json:"shipper_type,omitempty" toml:"shipper_type" yaml:"shipper_type,omitempty"`
	ShipperClientRegID   null.String `boil:"shipper_client_reg_id" json:"shipper_client_reg_id,omitempty" toml:"shipper_client_reg_id" yaml:"shipper_client_reg_id,omitempty"`
	ShipperInn           null.String `boil:"shipper_inn" json:"shipper_inn,omitempty" toml:"shipper_inn" yaml:"shipper_inn,omitempty"`
	ShipperKPP           null.String `boil:"shipper_kpp" json:"shipper_kpp,omitempty" toml:"shipper_kpp" yaml:"shipper_kpp,omitempty"`
	ShipperFullName      null.String `boil:"shipper_full_name" json:"shipper_full_name,omitempty" toml:"shipper_full_name" yaml:"shipper_full_name,omitempty"`
	ShipperShortName     null.String `boil:"shipper_short_name" json:"shipper_short_name,omitempty" toml:"shipper_short_name" yaml:"shipper_short_name,omitempty"`
	ShipperCountryCode   null.String `boil:"shipper_country_code" json:"shipper_country_code,omitempty" toml:"shipper_country_code" yaml:"shipper_country_code,omitempty"`
	ShipperRegionCode    null.String `boil:"shipper_region_code" json:"shipper_region_code,omitempty" toml:"shipper_region_code" yaml:"shipper_region_code,omitempty"`
	ShipperDescription   null.String `boil:"shipper_description" json:"shipper_description,omitempty" toml:"shipper_description" yaml:"shipper_description,omitempty"`
	ConsigneeType        null.String `boil:"consignee_type" json:"consignee_type,omitempty" toml:"consignee_type" yaml:"consignee_type,omitempty"`
	ConsigneeClientRegID null.String `boil:"consignee_client_reg_id" json:"consignee_client_reg_id,omitempty" toml:"consignee_client_reg_id" yaml:"consignee_client_reg_id,omitempty"`
	ConsigneeInn         null.String `boil:"consignee_inn" json:"consignee_inn,omitempty" toml:"consignee_inn" yaml:"consignee_inn,omitempty"`
	ConsigneeKPP         null.String `boil:"consignee_kpp" json:"consignee_kpp,omitempty" toml:"consignee_kpp" yaml:"consignee_kpp,omitempty"`
	ConsigneeFullName    null.String `boil:"consignee_full_name" json:"consignee_full_name,omitempty" toml:"consignee_full_name" yaml:"consignee_full_name,omitempty"`
	ConsigneeShortName   null.String `boil:"consignee_short_name" json:"consignee_short_name,omitempty" toml:"consignee_short_name" yaml:"consignee_short_name,omitempty"`
	ConsigneeCountryCode null.String `boil:"consignee_country_code" json:"consignee_country_code,omitempty" toml:"consignee_country_code" yaml:"consignee_country_code,omitempty"`
	ConsigneeRegionCode  null.String `boil:"consignee_region_code" json:"consignee_region_code,omitempty" toml:"consignee_region_code" yaml:"consignee_region_code,omitempty"`
	ConsigneeDescription null.String `boil:"consignee_description" json:"consignee_description,omitempty" toml:"consignee_description" yaml:"consignee_description,omitempty"`
	XML                  null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *ttnForm2R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnForm2L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNForm2Columns = struct {
	ID                   string
	IDTTN                string
	DocIddomain          string
	DocRegID             string
	DocFixNumber         string
	DocFixDate           string
	DocNumber            string
	DocDate              string
	ShipperType          string
	ShipperClientRegID   string
	ShipperInn           string
	ShipperKPP           string
	ShipperFullName      string
	ShipperShortName     string
	ShipperCountryCode   string
	ShipperRegionCode    string
	ShipperDescription   string
	ConsigneeType        string
	ConsigneeClientRegID string
	ConsigneeInn         string
	ConsigneeKPP         string
	ConsigneeFullName    string
	ConsigneeShortName   string
	ConsigneeCountryCode string
	ConsigneeRegionCode  string
	ConsigneeDescription string
	XML                  string
}{
	ID:                   "id",
	IDTTN:                "id_ttn",
	DocIddomain:          "doc_iddomain",
	DocRegID:             "doc_reg_id",
	DocFixNumber:         "doc_fix_number",
	DocFixDate:           "doc_fix_date",
	DocNumber:            "doc_number",
	DocDate:              "doc_date",
	ShipperType:          "shipper_type",
	ShipperClientRegID:   "shipper_client_reg_id",
	ShipperInn:           "shipper_inn",
	ShipperKPP:           "shipper_kpp",
	ShipperFullName:      "shipper_full_name",
	ShipperShortName:     "shipper_short_name",
	ShipperCountryCode:   "shipper_country_code",
	ShipperRegionCode:    "shipper_region_code",
	ShipperDescription:   "shipper_description",
	ConsigneeType:        "consignee_type",
	ConsigneeClientRegID: "consignee_client_reg_id",
	ConsigneeInn:         "consignee_inn",
	ConsigneeKPP:         "consignee_kpp",
	ConsigneeFullName:    "consignee_full_name",
	ConsigneeShortName:   "consignee_short_name",
	ConsigneeCountryCode: "consignee_country_code",
	ConsigneeRegionCode:  "consignee_region_code",
	ConsigneeDescription: "consignee_description",
	XML:                  "xml",
}

var TTNForm2TableColumns = struct {
	ID                   string
	IDTTN                string
	DocIddomain          string
	DocRegID             string
	DocFixNumber         string
	DocFixDate           string
	DocNumber            string
	DocDate              string
	ShipperType          string
	ShipperClientRegID   string
	ShipperInn           string
	ShipperKPP           string
	ShipperFullName      string
	ShipperShortName     string
	ShipperCountryCode   string
	ShipperRegionCode    string
	ShipperDescription   string
	ConsigneeType        string
	ConsigneeClientRegID string
	ConsigneeInn         string
	ConsigneeKPP         string
	ConsigneeFullName    string
	ConsigneeShortName   string
	ConsigneeCountryCode string
	ConsigneeRegionCode  string
	ConsigneeDescription string
	XML                  string
}{
	ID:                   "ttn_form2.id",
	IDTTN:                "ttn_form2.id_ttn",
	DocIddomain:          "ttn_form2.doc_iddomain",
	DocRegID:             "ttn_form2.doc_reg_id",
	DocFixNumber:         "ttn_form2.doc_fix_number",
	DocFixDate:           "ttn_form2.doc_fix_date",
	DocNumber:            "ttn_form2.doc_number",
	DocDate:              "ttn_form2.doc_date",
	ShipperType:          "ttn_form2.shipper_type",
	ShipperClientRegID:   "ttn_form2.shipper_client_reg_id",
	ShipperInn:           "ttn_form2.shipper_inn",
	ShipperKPP:           "ttn_form2.shipper_kpp",
	ShipperFullName:      "ttn_form2.shipper_full_name",
	ShipperShortName:     "ttn_form2.shipper_short_name",
	ShipperCountryCode:   "ttn_form2.shipper_country_code",
	ShipperRegionCode:    "ttn_form2.shipper_region_code",
	ShipperDescription:   "ttn_form2.shipper_description",
	ConsigneeType:        "ttn_form2.consignee_type",
	ConsigneeClientRegID: "ttn_form2.consignee_client_reg_id",
	ConsigneeInn:         "ttn_form2.consignee_inn",
	ConsigneeKPP:         "ttn_form2.consignee_kpp",
	ConsigneeFullName:    "ttn_form2.consignee_full_name",
	ConsigneeShortName:   "ttn_form2.consignee_short_name",
	ConsigneeCountryCode: "ttn_form2.consignee_country_code",
	ConsigneeRegionCode:  "ttn_form2.consignee_region_code",
	ConsigneeDescription: "ttn_form2.consignee_description",
	XML:                  "ttn_form2.xml",
}

// Generated where

var TTNForm2Where = struct {
	ID                   whereHelperint
	IDTTN                whereHelpernull_Int
	DocIddomain          whereHelpernull_String
	DocRegID             whereHelpernull_String
	DocFixNumber         whereHelpernull_String
	DocFixDate           whereHelpernull_String
	DocNumber            whereHelpernull_String
	DocDate              whereHelpernull_String
	ShipperType          whereHelpernull_String
	ShipperClientRegID   whereHelpernull_String
	ShipperInn           whereHelpernull_String
	ShipperKPP           whereHelpernull_String
	ShipperFullName      whereHelpernull_String
	ShipperShortName     whereHelpernull_String
	ShipperCountryCode   whereHelpernull_String
	ShipperRegionCode    whereHelpernull_String
	ShipperDescription   whereHelpernull_String
	ConsigneeType        whereHelpernull_String
	ConsigneeClientRegID whereHelpernull_String
	ConsigneeInn         whereHelpernull_String
	ConsigneeKPP         whereHelpernull_String
	ConsigneeFullName    whereHelpernull_String
	ConsigneeShortName   whereHelpernull_String
	ConsigneeCountryCode whereHelpernull_String
	ConsigneeRegionCode  whereHelpernull_String
	ConsigneeDescription whereHelpernull_String
	XML                  whereHelpernull_String
}{
	ID:                   whereHelperint{field: "[dbo].[ttn_form2].[id]"},
	IDTTN:                whereHelpernull_Int{field: "[dbo].[ttn_form2].[id_ttn]"},
	DocIddomain:          whereHelpernull_String{field: "[dbo].[ttn_form2].[doc_iddomain]"},
	DocRegID:             whereHelpernull_String{field: "[dbo].[ttn_form2].[doc_reg_id]"},
	DocFixNumber:         whereHelpernull_String{field: "[dbo].[ttn_form2].[doc_fix_number]"},
	DocFixDate:           whereHelpernull_String{field: "[dbo].[ttn_form2].[doc_fix_date]"},
	DocNumber:            whereHelpernull_String{field: "[dbo].[ttn_form2].[doc_number]"},
	DocDate:              whereHelpernull_String{field: "[dbo].[ttn_form2].[doc_date]"},
	ShipperType:          whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_type]"},
	ShipperClientRegID:   whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_client_reg_id]"},
	ShipperInn:           whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_inn]"},
	ShipperKPP:           whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_kpp]"},
	ShipperFullName:      whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_full_name]"},
	ShipperShortName:     whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_short_name]"},
	ShipperCountryCode:   whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_country_code]"},
	ShipperRegionCode:    whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_region_code]"},
	ShipperDescription:   whereHelpernull_String{field: "[dbo].[ttn_form2].[shipper_description]"},
	ConsigneeType:        whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_type]"},
	ConsigneeClientRegID: whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_client_reg_id]"},
	ConsigneeInn:         whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_inn]"},
	ConsigneeKPP:         whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_kpp]"},
	ConsigneeFullName:    whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_full_name]"},
	ConsigneeShortName:   whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_short_name]"},
	ConsigneeCountryCode: whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_country_code]"},
	ConsigneeRegionCode:  whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_region_code]"},
	ConsigneeDescription: whereHelpernull_String{field: "[dbo].[ttn_form2].[consignee_description]"},
	XML:                  whereHelpernull_String{field: "[dbo].[ttn_form2].[xml]"},
}

// TTNForm2Rels is where relationship names are stored.
var TTNForm2Rels = struct {
}{}

// ttnForm2R is where relationships are stored.
type ttnForm2R struct {
}

// NewStruct creates a new relationship struct
func (*ttnForm2R) NewStruct() *ttnForm2R {
	return &ttnForm2R{}
}

// ttnForm2L is where Load methods for each relationship are stored.
type ttnForm2L struct{}

var (
	ttnForm2AllColumns            = []string{"id", "id_ttn", "doc_iddomain", "doc_reg_id", "doc_fix_number", "doc_fix_date", "doc_number", "doc_date", "shipper_type", "shipper_client_reg_id", "shipper_inn", "shipper_kpp", "shipper_full_name", "shipper_short_name", "shipper_country_code", "shipper_region_code", "shipper_description", "consignee_type", "consignee_client_reg_id", "consignee_inn", "consignee_kpp", "consignee_full_name", "consignee_short_name", "consignee_country_code", "consignee_region_code", "consignee_description", "xml"}
	ttnForm2ColumnsWithoutDefault = []string{"id_ttn", "doc_iddomain", "doc_reg_id", "doc_fix_number", "doc_fix_date", "doc_number", "doc_date", "shipper_type", "shipper_client_reg_id", "shipper_inn", "shipper_kpp", "shipper_full_name", "shipper_short_name", "shipper_country_code", "shipper_region_code", "shipper_description", "consignee_type", "consignee_client_reg_id", "consignee_inn", "consignee_kpp", "consignee_full_name", "consignee_short_name", "consignee_country_code", "consignee_region_code", "consignee_description", "xml"}
	ttnForm2ColumnsWithDefault    = []string{"id"}
	ttnForm2PrimaryKeyColumns     = []string{"id"}
	ttnForm2GeneratedColumns      = []string{"id"}
)

type (
	// TTNForm2Slice is an alias for a slice of pointers to TTNForm2.
	// This should almost always be used instead of []TTNForm2.
	TTNForm2Slice []*TTNForm2
	// TTNForm2Hook is the signature for custom TTNForm2 hook methods
	TTNForm2Hook func(context.Context, boil.ContextExecutor, *TTNForm2) error

	ttnForm2Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnForm2Type                 = reflect.TypeOf(&TTNForm2{})
	ttnForm2Mapping              = queries.MakeStructMapping(ttnForm2Type)
	ttnForm2PrimaryKeyMapping, _ = queries.BindMapping(ttnForm2Type, ttnForm2Mapping, ttnForm2PrimaryKeyColumns)
	ttnForm2InsertCacheMut       sync.RWMutex
	ttnForm2InsertCache          = make(map[string]insertCache)
	ttnForm2UpdateCacheMut       sync.RWMutex
	ttnForm2UpdateCache          = make(map[string]updateCache)
	ttnForm2UpsertCacheMut       sync.RWMutex
	ttnForm2UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnForm2AfterSelectMu sync.Mutex
var ttnForm2AfterSelectHooks []TTNForm2Hook

var ttnForm2BeforeInsertMu sync.Mutex
var ttnForm2BeforeInsertHooks []TTNForm2Hook
var ttnForm2AfterInsertMu sync.Mutex
var ttnForm2AfterInsertHooks []TTNForm2Hook

var ttnForm2BeforeUpdateMu sync.Mutex
var ttnForm2BeforeUpdateHooks []TTNForm2Hook
var ttnForm2AfterUpdateMu sync.Mutex
var ttnForm2AfterUpdateHooks []TTNForm2Hook

var ttnForm2BeforeDeleteMu sync.Mutex
var ttnForm2BeforeDeleteHooks []TTNForm2Hook
var ttnForm2AfterDeleteMu sync.Mutex
var ttnForm2AfterDeleteHooks []TTNForm2Hook

var ttnForm2BeforeUpsertMu sync.Mutex
var ttnForm2BeforeUpsertHooks []TTNForm2Hook
var ttnForm2AfterUpsertMu sync.Mutex
var ttnForm2AfterUpsertHooks []TTNForm2Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNForm2) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNForm2) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNForm2) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNForm2) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNForm2) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNForm2) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNForm2) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNForm2) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNForm2) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNForm2Hook registers your hook function for all future operations.
func AddTTNForm2Hook(hookPoint boil.HookPoint, ttnForm2Hook TTNForm2Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnForm2AfterSelectMu.Lock()
		ttnForm2AfterSelectHooks = append(ttnForm2AfterSelectHooks, ttnForm2Hook)
		ttnForm2AfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnForm2BeforeInsertMu.Lock()
		ttnForm2BeforeInsertHooks = append(ttnForm2BeforeInsertHooks, ttnForm2Hook)
		ttnForm2BeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnForm2AfterInsertMu.Lock()
		ttnForm2AfterInsertHooks = append(ttnForm2AfterInsertHooks, ttnForm2Hook)
		ttnForm2AfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnForm2BeforeUpdateMu.Lock()
		ttnForm2BeforeUpdateHooks = append(ttnForm2BeforeUpdateHooks, ttnForm2Hook)
		ttnForm2BeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnForm2AfterUpdateMu.Lock()
		ttnForm2AfterUpdateHooks = append(ttnForm2AfterUpdateHooks, ttnForm2Hook)
		ttnForm2AfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnForm2BeforeDeleteMu.Lock()
		ttnForm2BeforeDeleteHooks = append(ttnForm2BeforeDeleteHooks, ttnForm2Hook)
		ttnForm2BeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnForm2AfterDeleteMu.Lock()
		ttnForm2AfterDeleteHooks = append(ttnForm2AfterDeleteHooks, ttnForm2Hook)
		ttnForm2AfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnForm2BeforeUpsertMu.Lock()
		ttnForm2BeforeUpsertHooks = append(ttnForm2BeforeUpsertHooks, ttnForm2Hook)
		ttnForm2BeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnForm2AfterUpsertMu.Lock()
		ttnForm2AfterUpsertHooks = append(ttnForm2AfterUpsertHooks, ttnForm2Hook)
		ttnForm2AfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnForm2 record from the query using the global executor.
func (q ttnForm2Query) OneG(ctx context.Context) (*TTNForm2, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnForm2 record from the query.
func (q ttnForm2Query) One(ctx context.Context, exec boil.ContextExecutor) (*TTNForm2, error) {
	o := &TTNForm2{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_form2")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNForm2 records from the query using the global executor.
func (q ttnForm2Query) AllG(ctx context.Context) (TTNForm2Slice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNForm2 records from the query.
func (q ttnForm2Query) All(ctx context.Context, exec boil.ContextExecutor) (TTNForm2Slice, error) {
	var o []*TTNForm2

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNForm2 slice")
	}

	if len(ttnForm2AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNForm2 records in the query using the global executor
func (q ttnForm2Query) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNForm2 records in the query.
func (q ttnForm2Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_form2 rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnForm2Query) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnForm2Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_form2 exists")
	}

	return count > 0, nil
}

// TTNForm2s retrieves all the records using an executor.
func TTNForm2s(mods ...qm.QueryMod) ttnForm2Query {
	mods = append(mods, qm.From("[dbo].[ttn_form2]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_form2].*"})
	}

	return ttnForm2Query{q}
}

// FindTTNForm2G retrieves a single record by ID.
func FindTTNForm2G(ctx context.Context, iD int, selectCols ...string) (*TTNForm2, error) {
	return FindTTNForm2(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNForm2 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNForm2(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNForm2, error) {
	ttnForm2Obj := &TTNForm2{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_form2] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnForm2Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_form2")
	}

	if err = ttnForm2Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnForm2Obj, err
	}

	return ttnForm2Obj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNForm2) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNForm2) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_form2 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnForm2ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnForm2InsertCacheMut.RLock()
	cache, cached := ttnForm2InsertCache[key]
	ttnForm2InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnForm2AllColumns,
			ttnForm2ColumnsWithDefault,
			ttnForm2ColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnForm2GeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnForm2Type, ttnForm2Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnForm2Type, ttnForm2Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_form2] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_form2] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_form2")
	}

	if !cached {
		ttnForm2InsertCacheMut.Lock()
		ttnForm2InsertCache[key] = cache
		ttnForm2InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNForm2 record using the global executor.
// See Update for more documentation.
func (o *TTNForm2) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNForm2.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNForm2) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnForm2UpdateCacheMut.RLock()
	cache, cached := ttnForm2UpdateCache[key]
	ttnForm2UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnForm2AllColumns,
			ttnForm2PrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnForm2GeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_form2, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_form2] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnForm2PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnForm2Type, ttnForm2Mapping, append(wl, ttnForm2PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_form2 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_form2")
	}

	if !cached {
		ttnForm2UpdateCacheMut.Lock()
		ttnForm2UpdateCache[key] = cache
		ttnForm2UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnForm2Query) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnForm2Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_form2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_form2")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNForm2Slice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNForm2Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnForm2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_form2] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnForm2PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnForm2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnForm2")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNForm2) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNForm2) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_form2 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnForm2ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnForm2UpsertCacheMut.RLock()
	cache, cached := ttnForm2UpsertCache[key]
	ttnForm2UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnForm2AllColumns,
			ttnForm2ColumnsWithDefault,
			ttnForm2ColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnForm2GeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnForm2PrimaryKeyColumns, v) && strmangle.ContainsAny(ttnForm2ColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_form2, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnForm2AllColumns,
			ttnForm2PrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnForm2GeneratedColumns)

		ret := strmangle.SetComplement(ttnForm2AllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_form2, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_form2]", ttnForm2PrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnForm2PrimaryKeyColumns))
		copy(whitelist, ttnForm2PrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnForm2Type, ttnForm2Mapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnForm2Type, ttnForm2Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_form2")
	}

	if !cached {
		ttnForm2UpsertCacheMut.Lock()
		ttnForm2UpsertCache[key] = cache
		ttnForm2UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNForm2 record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNForm2) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNForm2 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNForm2) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNForm2 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnForm2PrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_form2] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_form2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_form2")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnForm2Query) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnForm2Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnForm2Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_form2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_form2")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNForm2Slice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNForm2Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnForm2BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnForm2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_form2] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnForm2PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnForm2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_form2")
	}

	if len(ttnForm2AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNForm2) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNForm2 provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNForm2) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNForm2(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNForm2Slice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNForm2Slice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNForm2Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNForm2Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnForm2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_form2].* FROM [dbo].[ttn_form2] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnForm2PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNForm2Slice")
	}

	*o = slice

	return nil
}

// TTNForm2ExistsG checks if the TTNForm2 row exists.
func TTNForm2ExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNForm2Exists(ctx, boil.GetContextDB(), iD)
}

// TTNForm2Exists checks if the TTNForm2 row exists.
func TTNForm2Exists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_form2] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_form2 exists")
	}

	return exists, nil
}

// Exists checks if the TTNForm2 row exists.
func (o *TTNForm2) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNForm2Exists(ctx, exec, o.ID)
}
