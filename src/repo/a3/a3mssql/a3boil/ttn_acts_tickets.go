// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNActsTicket is an object representing the database table.
type TTNActsTicket struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTNActs     null.Int    `boil:"id_ttn_acts" json:"id_ttn_acts,omitempty" toml:"id_ttn_acts" yaml:"id_ttn_acts,omitempty"`
	TicketType    null.String `boil:"ticket_type" json:"ticket_type,omitempty" toml:"ticket_type" yaml:"ticket_type,omitempty"`
	TicketNumber  null.String `boil:"ticket_number" json:"ticket_number,omitempty" toml:"ticket_number" yaml:"ticket_number,omitempty"`
	TicketDate    null.String `boil:"ticket_date" json:"ticket_date,omitempty" toml:"ticket_date" yaml:"ticket_date,omitempty"`
	TicketRegID   null.String `boil:"ticket_reg_id" json:"ticket_reg_id,omitempty" toml:"ticket_reg_id" yaml:"ticket_reg_id,omitempty"`
	TicketComment null.String `boil:"ticket_comment" json:"ticket_comment,omitempty" toml:"ticket_comment" yaml:"ticket_comment,omitempty"`
	Status        null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID       null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	XML           null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *ttnActsTicketR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnActsTicketL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNActsTicketColumns = struct {
	ID            string
	IDTTNActs     string
	TicketType    string
	TicketNumber  string
	TicketDate    string
	TicketRegID   string
	TicketComment string
	Status        string
	ReplyID       string
	XML           string
}{
	ID:            "id",
	IDTTNActs:     "id_ttn_acts",
	TicketType:    "ticket_type",
	TicketNumber:  "ticket_number",
	TicketDate:    "ticket_date",
	TicketRegID:   "ticket_reg_id",
	TicketComment: "ticket_comment",
	Status:        "status",
	ReplyID:       "reply_id",
	XML:           "xml",
}

var TTNActsTicketTableColumns = struct {
	ID            string
	IDTTNActs     string
	TicketType    string
	TicketNumber  string
	TicketDate    string
	TicketRegID   string
	TicketComment string
	Status        string
	ReplyID       string
	XML           string
}{
	ID:            "ttn_acts_tickets.id",
	IDTTNActs:     "ttn_acts_tickets.id_ttn_acts",
	TicketType:    "ttn_acts_tickets.ticket_type",
	TicketNumber:  "ttn_acts_tickets.ticket_number",
	TicketDate:    "ttn_acts_tickets.ticket_date",
	TicketRegID:   "ttn_acts_tickets.ticket_reg_id",
	TicketComment: "ttn_acts_tickets.ticket_comment",
	Status:        "ttn_acts_tickets.status",
	ReplyID:       "ttn_acts_tickets.reply_id",
	XML:           "ttn_acts_tickets.xml",
}

// Generated where

var TTNActsTicketWhere = struct {
	ID            whereHelperint
	IDTTNActs     whereHelpernull_Int
	TicketType    whereHelpernull_String
	TicketNumber  whereHelpernull_String
	TicketDate    whereHelpernull_String
	TicketRegID   whereHelpernull_String
	TicketComment whereHelpernull_String
	Status        whereHelpernull_String
	ReplyID       whereHelpernull_String
	XML           whereHelpernull_String
}{
	ID:            whereHelperint{field: "[dbo].[ttn_acts_tickets].[id]"},
	IDTTNActs:     whereHelpernull_Int{field: "[dbo].[ttn_acts_tickets].[id_ttn_acts]"},
	TicketType:    whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[ticket_type]"},
	TicketNumber:  whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[ticket_number]"},
	TicketDate:    whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[ticket_date]"},
	TicketRegID:   whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[ticket_reg_id]"},
	TicketComment: whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[ticket_comment]"},
	Status:        whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[status]"},
	ReplyID:       whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[reply_id]"},
	XML:           whereHelpernull_String{field: "[dbo].[ttn_acts_tickets].[xml]"},
}

// TTNActsTicketRels is where relationship names are stored.
var TTNActsTicketRels = struct {
}{}

// ttnActsTicketR is where relationships are stored.
type ttnActsTicketR struct {
}

// NewStruct creates a new relationship struct
func (*ttnActsTicketR) NewStruct() *ttnActsTicketR {
	return &ttnActsTicketR{}
}

// ttnActsTicketL is where Load methods for each relationship are stored.
type ttnActsTicketL struct{}

var (
	ttnActsTicketAllColumns            = []string{"id", "id_ttn_acts", "ticket_type", "ticket_number", "ticket_date", "ticket_reg_id", "ticket_comment", "status", "reply_id", "xml"}
	ttnActsTicketColumnsWithoutDefault = []string{"id_ttn_acts", "ticket_type", "ticket_number", "ticket_date", "ticket_reg_id", "ticket_comment", "status", "reply_id", "xml"}
	ttnActsTicketColumnsWithDefault    = []string{"id"}
	ttnActsTicketPrimaryKeyColumns     = []string{"id"}
	ttnActsTicketGeneratedColumns      = []string{"id"}
)

type (
	// TTNActsTicketSlice is an alias for a slice of pointers to TTNActsTicket.
	// This should almost always be used instead of []TTNActsTicket.
	TTNActsTicketSlice []*TTNActsTicket
	// TTNActsTicketHook is the signature for custom TTNActsTicket hook methods
	TTNActsTicketHook func(context.Context, boil.ContextExecutor, *TTNActsTicket) error

	ttnActsTicketQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnActsTicketType                 = reflect.TypeOf(&TTNActsTicket{})
	ttnActsTicketMapping              = queries.MakeStructMapping(ttnActsTicketType)
	ttnActsTicketPrimaryKeyMapping, _ = queries.BindMapping(ttnActsTicketType, ttnActsTicketMapping, ttnActsTicketPrimaryKeyColumns)
	ttnActsTicketInsertCacheMut       sync.RWMutex
	ttnActsTicketInsertCache          = make(map[string]insertCache)
	ttnActsTicketUpdateCacheMut       sync.RWMutex
	ttnActsTicketUpdateCache          = make(map[string]updateCache)
	ttnActsTicketUpsertCacheMut       sync.RWMutex
	ttnActsTicketUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnActsTicketAfterSelectMu sync.Mutex
var ttnActsTicketAfterSelectHooks []TTNActsTicketHook

var ttnActsTicketBeforeInsertMu sync.Mutex
var ttnActsTicketBeforeInsertHooks []TTNActsTicketHook
var ttnActsTicketAfterInsertMu sync.Mutex
var ttnActsTicketAfterInsertHooks []TTNActsTicketHook

var ttnActsTicketBeforeUpdateMu sync.Mutex
var ttnActsTicketBeforeUpdateHooks []TTNActsTicketHook
var ttnActsTicketAfterUpdateMu sync.Mutex
var ttnActsTicketAfterUpdateHooks []TTNActsTicketHook

var ttnActsTicketBeforeDeleteMu sync.Mutex
var ttnActsTicketBeforeDeleteHooks []TTNActsTicketHook
var ttnActsTicketAfterDeleteMu sync.Mutex
var ttnActsTicketAfterDeleteHooks []TTNActsTicketHook

var ttnActsTicketBeforeUpsertMu sync.Mutex
var ttnActsTicketBeforeUpsertHooks []TTNActsTicketHook
var ttnActsTicketAfterUpsertMu sync.Mutex
var ttnActsTicketAfterUpsertHooks []TTNActsTicketHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNActsTicket) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNActsTicket) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNActsTicket) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNActsTicket) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNActsTicket) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNActsTicket) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNActsTicket) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNActsTicket) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNActsTicket) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnActsTicketAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNActsTicketHook registers your hook function for all future operations.
func AddTTNActsTicketHook(hookPoint boil.HookPoint, ttnActsTicketHook TTNActsTicketHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnActsTicketAfterSelectMu.Lock()
		ttnActsTicketAfterSelectHooks = append(ttnActsTicketAfterSelectHooks, ttnActsTicketHook)
		ttnActsTicketAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnActsTicketBeforeInsertMu.Lock()
		ttnActsTicketBeforeInsertHooks = append(ttnActsTicketBeforeInsertHooks, ttnActsTicketHook)
		ttnActsTicketBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnActsTicketAfterInsertMu.Lock()
		ttnActsTicketAfterInsertHooks = append(ttnActsTicketAfterInsertHooks, ttnActsTicketHook)
		ttnActsTicketAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnActsTicketBeforeUpdateMu.Lock()
		ttnActsTicketBeforeUpdateHooks = append(ttnActsTicketBeforeUpdateHooks, ttnActsTicketHook)
		ttnActsTicketBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnActsTicketAfterUpdateMu.Lock()
		ttnActsTicketAfterUpdateHooks = append(ttnActsTicketAfterUpdateHooks, ttnActsTicketHook)
		ttnActsTicketAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnActsTicketBeforeDeleteMu.Lock()
		ttnActsTicketBeforeDeleteHooks = append(ttnActsTicketBeforeDeleteHooks, ttnActsTicketHook)
		ttnActsTicketBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnActsTicketAfterDeleteMu.Lock()
		ttnActsTicketAfterDeleteHooks = append(ttnActsTicketAfterDeleteHooks, ttnActsTicketHook)
		ttnActsTicketAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnActsTicketBeforeUpsertMu.Lock()
		ttnActsTicketBeforeUpsertHooks = append(ttnActsTicketBeforeUpsertHooks, ttnActsTicketHook)
		ttnActsTicketBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnActsTicketAfterUpsertMu.Lock()
		ttnActsTicketAfterUpsertHooks = append(ttnActsTicketAfterUpsertHooks, ttnActsTicketHook)
		ttnActsTicketAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnActsTicket record from the query using the global executor.
func (q ttnActsTicketQuery) OneG(ctx context.Context) (*TTNActsTicket, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnActsTicket record from the query.
func (q ttnActsTicketQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNActsTicket, error) {
	o := &TTNActsTicket{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_acts_tickets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNActsTicket records from the query using the global executor.
func (q ttnActsTicketQuery) AllG(ctx context.Context) (TTNActsTicketSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNActsTicket records from the query.
func (q ttnActsTicketQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNActsTicketSlice, error) {
	var o []*TTNActsTicket

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNActsTicket slice")
	}

	if len(ttnActsTicketAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNActsTicket records in the query using the global executor
func (q ttnActsTicketQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNActsTicket records in the query.
func (q ttnActsTicketQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_acts_tickets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnActsTicketQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnActsTicketQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_acts_tickets exists")
	}

	return count > 0, nil
}

// TTNActsTickets retrieves all the records using an executor.
func TTNActsTickets(mods ...qm.QueryMod) ttnActsTicketQuery {
	mods = append(mods, qm.From("[dbo].[ttn_acts_tickets]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_acts_tickets].*"})
	}

	return ttnActsTicketQuery{q}
}

// FindTTNActsTicketG retrieves a single record by ID.
func FindTTNActsTicketG(ctx context.Context, iD int, selectCols ...string) (*TTNActsTicket, error) {
	return FindTTNActsTicket(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNActsTicket retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNActsTicket(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNActsTicket, error) {
	ttnActsTicketObj := &TTNActsTicket{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_acts_tickets] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnActsTicketObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_acts_tickets")
	}

	if err = ttnActsTicketObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnActsTicketObj, err
	}

	return ttnActsTicketObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNActsTicket) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNActsTicket) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts_tickets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActsTicketColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnActsTicketInsertCacheMut.RLock()
	cache, cached := ttnActsTicketInsertCache[key]
	ttnActsTicketInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnActsTicketAllColumns,
			ttnActsTicketColumnsWithDefault,
			ttnActsTicketColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnActsTicketGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnActsTicketType, ttnActsTicketMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnActsTicketType, ttnActsTicketMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_acts_tickets] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_acts_tickets] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_acts_tickets")
	}

	if !cached {
		ttnActsTicketInsertCacheMut.Lock()
		ttnActsTicketInsertCache[key] = cache
		ttnActsTicketInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNActsTicket record using the global executor.
// See Update for more documentation.
func (o *TTNActsTicket) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNActsTicket.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNActsTicket) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnActsTicketUpdateCacheMut.RLock()
	cache, cached := ttnActsTicketUpdateCache[key]
	ttnActsTicketUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnActsTicketAllColumns,
			ttnActsTicketPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnActsTicketGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_acts_tickets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_acts_tickets] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnActsTicketPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnActsTicketType, ttnActsTicketMapping, append(wl, ttnActsTicketPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_acts_tickets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_acts_tickets")
	}

	if !cached {
		ttnActsTicketUpdateCacheMut.Lock()
		ttnActsTicketUpdateCache[key] = cache
		ttnActsTicketUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnActsTicketQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnActsTicketQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_acts_tickets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_acts_tickets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNActsTicketSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNActsTicketSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsTicketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_acts_tickets] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnActsTicketPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnActsTicket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnActsTicket")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNActsTicket) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNActsTicket) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_acts_tickets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnActsTicketColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnActsTicketUpsertCacheMut.RLock()
	cache, cached := ttnActsTicketUpsertCache[key]
	ttnActsTicketUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnActsTicketAllColumns,
			ttnActsTicketColumnsWithDefault,
			ttnActsTicketColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnActsTicketGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnActsTicketPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnActsTicketColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts_tickets, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnActsTicketAllColumns,
			ttnActsTicketPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnActsTicketGeneratedColumns)

		ret := strmangle.SetComplement(ttnActsTicketAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_acts_tickets, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_acts_tickets]", ttnActsTicketPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnActsTicketPrimaryKeyColumns))
		copy(whitelist, ttnActsTicketPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnActsTicketType, ttnActsTicketMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnActsTicketType, ttnActsTicketMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_acts_tickets")
	}

	if !cached {
		ttnActsTicketUpsertCacheMut.Lock()
		ttnActsTicketUpsertCache[key] = cache
		ttnActsTicketUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNActsTicket record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNActsTicket) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNActsTicket record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNActsTicket) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNActsTicket provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnActsTicketPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_acts_tickets] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_acts_tickets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_acts_tickets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnActsTicketQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnActsTicketQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnActsTicketQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_acts_tickets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts_tickets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNActsTicketSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNActsTicketSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnActsTicketBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsTicketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_acts_tickets] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnActsTicketPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnActsTicket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_acts_tickets")
	}

	if len(ttnActsTicketAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNActsTicket) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNActsTicket provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNActsTicket) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNActsTicket(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActsTicketSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNActsTicketSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNActsTicketSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNActsTicketSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnActsTicketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_acts_tickets].* FROM [dbo].[ttn_acts_tickets] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnActsTicketPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNActsTicketSlice")
	}

	*o = slice

	return nil
}

// TTNActsTicketExistsG checks if the TTNActsTicket row exists.
func TTNActsTicketExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNActsTicketExists(ctx, boil.GetContextDB(), iD)
}

// TTNActsTicketExists checks if the TTNActsTicket row exists.
func TTNActsTicketExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_acts_tickets] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_acts_tickets exists")
	}

	return exists, nil
}

// Exists checks if the TTNActsTicket row exists.
func (o *TTNActsTicket) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNActsTicketExists(ctx, exec, o.ID)
}
