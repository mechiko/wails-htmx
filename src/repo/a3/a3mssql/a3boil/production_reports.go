// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionReport is an object representing the database table.
type ProductionReport struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate          null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	DocIddomain         null.String `boil:"doc_iddomain" json:"doc_iddomain,omitempty" toml:"doc_iddomain" yaml:"doc_iddomain,omitempty"`
	DocType             null.String `boil:"doc_type" json:"doc_type,omitempty" toml:"doc_type" yaml:"doc_type,omitempty"`
	DocNumber           null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	DocDate             null.String `boil:"doc_date" json:"doc_date,omitempty" toml:"doc_date" yaml:"doc_date,omitempty"`
	DocProducedDate     null.String `boil:"doc_produced_date" json:"doc_produced_date,omitempty" toml:"doc_produced_date" yaml:"doc_produced_date,omitempty"`
	DocComment          null.String `boil:"doc_comment" json:"doc_comment,omitempty" toml:"doc_comment" yaml:"doc_comment,omitempty"`
	ProducerType        null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn         null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP         null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName    null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName   null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode  null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`
	Version             null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	State               null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	Status              null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID             null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`
	Archive             null.Int    `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`
	XML                 null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *productionReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionReportColumns = struct {
	ID                  string
	CreateDate          string
	DocIddomain         string
	DocType             string
	DocNumber           string
	DocDate             string
	DocProducedDate     string
	DocComment          string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
	Version             string
	State               string
	Status              string
	ReplyID             string
	Archive             string
	XML                 string
}{
	ID:                  "id",
	CreateDate:          "create_date",
	DocIddomain:         "doc_iddomain",
	DocType:             "doc_type",
	DocNumber:           "doc_number",
	DocDate:             "doc_date",
	DocProducedDate:     "doc_produced_date",
	DocComment:          "doc_comment",
	ProducerType:        "producer_type",
	ProducerClientRegID: "producer_client_reg_id",
	ProducerInn:         "producer_inn",
	ProducerKPP:         "producer_kpp",
	ProducerFullName:    "producer_full_name",
	ProducerShortName:   "producer_short_name",
	ProducerCountryCode: "producer_country_code",
	ProducerRegionCode:  "producer_region_code",
	ProducerDescription: "producer_description",
	Version:             "version",
	State:               "state",
	Status:              "status",
	ReplyID:             "reply_id",
	Archive:             "archive",
	XML:                 "xml",
}

var ProductionReportTableColumns = struct {
	ID                  string
	CreateDate          string
	DocIddomain         string
	DocType             string
	DocNumber           string
	DocDate             string
	DocProducedDate     string
	DocComment          string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
	Version             string
	State               string
	Status              string
	ReplyID             string
	Archive             string
	XML                 string
}{
	ID:                  "production_reports.id",
	CreateDate:          "production_reports.create_date",
	DocIddomain:         "production_reports.doc_iddomain",
	DocType:             "production_reports.doc_type",
	DocNumber:           "production_reports.doc_number",
	DocDate:             "production_reports.doc_date",
	DocProducedDate:     "production_reports.doc_produced_date",
	DocComment:          "production_reports.doc_comment",
	ProducerType:        "production_reports.producer_type",
	ProducerClientRegID: "production_reports.producer_client_reg_id",
	ProducerInn:         "production_reports.producer_inn",
	ProducerKPP:         "production_reports.producer_kpp",
	ProducerFullName:    "production_reports.producer_full_name",
	ProducerShortName:   "production_reports.producer_short_name",
	ProducerCountryCode: "production_reports.producer_country_code",
	ProducerRegionCode:  "production_reports.producer_region_code",
	ProducerDescription: "production_reports.producer_description",
	Version:             "production_reports.version",
	State:               "production_reports.state",
	Status:              "production_reports.status",
	ReplyID:             "production_reports.reply_id",
	Archive:             "production_reports.archive",
	XML:                 "production_reports.xml",
}

// Generated where

var ProductionReportWhere = struct {
	ID                  whereHelperint
	CreateDate          whereHelpernull_String
	DocIddomain         whereHelpernull_String
	DocType             whereHelpernull_String
	DocNumber           whereHelpernull_String
	DocDate             whereHelpernull_String
	DocProducedDate     whereHelpernull_String
	DocComment          whereHelpernull_String
	ProducerType        whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	ProducerInn         whereHelpernull_String
	ProducerKPP         whereHelpernull_String
	ProducerFullName    whereHelpernull_String
	ProducerShortName   whereHelpernull_String
	ProducerCountryCode whereHelpernull_String
	ProducerRegionCode  whereHelpernull_String
	ProducerDescription whereHelpernull_String
	Version             whereHelpernull_String
	State               whereHelpernull_String
	Status              whereHelpernull_String
	ReplyID             whereHelpernull_String
	Archive             whereHelpernull_Int
	XML                 whereHelpernull_String
}{
	ID:                  whereHelperint{field: "[dbo].[production_reports].[id]"},
	CreateDate:          whereHelpernull_String{field: "[dbo].[production_reports].[create_date]"},
	DocIddomain:         whereHelpernull_String{field: "[dbo].[production_reports].[doc_iddomain]"},
	DocType:             whereHelpernull_String{field: "[dbo].[production_reports].[doc_type]"},
	DocNumber:           whereHelpernull_String{field: "[dbo].[production_reports].[doc_number]"},
	DocDate:             whereHelpernull_String{field: "[dbo].[production_reports].[doc_date]"},
	DocProducedDate:     whereHelpernull_String{field: "[dbo].[production_reports].[doc_produced_date]"},
	DocComment:          whereHelpernull_String{field: "[dbo].[production_reports].[doc_comment]"},
	ProducerType:        whereHelpernull_String{field: "[dbo].[production_reports].[producer_type]"},
	ProducerClientRegID: whereHelpernull_String{field: "[dbo].[production_reports].[producer_client_reg_id]"},
	ProducerInn:         whereHelpernull_String{field: "[dbo].[production_reports].[producer_inn]"},
	ProducerKPP:         whereHelpernull_String{field: "[dbo].[production_reports].[producer_kpp]"},
	ProducerFullName:    whereHelpernull_String{field: "[dbo].[production_reports].[producer_full_name]"},
	ProducerShortName:   whereHelpernull_String{field: "[dbo].[production_reports].[producer_short_name]"},
	ProducerCountryCode: whereHelpernull_String{field: "[dbo].[production_reports].[producer_country_code]"},
	ProducerRegionCode:  whereHelpernull_String{field: "[dbo].[production_reports].[producer_region_code]"},
	ProducerDescription: whereHelpernull_String{field: "[dbo].[production_reports].[producer_description]"},
	Version:             whereHelpernull_String{field: "[dbo].[production_reports].[version]"},
	State:               whereHelpernull_String{field: "[dbo].[production_reports].[state]"},
	Status:              whereHelpernull_String{field: "[dbo].[production_reports].[status]"},
	ReplyID:             whereHelpernull_String{field: "[dbo].[production_reports].[reply_id]"},
	Archive:             whereHelpernull_Int{field: "[dbo].[production_reports].[archive]"},
	XML:                 whereHelpernull_String{field: "[dbo].[production_reports].[xml]"},
}

// ProductionReportRels is where relationship names are stored.
var ProductionReportRels = struct {
}{}

// productionReportR is where relationships are stored.
type productionReportR struct {
}

// NewStruct creates a new relationship struct
func (*productionReportR) NewStruct() *productionReportR {
	return &productionReportR{}
}

// productionReportL is where Load methods for each relationship are stored.
type productionReportL struct{}

var (
	productionReportAllColumns            = []string{"id", "create_date", "doc_iddomain", "doc_type", "doc_number", "doc_date", "doc_produced_date", "doc_comment", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description", "version", "state", "status", "reply_id", "archive", "xml"}
	productionReportColumnsWithoutDefault = []string{"create_date", "doc_iddomain", "doc_type", "doc_number", "doc_date", "doc_produced_date", "doc_comment", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description", "version", "state", "status", "reply_id", "archive", "xml"}
	productionReportColumnsWithDefault    = []string{"id"}
	productionReportPrimaryKeyColumns     = []string{"id"}
	productionReportGeneratedColumns      = []string{"id"}
)

type (
	// ProductionReportSlice is an alias for a slice of pointers to ProductionReport.
	// This should almost always be used instead of []ProductionReport.
	ProductionReportSlice []*ProductionReport
	// ProductionReportHook is the signature for custom ProductionReport hook methods
	ProductionReportHook func(context.Context, boil.ContextExecutor, *ProductionReport) error

	productionReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionReportType                 = reflect.TypeOf(&ProductionReport{})
	productionReportMapping              = queries.MakeStructMapping(productionReportType)
	productionReportPrimaryKeyMapping, _ = queries.BindMapping(productionReportType, productionReportMapping, productionReportPrimaryKeyColumns)
	productionReportInsertCacheMut       sync.RWMutex
	productionReportInsertCache          = make(map[string]insertCache)
	productionReportUpdateCacheMut       sync.RWMutex
	productionReportUpdateCache          = make(map[string]updateCache)
	productionReportUpsertCacheMut       sync.RWMutex
	productionReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionReportAfterSelectMu sync.Mutex
var productionReportAfterSelectHooks []ProductionReportHook

var productionReportBeforeInsertMu sync.Mutex
var productionReportBeforeInsertHooks []ProductionReportHook
var productionReportAfterInsertMu sync.Mutex
var productionReportAfterInsertHooks []ProductionReportHook

var productionReportBeforeUpdateMu sync.Mutex
var productionReportBeforeUpdateHooks []ProductionReportHook
var productionReportAfterUpdateMu sync.Mutex
var productionReportAfterUpdateHooks []ProductionReportHook

var productionReportBeforeDeleteMu sync.Mutex
var productionReportBeforeDeleteHooks []ProductionReportHook
var productionReportAfterDeleteMu sync.Mutex
var productionReportAfterDeleteHooks []ProductionReportHook

var productionReportBeforeUpsertMu sync.Mutex
var productionReportBeforeUpsertHooks []ProductionReportHook
var productionReportAfterUpsertMu sync.Mutex
var productionReportAfterUpsertHooks []ProductionReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionReportHook registers your hook function for all future operations.
func AddProductionReportHook(hookPoint boil.HookPoint, productionReportHook ProductionReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionReportAfterSelectMu.Lock()
		productionReportAfterSelectHooks = append(productionReportAfterSelectHooks, productionReportHook)
		productionReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionReportBeforeInsertMu.Lock()
		productionReportBeforeInsertHooks = append(productionReportBeforeInsertHooks, productionReportHook)
		productionReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionReportAfterInsertMu.Lock()
		productionReportAfterInsertHooks = append(productionReportAfterInsertHooks, productionReportHook)
		productionReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionReportBeforeUpdateMu.Lock()
		productionReportBeforeUpdateHooks = append(productionReportBeforeUpdateHooks, productionReportHook)
		productionReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionReportAfterUpdateMu.Lock()
		productionReportAfterUpdateHooks = append(productionReportAfterUpdateHooks, productionReportHook)
		productionReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionReportBeforeDeleteMu.Lock()
		productionReportBeforeDeleteHooks = append(productionReportBeforeDeleteHooks, productionReportHook)
		productionReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionReportAfterDeleteMu.Lock()
		productionReportAfterDeleteHooks = append(productionReportAfterDeleteHooks, productionReportHook)
		productionReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionReportBeforeUpsertMu.Lock()
		productionReportBeforeUpsertHooks = append(productionReportBeforeUpsertHooks, productionReportHook)
		productionReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionReportAfterUpsertMu.Lock()
		productionReportAfterUpsertHooks = append(productionReportAfterUpsertHooks, productionReportHook)
		productionReportAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionReport record from the query using the global executor.
func (q productionReportQuery) OneG(ctx context.Context) (*ProductionReport, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionReport record from the query.
func (q productionReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionReport, error) {
	o := &ProductionReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_reports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionReport records from the query using the global executor.
func (q productionReportQuery) AllG(ctx context.Context) (ProductionReportSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionReport records from the query.
func (q productionReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionReportSlice, error) {
	var o []*ProductionReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionReport slice")
	}

	if len(productionReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionReport records in the query using the global executor
func (q productionReportQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionReport records in the query.
func (q productionReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_reports rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionReportQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_reports exists")
	}

	return count > 0, nil
}

// ProductionReports retrieves all the records using an executor.
func ProductionReports(mods ...qm.QueryMod) productionReportQuery {
	mods = append(mods, qm.From("[dbo].[production_reports]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[production_reports].*"})
	}

	return productionReportQuery{q}
}

// FindProductionReportG retrieves a single record by ID.
func FindProductionReportG(ctx context.Context, iD int, selectCols ...string) (*ProductionReport, error) {
	return FindProductionReport(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionReport(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProductionReport, error) {
	productionReportObj := &ProductionReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[production_reports] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_reports")
	}

	if err = productionReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionReportObj, err
	}

	return productionReportObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionReport) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_reports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionReportInsertCacheMut.RLock()
	cache, cached := productionReportInsertCache[key]
	productionReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionReportAllColumns,
			productionReportColumnsWithDefault,
			productionReportColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionReportGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionReportType, productionReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionReportType, productionReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[production_reports] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[production_reports] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_reports")
	}

	if !cached {
		productionReportInsertCacheMut.Lock()
		productionReportInsertCache[key] = cache
		productionReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionReport record using the global executor.
// See Update for more documentation.
func (o *ProductionReport) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionReportUpdateCacheMut.RLock()
	cache, cached := productionReportUpdateCache[key]
	productionReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionReportAllColumns,
			productionReportPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionReportGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[production_reports] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, productionReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionReportType, productionReportMapping, append(wl, productionReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_reports")
	}

	if !cached {
		productionReportUpdateCacheMut.Lock()
		productionReportUpdateCache[key] = cache
		productionReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionReportQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_reports")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionReportSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[production_reports] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productionReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionReport")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionReport) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ProductionReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_reports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionReportUpsertCacheMut.RLock()
	cache, cached := productionReportUpsertCache[key]
	productionReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productionReportAllColumns,
			productionReportColumnsWithDefault,
			productionReportColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, productionReportGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(productionReportPrimaryKeyColumns, v) && strmangle.ContainsAny(productionReportColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert production_reports, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			productionReportAllColumns,
			productionReportPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productionReportGeneratedColumns)

		ret := strmangle.SetComplement(productionReportAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_reports, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[production_reports]", productionReportPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(productionReportPrimaryKeyColumns))
		copy(whitelist, productionReportPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(productionReportType, productionReportMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionReportType, productionReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_reports")
	}

	if !cached {
		productionReportUpsertCacheMut.Lock()
		productionReportUpsertCache[key] = cache
		productionReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionReport record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionReport) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionReportPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[production_reports] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_reports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionReportQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_reports")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionReportSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[production_reports] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productionReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_reports")
	}

	if len(productionReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionReport) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionReport provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionReportSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionReportSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[production_reports].* FROM [dbo].[production_reports] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productionReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionReportSlice")
	}

	*o = slice

	return nil
}

// ProductionReportExistsG checks if the ProductionReport row exists.
func ProductionReportExistsG(ctx context.Context, iD int) (bool, error) {
	return ProductionReportExists(ctx, boil.GetContextDB(), iD)
}

// ProductionReportExists checks if the ProductionReport row exists.
func ProductionReportExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[production_reports] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_reports exists")
	}

	return exists, nil
}

// Exists checks if the ProductionReport row exists.
func (o *ProductionReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionReportExists(ctx, exec, o.ID)
}
