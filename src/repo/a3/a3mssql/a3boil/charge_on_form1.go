// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChargeOnForm1 is an object representing the database table.
type ChargeOnForm1 struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDChargeOnActs null.Int    `boil:"id_charge_on_acts" json:"id_charge_on_acts,omitempty" toml:"id_charge_on_acts" yaml:"id_charge_on_acts,omitempty"`
	DocIddomain    null.String `boil:"doc_iddomain" json:"doc_iddomain,omitempty" toml:"doc_iddomain" yaml:"doc_iddomain,omitempty"`
	DocRegID       null.String `boil:"doc_reg_id" json:"doc_reg_id,omitempty" toml:"doc_reg_id" yaml:"doc_reg_id,omitempty"`
	DocNumber      null.String `boil:"doc_number" json:"doc_number,omitempty" toml:"doc_number" yaml:"doc_number,omitempty"`
	XML            null.String `boil:"xml" json:"xml,omitempty" toml:"xml" yaml:"xml,omitempty"`

	R *chargeOnForm1R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chargeOnForm1L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChargeOnForm1Columns = struct {
	ID             string
	IDChargeOnActs string
	DocIddomain    string
	DocRegID       string
	DocNumber      string
	XML            string
}{
	ID:             "id",
	IDChargeOnActs: "id_charge_on_acts",
	DocIddomain:    "doc_iddomain",
	DocRegID:       "doc_reg_id",
	DocNumber:      "doc_number",
	XML:            "xml",
}

var ChargeOnForm1TableColumns = struct {
	ID             string
	IDChargeOnActs string
	DocIddomain    string
	DocRegID       string
	DocNumber      string
	XML            string
}{
	ID:             "charge_on_form1.id",
	IDChargeOnActs: "charge_on_form1.id_charge_on_acts",
	DocIddomain:    "charge_on_form1.doc_iddomain",
	DocRegID:       "charge_on_form1.doc_reg_id",
	DocNumber:      "charge_on_form1.doc_number",
	XML:            "charge_on_form1.xml",
}

// Generated where

var ChargeOnForm1Where = struct {
	ID             whereHelperint
	IDChargeOnActs whereHelpernull_Int
	DocIddomain    whereHelpernull_String
	DocRegID       whereHelpernull_String
	DocNumber      whereHelpernull_String
	XML            whereHelpernull_String
}{
	ID:             whereHelperint{field: "[dbo].[charge_on_form1].[id]"},
	IDChargeOnActs: whereHelpernull_Int{field: "[dbo].[charge_on_form1].[id_charge_on_acts]"},
	DocIddomain:    whereHelpernull_String{field: "[dbo].[charge_on_form1].[doc_iddomain]"},
	DocRegID:       whereHelpernull_String{field: "[dbo].[charge_on_form1].[doc_reg_id]"},
	DocNumber:      whereHelpernull_String{field: "[dbo].[charge_on_form1].[doc_number]"},
	XML:            whereHelpernull_String{field: "[dbo].[charge_on_form1].[xml]"},
}

// ChargeOnForm1Rels is where relationship names are stored.
var ChargeOnForm1Rels = struct {
}{}

// chargeOnForm1R is where relationships are stored.
type chargeOnForm1R struct {
}

// NewStruct creates a new relationship struct
func (*chargeOnForm1R) NewStruct() *chargeOnForm1R {
	return &chargeOnForm1R{}
}

// chargeOnForm1L is where Load methods for each relationship are stored.
type chargeOnForm1L struct{}

var (
	chargeOnForm1AllColumns            = []string{"id", "id_charge_on_acts", "doc_iddomain", "doc_reg_id", "doc_number", "xml"}
	chargeOnForm1ColumnsWithoutDefault = []string{"id_charge_on_acts", "doc_iddomain", "doc_reg_id", "doc_number", "xml"}
	chargeOnForm1ColumnsWithDefault    = []string{"id"}
	chargeOnForm1PrimaryKeyColumns     = []string{"id"}
	chargeOnForm1GeneratedColumns      = []string{"id"}
)

type (
	// ChargeOnForm1Slice is an alias for a slice of pointers to ChargeOnForm1.
	// This should almost always be used instead of []ChargeOnForm1.
	ChargeOnForm1Slice []*ChargeOnForm1
	// ChargeOnForm1Hook is the signature for custom ChargeOnForm1 hook methods
	ChargeOnForm1Hook func(context.Context, boil.ContextExecutor, *ChargeOnForm1) error

	chargeOnForm1Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chargeOnForm1Type                 = reflect.TypeOf(&ChargeOnForm1{})
	chargeOnForm1Mapping              = queries.MakeStructMapping(chargeOnForm1Type)
	chargeOnForm1PrimaryKeyMapping, _ = queries.BindMapping(chargeOnForm1Type, chargeOnForm1Mapping, chargeOnForm1PrimaryKeyColumns)
	chargeOnForm1InsertCacheMut       sync.RWMutex
	chargeOnForm1InsertCache          = make(map[string]insertCache)
	chargeOnForm1UpdateCacheMut       sync.RWMutex
	chargeOnForm1UpdateCache          = make(map[string]updateCache)
	chargeOnForm1UpsertCacheMut       sync.RWMutex
	chargeOnForm1UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chargeOnForm1AfterSelectMu sync.Mutex
var chargeOnForm1AfterSelectHooks []ChargeOnForm1Hook

var chargeOnForm1BeforeInsertMu sync.Mutex
var chargeOnForm1BeforeInsertHooks []ChargeOnForm1Hook
var chargeOnForm1AfterInsertMu sync.Mutex
var chargeOnForm1AfterInsertHooks []ChargeOnForm1Hook

var chargeOnForm1BeforeUpdateMu sync.Mutex
var chargeOnForm1BeforeUpdateHooks []ChargeOnForm1Hook
var chargeOnForm1AfterUpdateMu sync.Mutex
var chargeOnForm1AfterUpdateHooks []ChargeOnForm1Hook

var chargeOnForm1BeforeDeleteMu sync.Mutex
var chargeOnForm1BeforeDeleteHooks []ChargeOnForm1Hook
var chargeOnForm1AfterDeleteMu sync.Mutex
var chargeOnForm1AfterDeleteHooks []ChargeOnForm1Hook

var chargeOnForm1BeforeUpsertMu sync.Mutex
var chargeOnForm1BeforeUpsertHooks []ChargeOnForm1Hook
var chargeOnForm1AfterUpsertMu sync.Mutex
var chargeOnForm1AfterUpsertHooks []ChargeOnForm1Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChargeOnForm1) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChargeOnForm1) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChargeOnForm1) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChargeOnForm1) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChargeOnForm1) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChargeOnForm1) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChargeOnForm1) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChargeOnForm1) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChargeOnForm1) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeOnForm1AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChargeOnForm1Hook registers your hook function for all future operations.
func AddChargeOnForm1Hook(hookPoint boil.HookPoint, chargeOnForm1Hook ChargeOnForm1Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chargeOnForm1AfterSelectMu.Lock()
		chargeOnForm1AfterSelectHooks = append(chargeOnForm1AfterSelectHooks, chargeOnForm1Hook)
		chargeOnForm1AfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chargeOnForm1BeforeInsertMu.Lock()
		chargeOnForm1BeforeInsertHooks = append(chargeOnForm1BeforeInsertHooks, chargeOnForm1Hook)
		chargeOnForm1BeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chargeOnForm1AfterInsertMu.Lock()
		chargeOnForm1AfterInsertHooks = append(chargeOnForm1AfterInsertHooks, chargeOnForm1Hook)
		chargeOnForm1AfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chargeOnForm1BeforeUpdateMu.Lock()
		chargeOnForm1BeforeUpdateHooks = append(chargeOnForm1BeforeUpdateHooks, chargeOnForm1Hook)
		chargeOnForm1BeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chargeOnForm1AfterUpdateMu.Lock()
		chargeOnForm1AfterUpdateHooks = append(chargeOnForm1AfterUpdateHooks, chargeOnForm1Hook)
		chargeOnForm1AfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chargeOnForm1BeforeDeleteMu.Lock()
		chargeOnForm1BeforeDeleteHooks = append(chargeOnForm1BeforeDeleteHooks, chargeOnForm1Hook)
		chargeOnForm1BeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chargeOnForm1AfterDeleteMu.Lock()
		chargeOnForm1AfterDeleteHooks = append(chargeOnForm1AfterDeleteHooks, chargeOnForm1Hook)
		chargeOnForm1AfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chargeOnForm1BeforeUpsertMu.Lock()
		chargeOnForm1BeforeUpsertHooks = append(chargeOnForm1BeforeUpsertHooks, chargeOnForm1Hook)
		chargeOnForm1BeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chargeOnForm1AfterUpsertMu.Lock()
		chargeOnForm1AfterUpsertHooks = append(chargeOnForm1AfterUpsertHooks, chargeOnForm1Hook)
		chargeOnForm1AfterUpsertMu.Unlock()
	}
}

// OneG returns a single chargeOnForm1 record from the query using the global executor.
func (q chargeOnForm1Query) OneG(ctx context.Context) (*ChargeOnForm1, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single chargeOnForm1 record from the query.
func (q chargeOnForm1Query) One(ctx context.Context, exec boil.ContextExecutor) (*ChargeOnForm1, error) {
	o := &ChargeOnForm1{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for charge_on_form1")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ChargeOnForm1 records from the query using the global executor.
func (q chargeOnForm1Query) AllG(ctx context.Context) (ChargeOnForm1Slice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ChargeOnForm1 records from the query.
func (q chargeOnForm1Query) All(ctx context.Context, exec boil.ContextExecutor) (ChargeOnForm1Slice, error) {
	var o []*ChargeOnForm1

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ChargeOnForm1 slice")
	}

	if len(chargeOnForm1AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ChargeOnForm1 records in the query using the global executor
func (q chargeOnForm1Query) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ChargeOnForm1 records in the query.
func (q chargeOnForm1Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count charge_on_form1 rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q chargeOnForm1Query) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chargeOnForm1Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if charge_on_form1 exists")
	}

	return count > 0, nil
}

// ChargeOnForm1s retrieves all the records using an executor.
func ChargeOnForm1s(mods ...qm.QueryMod) chargeOnForm1Query {
	mods = append(mods, qm.From("[dbo].[charge_on_form1]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[charge_on_form1].*"})
	}

	return chargeOnForm1Query{q}
}

// FindChargeOnForm1G retrieves a single record by ID.
func FindChargeOnForm1G(ctx context.Context, iD int, selectCols ...string) (*ChargeOnForm1, error) {
	return FindChargeOnForm1(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindChargeOnForm1 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChargeOnForm1(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ChargeOnForm1, error) {
	chargeOnForm1Obj := &ChargeOnForm1{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[charge_on_form1] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chargeOnForm1Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from charge_on_form1")
	}

	if err = chargeOnForm1Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return chargeOnForm1Obj, err
	}

	return chargeOnForm1Obj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ChargeOnForm1) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChargeOnForm1) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_form1 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnForm1ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chargeOnForm1InsertCacheMut.RLock()
	cache, cached := chargeOnForm1InsertCache[key]
	chargeOnForm1InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chargeOnForm1AllColumns,
			chargeOnForm1ColumnsWithDefault,
			chargeOnForm1ColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chargeOnForm1GeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chargeOnForm1Type, chargeOnForm1Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chargeOnForm1Type, chargeOnForm1Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[charge_on_form1] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[charge_on_form1] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into charge_on_form1")
	}

	if !cached {
		chargeOnForm1InsertCacheMut.Lock()
		chargeOnForm1InsertCache[key] = cache
		chargeOnForm1InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ChargeOnForm1 record using the global executor.
// See Update for more documentation.
func (o *ChargeOnForm1) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ChargeOnForm1.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChargeOnForm1) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chargeOnForm1UpdateCacheMut.RLock()
	cache, cached := chargeOnForm1UpdateCache[key]
	chargeOnForm1UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chargeOnForm1AllColumns,
			chargeOnForm1PrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chargeOnForm1GeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update charge_on_form1, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[charge_on_form1] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, chargeOnForm1PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chargeOnForm1Type, chargeOnForm1Mapping, append(wl, chargeOnForm1PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update charge_on_form1 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for charge_on_form1")
	}

	if !cached {
		chargeOnForm1UpdateCacheMut.Lock()
		chargeOnForm1UpdateCache[key] = cache
		chargeOnForm1UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chargeOnForm1Query) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chargeOnForm1Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for charge_on_form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for charge_on_form1")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChargeOnForm1Slice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChargeOnForm1Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnForm1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[charge_on_form1] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chargeOnForm1PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in chargeOnForm1 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all chargeOnForm1")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ChargeOnForm1) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ChargeOnForm1) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no charge_on_form1 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeOnForm1ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chargeOnForm1UpsertCacheMut.RLock()
	cache, cached := chargeOnForm1UpsertCache[key]
	chargeOnForm1UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chargeOnForm1AllColumns,
			chargeOnForm1ColumnsWithDefault,
			chargeOnForm1ColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, chargeOnForm1GeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(chargeOnForm1PrimaryKeyColumns, v) && strmangle.ContainsAny(chargeOnForm1ColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert charge_on_form1, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			chargeOnForm1AllColumns,
			chargeOnForm1PrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, chargeOnForm1GeneratedColumns)

		ret := strmangle.SetComplement(chargeOnForm1AllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert charge_on_form1, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[charge_on_form1]", chargeOnForm1PrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(chargeOnForm1PrimaryKeyColumns))
		copy(whitelist, chargeOnForm1PrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(chargeOnForm1Type, chargeOnForm1Mapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chargeOnForm1Type, chargeOnForm1Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert charge_on_form1")
	}

	if !cached {
		chargeOnForm1UpsertCacheMut.Lock()
		chargeOnForm1UpsertCache[key] = cache
		chargeOnForm1UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ChargeOnForm1 record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ChargeOnForm1) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ChargeOnForm1 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChargeOnForm1) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ChargeOnForm1 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chargeOnForm1PrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[charge_on_form1] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from charge_on_form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for charge_on_form1")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chargeOnForm1Query) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q chargeOnForm1Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no chargeOnForm1Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from charge_on_form1")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_form1")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChargeOnForm1Slice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChargeOnForm1Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chargeOnForm1BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnForm1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[charge_on_form1] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chargeOnForm1PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from chargeOnForm1 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for charge_on_form1")
	}

	if len(chargeOnForm1AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ChargeOnForm1) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ChargeOnForm1 provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChargeOnForm1) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChargeOnForm1(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnForm1Slice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ChargeOnForm1Slice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeOnForm1Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChargeOnForm1Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargeOnForm1PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[charge_on_form1].* FROM [dbo].[charge_on_form1] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chargeOnForm1PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ChargeOnForm1Slice")
	}

	*o = slice

	return nil
}

// ChargeOnForm1ExistsG checks if the ChargeOnForm1 row exists.
func ChargeOnForm1ExistsG(ctx context.Context, iD int) (bool, error) {
	return ChargeOnForm1Exists(ctx, boil.GetContextDB(), iD)
}

// ChargeOnForm1Exists checks if the ChargeOnForm1 row exists.
func ChargeOnForm1Exists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[charge_on_form1] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if charge_on_form1 exists")
	}

	return exists, nil
}

// Exists checks if the ChargeOnForm1 row exists.
func (o *ChargeOnForm1) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChargeOnForm1Exists(ctx, exec, o.ID)
}
