// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WriteOffProductsBox is an object representing the database table.
type WriteOffProductsBox struct {
	ID                        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDWriteOffProducts        null.Int    `boil:"id_write_off_products" json:"id_write_off_products,omitempty" toml:"id_write_off_products" yaml:"id_write_off_products,omitempty"`
	IDWriteOffProductsPallets null.Int    `boil:"id_write_off_products_pallets" json:"id_write_off_products_pallets,omitempty" toml:"id_write_off_products_pallets" yaml:"id_write_off_products_pallets,omitempty"`
	BoxNumber                 null.String `boil:"box_number" json:"box_number,omitempty" toml:"box_number" yaml:"box_number,omitempty"`

	R *writeOffProductsBoxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L writeOffProductsBoxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WriteOffProductsBoxColumns = struct {
	ID                        string
	IDWriteOffProducts        string
	IDWriteOffProductsPallets string
	BoxNumber                 string
}{
	ID:                        "id",
	IDWriteOffProducts:        "id_write_off_products",
	IDWriteOffProductsPallets: "id_write_off_products_pallets",
	BoxNumber:                 "box_number",
}

var WriteOffProductsBoxTableColumns = struct {
	ID                        string
	IDWriteOffProducts        string
	IDWriteOffProductsPallets string
	BoxNumber                 string
}{
	ID:                        "write_off_products_boxes.id",
	IDWriteOffProducts:        "write_off_products_boxes.id_write_off_products",
	IDWriteOffProductsPallets: "write_off_products_boxes.id_write_off_products_pallets",
	BoxNumber:                 "write_off_products_boxes.box_number",
}

// Generated where

var WriteOffProductsBoxWhere = struct {
	ID                        whereHelperint
	IDWriteOffProducts        whereHelpernull_Int
	IDWriteOffProductsPallets whereHelpernull_Int
	BoxNumber                 whereHelpernull_String
}{
	ID:                        whereHelperint{field: "[dbo].[write_off_products_boxes].[id]"},
	IDWriteOffProducts:        whereHelpernull_Int{field: "[dbo].[write_off_products_boxes].[id_write_off_products]"},
	IDWriteOffProductsPallets: whereHelpernull_Int{field: "[dbo].[write_off_products_boxes].[id_write_off_products_pallets]"},
	BoxNumber:                 whereHelpernull_String{field: "[dbo].[write_off_products_boxes].[box_number]"},
}

// WriteOffProductsBoxRels is where relationship names are stored.
var WriteOffProductsBoxRels = struct {
}{}

// writeOffProductsBoxR is where relationships are stored.
type writeOffProductsBoxR struct {
}

// NewStruct creates a new relationship struct
func (*writeOffProductsBoxR) NewStruct() *writeOffProductsBoxR {
	return &writeOffProductsBoxR{}
}

// writeOffProductsBoxL is where Load methods for each relationship are stored.
type writeOffProductsBoxL struct{}

var (
	writeOffProductsBoxAllColumns            = []string{"id", "id_write_off_products", "id_write_off_products_pallets", "box_number"}
	writeOffProductsBoxColumnsWithoutDefault = []string{"id_write_off_products", "id_write_off_products_pallets", "box_number"}
	writeOffProductsBoxColumnsWithDefault    = []string{"id"}
	writeOffProductsBoxPrimaryKeyColumns     = []string{"id"}
	writeOffProductsBoxGeneratedColumns      = []string{"id"}
)

type (
	// WriteOffProductsBoxSlice is an alias for a slice of pointers to WriteOffProductsBox.
	// This should almost always be used instead of []WriteOffProductsBox.
	WriteOffProductsBoxSlice []*WriteOffProductsBox
	// WriteOffProductsBoxHook is the signature for custom WriteOffProductsBox hook methods
	WriteOffProductsBoxHook func(context.Context, boil.ContextExecutor, *WriteOffProductsBox) error

	writeOffProductsBoxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	writeOffProductsBoxType                 = reflect.TypeOf(&WriteOffProductsBox{})
	writeOffProductsBoxMapping              = queries.MakeStructMapping(writeOffProductsBoxType)
	writeOffProductsBoxPrimaryKeyMapping, _ = queries.BindMapping(writeOffProductsBoxType, writeOffProductsBoxMapping, writeOffProductsBoxPrimaryKeyColumns)
	writeOffProductsBoxInsertCacheMut       sync.RWMutex
	writeOffProductsBoxInsertCache          = make(map[string]insertCache)
	writeOffProductsBoxUpdateCacheMut       sync.RWMutex
	writeOffProductsBoxUpdateCache          = make(map[string]updateCache)
	writeOffProductsBoxUpsertCacheMut       sync.RWMutex
	writeOffProductsBoxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var writeOffProductsBoxAfterSelectMu sync.Mutex
var writeOffProductsBoxAfterSelectHooks []WriteOffProductsBoxHook

var writeOffProductsBoxBeforeInsertMu sync.Mutex
var writeOffProductsBoxBeforeInsertHooks []WriteOffProductsBoxHook
var writeOffProductsBoxAfterInsertMu sync.Mutex
var writeOffProductsBoxAfterInsertHooks []WriteOffProductsBoxHook

var writeOffProductsBoxBeforeUpdateMu sync.Mutex
var writeOffProductsBoxBeforeUpdateHooks []WriteOffProductsBoxHook
var writeOffProductsBoxAfterUpdateMu sync.Mutex
var writeOffProductsBoxAfterUpdateHooks []WriteOffProductsBoxHook

var writeOffProductsBoxBeforeDeleteMu sync.Mutex
var writeOffProductsBoxBeforeDeleteHooks []WriteOffProductsBoxHook
var writeOffProductsBoxAfterDeleteMu sync.Mutex
var writeOffProductsBoxAfterDeleteHooks []WriteOffProductsBoxHook

var writeOffProductsBoxBeforeUpsertMu sync.Mutex
var writeOffProductsBoxBeforeUpsertHooks []WriteOffProductsBoxHook
var writeOffProductsBoxAfterUpsertMu sync.Mutex
var writeOffProductsBoxAfterUpsertHooks []WriteOffProductsBoxHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WriteOffProductsBox) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WriteOffProductsBox) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WriteOffProductsBox) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WriteOffProductsBox) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WriteOffProductsBox) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WriteOffProductsBox) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WriteOffProductsBox) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WriteOffProductsBox) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WriteOffProductsBox) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range writeOffProductsBoxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWriteOffProductsBoxHook registers your hook function for all future operations.
func AddWriteOffProductsBoxHook(hookPoint boil.HookPoint, writeOffProductsBoxHook WriteOffProductsBoxHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		writeOffProductsBoxAfterSelectMu.Lock()
		writeOffProductsBoxAfterSelectHooks = append(writeOffProductsBoxAfterSelectHooks, writeOffProductsBoxHook)
		writeOffProductsBoxAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		writeOffProductsBoxBeforeInsertMu.Lock()
		writeOffProductsBoxBeforeInsertHooks = append(writeOffProductsBoxBeforeInsertHooks, writeOffProductsBoxHook)
		writeOffProductsBoxBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		writeOffProductsBoxAfterInsertMu.Lock()
		writeOffProductsBoxAfterInsertHooks = append(writeOffProductsBoxAfterInsertHooks, writeOffProductsBoxHook)
		writeOffProductsBoxAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		writeOffProductsBoxBeforeUpdateMu.Lock()
		writeOffProductsBoxBeforeUpdateHooks = append(writeOffProductsBoxBeforeUpdateHooks, writeOffProductsBoxHook)
		writeOffProductsBoxBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		writeOffProductsBoxAfterUpdateMu.Lock()
		writeOffProductsBoxAfterUpdateHooks = append(writeOffProductsBoxAfterUpdateHooks, writeOffProductsBoxHook)
		writeOffProductsBoxAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		writeOffProductsBoxBeforeDeleteMu.Lock()
		writeOffProductsBoxBeforeDeleteHooks = append(writeOffProductsBoxBeforeDeleteHooks, writeOffProductsBoxHook)
		writeOffProductsBoxBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		writeOffProductsBoxAfterDeleteMu.Lock()
		writeOffProductsBoxAfterDeleteHooks = append(writeOffProductsBoxAfterDeleteHooks, writeOffProductsBoxHook)
		writeOffProductsBoxAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		writeOffProductsBoxBeforeUpsertMu.Lock()
		writeOffProductsBoxBeforeUpsertHooks = append(writeOffProductsBoxBeforeUpsertHooks, writeOffProductsBoxHook)
		writeOffProductsBoxBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		writeOffProductsBoxAfterUpsertMu.Lock()
		writeOffProductsBoxAfterUpsertHooks = append(writeOffProductsBoxAfterUpsertHooks, writeOffProductsBoxHook)
		writeOffProductsBoxAfterUpsertMu.Unlock()
	}
}

// OneG returns a single writeOffProductsBox record from the query using the global executor.
func (q writeOffProductsBoxQuery) OneG(ctx context.Context) (*WriteOffProductsBox, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single writeOffProductsBox record from the query.
func (q writeOffProductsBoxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WriteOffProductsBox, error) {
	o := &WriteOffProductsBox{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for write_off_products_boxes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all WriteOffProductsBox records from the query using the global executor.
func (q writeOffProductsBoxQuery) AllG(ctx context.Context) (WriteOffProductsBoxSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all WriteOffProductsBox records from the query.
func (q writeOffProductsBoxQuery) All(ctx context.Context, exec boil.ContextExecutor) (WriteOffProductsBoxSlice, error) {
	var o []*WriteOffProductsBox

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to WriteOffProductsBox slice")
	}

	if len(writeOffProductsBoxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all WriteOffProductsBox records in the query using the global executor
func (q writeOffProductsBoxQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all WriteOffProductsBox records in the query.
func (q writeOffProductsBoxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count write_off_products_boxes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q writeOffProductsBoxQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q writeOffProductsBoxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if write_off_products_boxes exists")
	}

	return count > 0, nil
}

// WriteOffProductsBoxes retrieves all the records using an executor.
func WriteOffProductsBoxes(mods ...qm.QueryMod) writeOffProductsBoxQuery {
	mods = append(mods, qm.From("[dbo].[write_off_products_boxes]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[write_off_products_boxes].*"})
	}

	return writeOffProductsBoxQuery{q}
}

// FindWriteOffProductsBoxG retrieves a single record by ID.
func FindWriteOffProductsBoxG(ctx context.Context, iD int, selectCols ...string) (*WriteOffProductsBox, error) {
	return FindWriteOffProductsBox(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindWriteOffProductsBox retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWriteOffProductsBox(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*WriteOffProductsBox, error) {
	writeOffProductsBoxObj := &WriteOffProductsBox{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[write_off_products_boxes] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, writeOffProductsBoxObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from write_off_products_boxes")
	}

	if err = writeOffProductsBoxObj.doAfterSelectHooks(ctx, exec); err != nil {
		return writeOffProductsBoxObj, err
	}

	return writeOffProductsBoxObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WriteOffProductsBox) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WriteOffProductsBox) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_products_boxes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffProductsBoxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	writeOffProductsBoxInsertCacheMut.RLock()
	cache, cached := writeOffProductsBoxInsertCache[key]
	writeOffProductsBoxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			writeOffProductsBoxAllColumns,
			writeOffProductsBoxColumnsWithDefault,
			writeOffProductsBoxColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, writeOffProductsBoxGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(writeOffProductsBoxType, writeOffProductsBoxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(writeOffProductsBoxType, writeOffProductsBoxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[write_off_products_boxes] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[write_off_products_boxes] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into write_off_products_boxes")
	}

	if !cached {
		writeOffProductsBoxInsertCacheMut.Lock()
		writeOffProductsBoxInsertCache[key] = cache
		writeOffProductsBoxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single WriteOffProductsBox record using the global executor.
// See Update for more documentation.
func (o *WriteOffProductsBox) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the WriteOffProductsBox.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WriteOffProductsBox) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	writeOffProductsBoxUpdateCacheMut.RLock()
	cache, cached := writeOffProductsBoxUpdateCache[key]
	writeOffProductsBoxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			writeOffProductsBoxAllColumns,
			writeOffProductsBoxPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, writeOffProductsBoxGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update write_off_products_boxes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[write_off_products_boxes] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, writeOffProductsBoxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(writeOffProductsBoxType, writeOffProductsBoxMapping, append(wl, writeOffProductsBoxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update write_off_products_boxes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for write_off_products_boxes")
	}

	if !cached {
		writeOffProductsBoxUpdateCacheMut.Lock()
		writeOffProductsBoxUpdateCache[key] = cache
		writeOffProductsBoxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q writeOffProductsBoxQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q writeOffProductsBoxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for write_off_products_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for write_off_products_boxes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WriteOffProductsBoxSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WriteOffProductsBoxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductsBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[write_off_products_boxes] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, writeOffProductsBoxPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in writeOffProductsBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all writeOffProductsBox")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WriteOffProductsBox) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *WriteOffProductsBox) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no write_off_products_boxes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(writeOffProductsBoxColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	writeOffProductsBoxUpsertCacheMut.RLock()
	cache, cached := writeOffProductsBoxUpsertCache[key]
	writeOffProductsBoxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			writeOffProductsBoxAllColumns,
			writeOffProductsBoxColumnsWithDefault,
			writeOffProductsBoxColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, writeOffProductsBoxGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(writeOffProductsBoxPrimaryKeyColumns, v) && strmangle.ContainsAny(writeOffProductsBoxColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert write_off_products_boxes, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			writeOffProductsBoxAllColumns,
			writeOffProductsBoxPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, writeOffProductsBoxGeneratedColumns)

		ret := strmangle.SetComplement(writeOffProductsBoxAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert write_off_products_boxes, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[write_off_products_boxes]", writeOffProductsBoxPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(writeOffProductsBoxPrimaryKeyColumns))
		copy(whitelist, writeOffProductsBoxPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(writeOffProductsBoxType, writeOffProductsBoxMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(writeOffProductsBoxType, writeOffProductsBoxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert write_off_products_boxes")
	}

	if !cached {
		writeOffProductsBoxUpsertCacheMut.Lock()
		writeOffProductsBoxUpsertCache[key] = cache
		writeOffProductsBoxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single WriteOffProductsBox record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WriteOffProductsBox) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single WriteOffProductsBox record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WriteOffProductsBox) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no WriteOffProductsBox provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), writeOffProductsBoxPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[write_off_products_boxes] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from write_off_products_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for write_off_products_boxes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q writeOffProductsBoxQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q writeOffProductsBoxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no writeOffProductsBoxQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from write_off_products_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_products_boxes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WriteOffProductsBoxSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WriteOffProductsBoxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(writeOffProductsBoxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductsBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[write_off_products_boxes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, writeOffProductsBoxPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from writeOffProductsBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for write_off_products_boxes")
	}

	if len(writeOffProductsBoxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WriteOffProductsBox) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no WriteOffProductsBox provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WriteOffProductsBox) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWriteOffProductsBox(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffProductsBoxSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty WriteOffProductsBoxSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WriteOffProductsBoxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WriteOffProductsBoxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), writeOffProductsBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[write_off_products_boxes].* FROM [dbo].[write_off_products_boxes] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, writeOffProductsBoxPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in WriteOffProductsBoxSlice")
	}

	*o = slice

	return nil
}

// WriteOffProductsBoxExistsG checks if the WriteOffProductsBox row exists.
func WriteOffProductsBoxExistsG(ctx context.Context, iD int) (bool, error) {
	return WriteOffProductsBoxExists(ctx, boil.GetContextDB(), iD)
}

// WriteOffProductsBoxExists checks if the WriteOffProductsBox row exists.
func WriteOffProductsBoxExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[write_off_products_boxes] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if write_off_products_boxes exists")
	}

	return exists, nil
}

// Exists checks if the WriteOffProductsBox row exists.
func (o *WriteOffProductsBox) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WriteOffProductsBoxExists(ctx, exec, o.ID)
}
