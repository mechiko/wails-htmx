// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNHistoriesContent is an object representing the database table.
type TTNHistoriesContent struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTNHistories     null.Int    `boil:"id_ttn_histories" json:"id_ttn_histories,omitempty" toml:"id_ttn_histories" yaml:"id_ttn_histories,omitempty"`
	Level              null.String `boil:"level" json:"level,omitempty" toml:"level" yaml:"level,omitempty"`
	ProductForm2       null.String `boil:"product_form2" json:"product_form2,omitempty" toml:"product_form2" yaml:"product_form2,omitempty"`
	ProductForm2Parent null.String `boil:"product_form2_parent" json:"product_form2_parent,omitempty" toml:"product_form2_parent" yaml:"product_form2_parent,omitempty"`
	ProductQuantity    null.String `boil:"product_quantity" json:"product_quantity,omitempty" toml:"product_quantity" yaml:"product_quantity,omitempty"`
	TTNShipper         null.String `boil:"ttn_shipper" json:"ttn_shipper,omitempty" toml:"ttn_shipper" yaml:"ttn_shipper,omitempty"`
	TTNConsignee       null.String `boil:"ttn_consignee" json:"ttn_consignee,omitempty" toml:"ttn_consignee" yaml:"ttn_consignee,omitempty"`
	TTNRegID           null.String `boil:"ttn_reg_id" json:"ttn_reg_id,omitempty" toml:"ttn_reg_id" yaml:"ttn_reg_id,omitempty"`

	R *ttnHistoriesContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnHistoriesContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNHistoriesContentColumns = struct {
	ID                 string
	IDTTNHistories     string
	Level              string
	ProductForm2       string
	ProductForm2Parent string
	ProductQuantity    string
	TTNShipper         string
	TTNConsignee       string
	TTNRegID           string
}{
	ID:                 "id",
	IDTTNHistories:     "id_ttn_histories",
	Level:              "level",
	ProductForm2:       "product_form2",
	ProductForm2Parent: "product_form2_parent",
	ProductQuantity:    "product_quantity",
	TTNShipper:         "ttn_shipper",
	TTNConsignee:       "ttn_consignee",
	TTNRegID:           "ttn_reg_id",
}

var TTNHistoriesContentTableColumns = struct {
	ID                 string
	IDTTNHistories     string
	Level              string
	ProductForm2       string
	ProductForm2Parent string
	ProductQuantity    string
	TTNShipper         string
	TTNConsignee       string
	TTNRegID           string
}{
	ID:                 "ttn_histories_content.id",
	IDTTNHistories:     "ttn_histories_content.id_ttn_histories",
	Level:              "ttn_histories_content.level",
	ProductForm2:       "ttn_histories_content.product_form2",
	ProductForm2Parent: "ttn_histories_content.product_form2_parent",
	ProductQuantity:    "ttn_histories_content.product_quantity",
	TTNShipper:         "ttn_histories_content.ttn_shipper",
	TTNConsignee:       "ttn_histories_content.ttn_consignee",
	TTNRegID:           "ttn_histories_content.ttn_reg_id",
}

// Generated where

var TTNHistoriesContentWhere = struct {
	ID                 whereHelperint
	IDTTNHistories     whereHelpernull_Int
	Level              whereHelpernull_String
	ProductForm2       whereHelpernull_String
	ProductForm2Parent whereHelpernull_String
	ProductQuantity    whereHelpernull_String
	TTNShipper         whereHelpernull_String
	TTNConsignee       whereHelpernull_String
	TTNRegID           whereHelpernull_String
}{
	ID:                 whereHelperint{field: "[dbo].[ttn_histories_content].[id]"},
	IDTTNHistories:     whereHelpernull_Int{field: "[dbo].[ttn_histories_content].[id_ttn_histories]"},
	Level:              whereHelpernull_String{field: "[dbo].[ttn_histories_content].[level]"},
	ProductForm2:       whereHelpernull_String{field: "[dbo].[ttn_histories_content].[product_form2]"},
	ProductForm2Parent: whereHelpernull_String{field: "[dbo].[ttn_histories_content].[product_form2_parent]"},
	ProductQuantity:    whereHelpernull_String{field: "[dbo].[ttn_histories_content].[product_quantity]"},
	TTNShipper:         whereHelpernull_String{field: "[dbo].[ttn_histories_content].[ttn_shipper]"},
	TTNConsignee:       whereHelpernull_String{field: "[dbo].[ttn_histories_content].[ttn_consignee]"},
	TTNRegID:           whereHelpernull_String{field: "[dbo].[ttn_histories_content].[ttn_reg_id]"},
}

// TTNHistoriesContentRels is where relationship names are stored.
var TTNHistoriesContentRels = struct {
}{}

// ttnHistoriesContentR is where relationships are stored.
type ttnHistoriesContentR struct {
}

// NewStruct creates a new relationship struct
func (*ttnHistoriesContentR) NewStruct() *ttnHistoriesContentR {
	return &ttnHistoriesContentR{}
}

// ttnHistoriesContentL is where Load methods for each relationship are stored.
type ttnHistoriesContentL struct{}

var (
	ttnHistoriesContentAllColumns            = []string{"id", "id_ttn_histories", "level", "product_form2", "product_form2_parent", "product_quantity", "ttn_shipper", "ttn_consignee", "ttn_reg_id"}
	ttnHistoriesContentColumnsWithoutDefault = []string{"id_ttn_histories", "level", "product_form2", "product_form2_parent", "product_quantity", "ttn_shipper", "ttn_consignee", "ttn_reg_id"}
	ttnHistoriesContentColumnsWithDefault    = []string{"id"}
	ttnHistoriesContentPrimaryKeyColumns     = []string{"id"}
	ttnHistoriesContentGeneratedColumns      = []string{"id"}
)

type (
	// TTNHistoriesContentSlice is an alias for a slice of pointers to TTNHistoriesContent.
	// This should almost always be used instead of []TTNHistoriesContent.
	TTNHistoriesContentSlice []*TTNHistoriesContent
	// TTNHistoriesContentHook is the signature for custom TTNHistoriesContent hook methods
	TTNHistoriesContentHook func(context.Context, boil.ContextExecutor, *TTNHistoriesContent) error

	ttnHistoriesContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnHistoriesContentType                 = reflect.TypeOf(&TTNHistoriesContent{})
	ttnHistoriesContentMapping              = queries.MakeStructMapping(ttnHistoriesContentType)
	ttnHistoriesContentPrimaryKeyMapping, _ = queries.BindMapping(ttnHistoriesContentType, ttnHistoriesContentMapping, ttnHistoriesContentPrimaryKeyColumns)
	ttnHistoriesContentInsertCacheMut       sync.RWMutex
	ttnHistoriesContentInsertCache          = make(map[string]insertCache)
	ttnHistoriesContentUpdateCacheMut       sync.RWMutex
	ttnHistoriesContentUpdateCache          = make(map[string]updateCache)
	ttnHistoriesContentUpsertCacheMut       sync.RWMutex
	ttnHistoriesContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnHistoriesContentAfterSelectMu sync.Mutex
var ttnHistoriesContentAfterSelectHooks []TTNHistoriesContentHook

var ttnHistoriesContentBeforeInsertMu sync.Mutex
var ttnHistoriesContentBeforeInsertHooks []TTNHistoriesContentHook
var ttnHistoriesContentAfterInsertMu sync.Mutex
var ttnHistoriesContentAfterInsertHooks []TTNHistoriesContentHook

var ttnHistoriesContentBeforeUpdateMu sync.Mutex
var ttnHistoriesContentBeforeUpdateHooks []TTNHistoriesContentHook
var ttnHistoriesContentAfterUpdateMu sync.Mutex
var ttnHistoriesContentAfterUpdateHooks []TTNHistoriesContentHook

var ttnHistoriesContentBeforeDeleteMu sync.Mutex
var ttnHistoriesContentBeforeDeleteHooks []TTNHistoriesContentHook
var ttnHistoriesContentAfterDeleteMu sync.Mutex
var ttnHistoriesContentAfterDeleteHooks []TTNHistoriesContentHook

var ttnHistoriesContentBeforeUpsertMu sync.Mutex
var ttnHistoriesContentBeforeUpsertHooks []TTNHistoriesContentHook
var ttnHistoriesContentAfterUpsertMu sync.Mutex
var ttnHistoriesContentAfterUpsertHooks []TTNHistoriesContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNHistoriesContent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNHistoriesContent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNHistoriesContent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNHistoriesContent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNHistoriesContent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNHistoriesContent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNHistoriesContent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNHistoriesContent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNHistoriesContent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnHistoriesContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNHistoriesContentHook registers your hook function for all future operations.
func AddTTNHistoriesContentHook(hookPoint boil.HookPoint, ttnHistoriesContentHook TTNHistoriesContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnHistoriesContentAfterSelectMu.Lock()
		ttnHistoriesContentAfterSelectHooks = append(ttnHistoriesContentAfterSelectHooks, ttnHistoriesContentHook)
		ttnHistoriesContentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnHistoriesContentBeforeInsertMu.Lock()
		ttnHistoriesContentBeforeInsertHooks = append(ttnHistoriesContentBeforeInsertHooks, ttnHistoriesContentHook)
		ttnHistoriesContentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnHistoriesContentAfterInsertMu.Lock()
		ttnHistoriesContentAfterInsertHooks = append(ttnHistoriesContentAfterInsertHooks, ttnHistoriesContentHook)
		ttnHistoriesContentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnHistoriesContentBeforeUpdateMu.Lock()
		ttnHistoriesContentBeforeUpdateHooks = append(ttnHistoriesContentBeforeUpdateHooks, ttnHistoriesContentHook)
		ttnHistoriesContentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnHistoriesContentAfterUpdateMu.Lock()
		ttnHistoriesContentAfterUpdateHooks = append(ttnHistoriesContentAfterUpdateHooks, ttnHistoriesContentHook)
		ttnHistoriesContentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnHistoriesContentBeforeDeleteMu.Lock()
		ttnHistoriesContentBeforeDeleteHooks = append(ttnHistoriesContentBeforeDeleteHooks, ttnHistoriesContentHook)
		ttnHistoriesContentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnHistoriesContentAfterDeleteMu.Lock()
		ttnHistoriesContentAfterDeleteHooks = append(ttnHistoriesContentAfterDeleteHooks, ttnHistoriesContentHook)
		ttnHistoriesContentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnHistoriesContentBeforeUpsertMu.Lock()
		ttnHistoriesContentBeforeUpsertHooks = append(ttnHistoriesContentBeforeUpsertHooks, ttnHistoriesContentHook)
		ttnHistoriesContentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnHistoriesContentAfterUpsertMu.Lock()
		ttnHistoriesContentAfterUpsertHooks = append(ttnHistoriesContentAfterUpsertHooks, ttnHistoriesContentHook)
		ttnHistoriesContentAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnHistoriesContent record from the query using the global executor.
func (q ttnHistoriesContentQuery) OneG(ctx context.Context) (*TTNHistoriesContent, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnHistoriesContent record from the query.
func (q ttnHistoriesContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNHistoriesContent, error) {
	o := &TTNHistoriesContent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_histories_content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNHistoriesContent records from the query using the global executor.
func (q ttnHistoriesContentQuery) AllG(ctx context.Context) (TTNHistoriesContentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNHistoriesContent records from the query.
func (q ttnHistoriesContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNHistoriesContentSlice, error) {
	var o []*TTNHistoriesContent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNHistoriesContent slice")
	}

	if len(ttnHistoriesContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNHistoriesContent records in the query using the global executor
func (q ttnHistoriesContentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNHistoriesContent records in the query.
func (q ttnHistoriesContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_histories_content rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnHistoriesContentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnHistoriesContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_histories_content exists")
	}

	return count > 0, nil
}

// TTNHistoriesContents retrieves all the records using an executor.
func TTNHistoriesContents(mods ...qm.QueryMod) ttnHistoriesContentQuery {
	mods = append(mods, qm.From("[dbo].[ttn_histories_content]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[ttn_histories_content].*"})
	}

	return ttnHistoriesContentQuery{q}
}

// FindTTNHistoriesContentG retrieves a single record by ID.
func FindTTNHistoriesContentG(ctx context.Context, iD int, selectCols ...string) (*TTNHistoriesContent, error) {
	return FindTTNHistoriesContent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNHistoriesContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNHistoriesContent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TTNHistoriesContent, error) {
	ttnHistoriesContentObj := &TTNHistoriesContent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ttn_histories_content] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnHistoriesContentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_histories_content")
	}

	if err = ttnHistoriesContentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnHistoriesContentObj, err
	}

	return ttnHistoriesContentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNHistoriesContent) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNHistoriesContent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_histories_content provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnHistoriesContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnHistoriesContentInsertCacheMut.RLock()
	cache, cached := ttnHistoriesContentInsertCache[key]
	ttnHistoriesContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnHistoriesContentAllColumns,
			ttnHistoriesContentColumnsWithDefault,
			ttnHistoriesContentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnHistoriesContentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnHistoriesContentType, ttnHistoriesContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnHistoriesContentType, ttnHistoriesContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ttn_histories_content] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ttn_histories_content] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_histories_content")
	}

	if !cached {
		ttnHistoriesContentInsertCacheMut.Lock()
		ttnHistoriesContentInsertCache[key] = cache
		ttnHistoriesContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNHistoriesContent record using the global executor.
// See Update for more documentation.
func (o *TTNHistoriesContent) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNHistoriesContent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNHistoriesContent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnHistoriesContentUpdateCacheMut.RLock()
	cache, cached := ttnHistoriesContentUpdateCache[key]
	ttnHistoriesContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnHistoriesContentAllColumns,
			ttnHistoriesContentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnHistoriesContentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_histories_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ttn_histories_content] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, ttnHistoriesContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnHistoriesContentType, ttnHistoriesContentMapping, append(wl, ttnHistoriesContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_histories_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_histories_content")
	}

	if !cached {
		ttnHistoriesContentUpdateCacheMut.Lock()
		ttnHistoriesContentUpdateCache[key] = cache
		ttnHistoriesContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnHistoriesContentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnHistoriesContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_histories_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_histories_content")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNHistoriesContentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNHistoriesContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnHistoriesContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ttn_histories_content] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ttnHistoriesContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnHistoriesContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnHistoriesContent")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNHistoriesContent) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TTNHistoriesContent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_histories_content provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnHistoriesContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnHistoriesContentUpsertCacheMut.RLock()
	cache, cached := ttnHistoriesContentUpsertCache[key]
	ttnHistoriesContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ttnHistoriesContentAllColumns,
			ttnHistoriesContentColumnsWithDefault,
			ttnHistoriesContentColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, ttnHistoriesContentGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(ttnHistoriesContentPrimaryKeyColumns, v) && strmangle.ContainsAny(ttnHistoriesContentColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("a3boil: unable to upsert ttn_histories_content, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			ttnHistoriesContentAllColumns,
			ttnHistoriesContentPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ttnHistoriesContentGeneratedColumns)

		ret := strmangle.SetComplement(ttnHistoriesContentAllColumns, strmangle.SetIntersect(insert, update))

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_histories_content, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ttn_histories_content]", ttnHistoriesContentPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(ttnHistoriesContentPrimaryKeyColumns))
		copy(whitelist, ttnHistoriesContentPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(ttnHistoriesContentType, ttnHistoriesContentMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnHistoriesContentType, ttnHistoriesContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_histories_content")
	}

	if !cached {
		ttnHistoriesContentUpsertCacheMut.Lock()
		ttnHistoriesContentUpsertCache[key] = cache
		ttnHistoriesContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNHistoriesContent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNHistoriesContent) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNHistoriesContent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNHistoriesContent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNHistoriesContent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnHistoriesContentPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ttn_histories_content] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_histories_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_histories_content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnHistoriesContentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnHistoriesContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnHistoriesContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_histories_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_histories_content")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNHistoriesContentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNHistoriesContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnHistoriesContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnHistoriesContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ttn_histories_content] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnHistoriesContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnHistoriesContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_histories_content")
	}

	if len(ttnHistoriesContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNHistoriesContent) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNHistoriesContent provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNHistoriesContent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNHistoriesContent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNHistoriesContentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNHistoriesContentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNHistoriesContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNHistoriesContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnHistoriesContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ttn_histories_content].* FROM [dbo].[ttn_histories_content] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ttnHistoriesContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNHistoriesContentSlice")
	}

	*o = slice

	return nil
}

// TTNHistoriesContentExistsG checks if the TTNHistoriesContent row exists.
func TTNHistoriesContentExistsG(ctx context.Context, iD int) (bool, error) {
	return TTNHistoriesContentExists(ctx, boil.GetContextDB(), iD)
}

// TTNHistoriesContentExists checks if the TTNHistoriesContent row exists.
func TTNHistoriesContentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ttn_histories_content] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_histories_content exists")
	}

	return exists, nil
}

// Exists checks if the TTNHistoriesContent row exists.
func (o *TTNHistoriesContent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNHistoriesContentExists(ctx, exec, o.ID)
}
