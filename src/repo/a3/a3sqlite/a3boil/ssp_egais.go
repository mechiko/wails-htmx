// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SspEgais is an object representing the database table.
type SspEgais struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDRequests          null.Int64  `boil:"id_requests" json:"id_requests,omitempty" toml:"id_requests" yaml:"id_requests,omitempty"`
	ProductFullName     null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity     null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume    null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode      null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode         null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType     null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProducerType        null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn         null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP         null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName    null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName   null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode  null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *sspEgaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sspEgaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SspEgaisColumns = struct {
	ID                  string
	IDRequests          string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "id",
	IDRequests:          "id_requests",
	ProductFullName:     "product_full_name",
	ProductCapacity:     "product_capacity",
	ProductAlcVolume:    "product_alc_volume",
	ProductAlcCode:      "product_alc_code",
	ProductCode:         "product_code",
	ProductUnitType:     "product_unit_type",
	ProducerType:        "producer_type",
	ProducerClientRegID: "producer_client_reg_id",
	ProducerInn:         "producer_inn",
	ProducerKPP:         "producer_kpp",
	ProducerFullName:    "producer_full_name",
	ProducerShortName:   "producer_short_name",
	ProducerCountryCode: "producer_country_code",
	ProducerRegionCode:  "producer_region_code",
	ProducerDescription: "producer_description",
}

var SspEgaisTableColumns = struct {
	ID                  string
	IDRequests          string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "ssp_egais.id",
	IDRequests:          "ssp_egais.id_requests",
	ProductFullName:     "ssp_egais.product_full_name",
	ProductCapacity:     "ssp_egais.product_capacity",
	ProductAlcVolume:    "ssp_egais.product_alc_volume",
	ProductAlcCode:      "ssp_egais.product_alc_code",
	ProductCode:         "ssp_egais.product_code",
	ProductUnitType:     "ssp_egais.product_unit_type",
	ProducerType:        "ssp_egais.producer_type",
	ProducerClientRegID: "ssp_egais.producer_client_reg_id",
	ProducerInn:         "ssp_egais.producer_inn",
	ProducerKPP:         "ssp_egais.producer_kpp",
	ProducerFullName:    "ssp_egais.producer_full_name",
	ProducerShortName:   "ssp_egais.producer_short_name",
	ProducerCountryCode: "ssp_egais.producer_country_code",
	ProducerRegionCode:  "ssp_egais.producer_region_code",
	ProducerDescription: "ssp_egais.producer_description",
}

// Generated where

var SspEgaisWhere = struct {
	ID                  whereHelperint64
	IDRequests          whereHelpernull_Int64
	ProductFullName     whereHelpernull_String
	ProductCapacity     whereHelpernull_String
	ProductAlcVolume    whereHelpernull_String
	ProductAlcCode      whereHelpernull_String
	ProductCode         whereHelpernull_String
	ProductUnitType     whereHelpernull_String
	ProducerType        whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	ProducerInn         whereHelpernull_String
	ProducerKPP         whereHelpernull_String
	ProducerFullName    whereHelpernull_String
	ProducerShortName   whereHelpernull_String
	ProducerCountryCode whereHelpernull_String
	ProducerRegionCode  whereHelpernull_String
	ProducerDescription whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"ssp_egais\".\"id\""},
	IDRequests:          whereHelpernull_Int64{field: "\"ssp_egais\".\"id_requests\""},
	ProductFullName:     whereHelpernull_String{field: "\"ssp_egais\".\"product_full_name\""},
	ProductCapacity:     whereHelpernull_String{field: "\"ssp_egais\".\"product_capacity\""},
	ProductAlcVolume:    whereHelpernull_String{field: "\"ssp_egais\".\"product_alc_volume\""},
	ProductAlcCode:      whereHelpernull_String{field: "\"ssp_egais\".\"product_alc_code\""},
	ProductCode:         whereHelpernull_String{field: "\"ssp_egais\".\"product_code\""},
	ProductUnitType:     whereHelpernull_String{field: "\"ssp_egais\".\"product_unit_type\""},
	ProducerType:        whereHelpernull_String{field: "\"ssp_egais\".\"producer_type\""},
	ProducerClientRegID: whereHelpernull_String{field: "\"ssp_egais\".\"producer_client_reg_id\""},
	ProducerInn:         whereHelpernull_String{field: "\"ssp_egais\".\"producer_inn\""},
	ProducerKPP:         whereHelpernull_String{field: "\"ssp_egais\".\"producer_kpp\""},
	ProducerFullName:    whereHelpernull_String{field: "\"ssp_egais\".\"producer_full_name\""},
	ProducerShortName:   whereHelpernull_String{field: "\"ssp_egais\".\"producer_short_name\""},
	ProducerCountryCode: whereHelpernull_String{field: "\"ssp_egais\".\"producer_country_code\""},
	ProducerRegionCode:  whereHelpernull_String{field: "\"ssp_egais\".\"producer_region_code\""},
	ProducerDescription: whereHelpernull_String{field: "\"ssp_egais\".\"producer_description\""},
}

// SspEgaisRels is where relationship names are stored.
var SspEgaisRels = struct {
}{}

// sspEgaisR is where relationships are stored.
type sspEgaisR struct {
}

// NewStruct creates a new relationship struct
func (*sspEgaisR) NewStruct() *sspEgaisR {
	return &sspEgaisR{}
}

// sspEgaisL is where Load methods for each relationship are stored.
type sspEgaisL struct{}

var (
	sspEgaisAllColumns            = []string{"id", "id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	sspEgaisColumnsWithoutDefault = []string{}
	sspEgaisColumnsWithDefault    = []string{"id", "id_requests", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	sspEgaisPrimaryKeyColumns     = []string{"id"}
	sspEgaisGeneratedColumns      = []string{"id"}
)

type (
	// SspEgaisSlice is an alias for a slice of pointers to SspEgais.
	// This should almost always be used instead of []SspEgais.
	SspEgaisSlice []*SspEgais
	// SspEgaisHook is the signature for custom SspEgais hook methods
	SspEgaisHook func(context.Context, boil.ContextExecutor, *SspEgais) error

	sspEgaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sspEgaisType                 = reflect.TypeOf(&SspEgais{})
	sspEgaisMapping              = queries.MakeStructMapping(sspEgaisType)
	sspEgaisPrimaryKeyMapping, _ = queries.BindMapping(sspEgaisType, sspEgaisMapping, sspEgaisPrimaryKeyColumns)
	sspEgaisInsertCacheMut       sync.RWMutex
	sspEgaisInsertCache          = make(map[string]insertCache)
	sspEgaisUpdateCacheMut       sync.RWMutex
	sspEgaisUpdateCache          = make(map[string]updateCache)
	sspEgaisUpsertCacheMut       sync.RWMutex
	sspEgaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sspEgaisAfterSelectMu sync.Mutex
var sspEgaisAfterSelectHooks []SspEgaisHook

var sspEgaisBeforeInsertMu sync.Mutex
var sspEgaisBeforeInsertHooks []SspEgaisHook
var sspEgaisAfterInsertMu sync.Mutex
var sspEgaisAfterInsertHooks []SspEgaisHook

var sspEgaisBeforeUpdateMu sync.Mutex
var sspEgaisBeforeUpdateHooks []SspEgaisHook
var sspEgaisAfterUpdateMu sync.Mutex
var sspEgaisAfterUpdateHooks []SspEgaisHook

var sspEgaisBeforeDeleteMu sync.Mutex
var sspEgaisBeforeDeleteHooks []SspEgaisHook
var sspEgaisAfterDeleteMu sync.Mutex
var sspEgaisAfterDeleteHooks []SspEgaisHook

var sspEgaisBeforeUpsertMu sync.Mutex
var sspEgaisBeforeUpsertHooks []SspEgaisHook
var sspEgaisAfterUpsertMu sync.Mutex
var sspEgaisAfterUpsertHooks []SspEgaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SspEgais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SspEgais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SspEgais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SspEgais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SspEgais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SspEgais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SspEgais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SspEgais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SspEgais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspEgaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSspEgaisHook registers your hook function for all future operations.
func AddSspEgaisHook(hookPoint boil.HookPoint, sspEgaisHook SspEgaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sspEgaisAfterSelectMu.Lock()
		sspEgaisAfterSelectHooks = append(sspEgaisAfterSelectHooks, sspEgaisHook)
		sspEgaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sspEgaisBeforeInsertMu.Lock()
		sspEgaisBeforeInsertHooks = append(sspEgaisBeforeInsertHooks, sspEgaisHook)
		sspEgaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sspEgaisAfterInsertMu.Lock()
		sspEgaisAfterInsertHooks = append(sspEgaisAfterInsertHooks, sspEgaisHook)
		sspEgaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sspEgaisBeforeUpdateMu.Lock()
		sspEgaisBeforeUpdateHooks = append(sspEgaisBeforeUpdateHooks, sspEgaisHook)
		sspEgaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sspEgaisAfterUpdateMu.Lock()
		sspEgaisAfterUpdateHooks = append(sspEgaisAfterUpdateHooks, sspEgaisHook)
		sspEgaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sspEgaisBeforeDeleteMu.Lock()
		sspEgaisBeforeDeleteHooks = append(sspEgaisBeforeDeleteHooks, sspEgaisHook)
		sspEgaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sspEgaisAfterDeleteMu.Lock()
		sspEgaisAfterDeleteHooks = append(sspEgaisAfterDeleteHooks, sspEgaisHook)
		sspEgaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sspEgaisBeforeUpsertMu.Lock()
		sspEgaisBeforeUpsertHooks = append(sspEgaisBeforeUpsertHooks, sspEgaisHook)
		sspEgaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sspEgaisAfterUpsertMu.Lock()
		sspEgaisAfterUpsertHooks = append(sspEgaisAfterUpsertHooks, sspEgaisHook)
		sspEgaisAfterUpsertMu.Unlock()
	}
}

// OneG returns a single sspEgais record from the query using the global executor.
func (q sspEgaisQuery) OneG(ctx context.Context) (*SspEgais, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single sspEgais record from the query.
func (q sspEgaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SspEgais, error) {
	o := &SspEgais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ssp_egais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SspEgais records from the query using the global executor.
func (q sspEgaisQuery) AllG(ctx context.Context) (SspEgaisSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SspEgais records from the query.
func (q sspEgaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (SspEgaisSlice, error) {
	var o []*SspEgais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to SspEgais slice")
	}

	if len(sspEgaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SspEgais records in the query using the global executor
func (q sspEgaisQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SspEgais records in the query.
func (q sspEgaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ssp_egais rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q sspEgaisQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q sspEgaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ssp_egais exists")
	}

	return count > 0, nil
}

// SspEgaiss retrieves all the records using an executor.
func SspEgaiss(mods ...qm.QueryMod) sspEgaisQuery {
	mods = append(mods, qm.From("\"ssp_egais\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ssp_egais\".*"})
	}

	return sspEgaisQuery{q}
}

// FindSspEgaisG retrieves a single record by ID.
func FindSspEgaisG(ctx context.Context, iD int64, selectCols ...string) (*SspEgais, error) {
	return FindSspEgais(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSspEgais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSspEgais(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SspEgais, error) {
	sspEgaisObj := &SspEgais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ssp_egais\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sspEgaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ssp_egais")
	}

	if err = sspEgaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sspEgaisObj, err
	}

	return sspEgaisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SspEgais) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SspEgais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ssp_egais provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sspEgaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sspEgaisInsertCacheMut.RLock()
	cache, cached := sspEgaisInsertCache[key]
	sspEgaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sspEgaisAllColumns,
			sspEgaisColumnsWithDefault,
			sspEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, sspEgaisGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(sspEgaisType, sspEgaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sspEgaisType, sspEgaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ssp_egais\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ssp_egais\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ssp_egais")
	}

	if !cached {
		sspEgaisInsertCacheMut.Lock()
		sspEgaisInsertCache[key] = cache
		sspEgaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SspEgais record using the global executor.
// See Update for more documentation.
func (o *SspEgais) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SspEgais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SspEgais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sspEgaisUpdateCacheMut.RLock()
	cache, cached := sspEgaisUpdateCache[key]
	sspEgaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sspEgaisAllColumns,
			sspEgaisPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sspEgaisGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ssp_egais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ssp_egais\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sspEgaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sspEgaisType, sspEgaisMapping, append(wl, sspEgaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ssp_egais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ssp_egais")
	}

	if !cached {
		sspEgaisUpdateCacheMut.Lock()
		sspEgaisUpdateCache[key] = cache
		sspEgaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q sspEgaisQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q sspEgaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ssp_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ssp_egais")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SspEgaisSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SspEgaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sspEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ssp_egais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sspEgaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in sspEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all sspEgais")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SspEgais) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SspEgais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ssp_egais provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sspEgaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sspEgaisUpsertCacheMut.RLock()
	cache, cached := sspEgaisUpsertCache[key]
	sspEgaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sspEgaisAllColumns,
			sspEgaisColumnsWithDefault,
			sspEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sspEgaisAllColumns,
			sspEgaisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ssp_egais, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sspEgaisPrimaryKeyColumns))
			copy(conflict, sspEgaisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ssp_egais\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sspEgaisType, sspEgaisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sspEgaisType, sspEgaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ssp_egais")
	}

	if !cached {
		sspEgaisUpsertCacheMut.Lock()
		sspEgaisUpsertCache[key] = cache
		sspEgaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SspEgais record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SspEgais) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SspEgais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SspEgais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no SspEgais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sspEgaisPrimaryKeyMapping)
	sql := "DELETE FROM \"ssp_egais\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ssp_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ssp_egais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q sspEgaisQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q sspEgaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no sspEgaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ssp_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ssp_egais")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SspEgaisSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SspEgaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sspEgaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sspEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ssp_egais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sspEgaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from sspEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ssp_egais")
	}

	if len(sspEgaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SspEgais) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no SspEgais provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SspEgais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSspEgais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SspEgaisSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty SspEgaisSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SspEgaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SspEgaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sspEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ssp_egais\".* FROM \"ssp_egais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sspEgaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in SspEgaisSlice")
	}

	*o = slice

	return nil
}

// SspEgaisExistsG checks if the SspEgais row exists.
func SspEgaisExistsG(ctx context.Context, iD int64) (bool, error) {
	return SspEgaisExists(ctx, boil.GetContextDB(), iD)
}

// SspEgaisExists checks if the SspEgais row exists.
func SspEgaisExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ssp_egais\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ssp_egais exists")
	}

	return exists, nil
}

// Exists checks if the SspEgais row exists.
func (o *SspEgais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SspEgaisExists(ctx, exec, o.ID)
}
