// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionForm1Content is an object representing the database table.
type ProductionForm1Content struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionForm1    null.Int64  `boil:"id_production_form1" json:"id_production_form1,omitempty" toml:"id_production_form1" yaml:"id_production_form1,omitempty"`
	ProductIddomain      null.String `boil:"product_iddomain" json:"product_iddomain,omitempty" toml:"product_iddomain" yaml:"product_iddomain,omitempty"`
	ProductInformF1RegID null.String `boil:"product_inform_f1_reg_id" json:"product_inform_f1_reg_id,omitempty" toml:"product_inform_f1_reg_id" yaml:"product_inform_f1_reg_id,omitempty"`
	ProductInformF2RegID null.String `boil:"product_inform_f2_reg_id" json:"product_inform_f2_reg_id,omitempty" toml:"product_inform_f2_reg_id" yaml:"product_inform_f2_reg_id,omitempty"`

	R *productionForm1ContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionForm1ContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionForm1ContentColumns = struct {
	ID                   string
	IDProductionForm1    string
	ProductIddomain      string
	ProductInformF1RegID string
	ProductInformF2RegID string
}{
	ID:                   "id",
	IDProductionForm1:    "id_production_form1",
	ProductIddomain:      "product_iddomain",
	ProductInformF1RegID: "product_inform_f1_reg_id",
	ProductInformF2RegID: "product_inform_f2_reg_id",
}

var ProductionForm1ContentTableColumns = struct {
	ID                   string
	IDProductionForm1    string
	ProductIddomain      string
	ProductInformF1RegID string
	ProductInformF2RegID string
}{
	ID:                   "production_form1_content.id",
	IDProductionForm1:    "production_form1_content.id_production_form1",
	ProductIddomain:      "production_form1_content.product_iddomain",
	ProductInformF1RegID: "production_form1_content.product_inform_f1_reg_id",
	ProductInformF2RegID: "production_form1_content.product_inform_f2_reg_id",
}

// Generated where

var ProductionForm1ContentWhere = struct {
	ID                   whereHelperint64
	IDProductionForm1    whereHelpernull_Int64
	ProductIddomain      whereHelpernull_String
	ProductInformF1RegID whereHelpernull_String
	ProductInformF2RegID whereHelpernull_String
}{
	ID:                   whereHelperint64{field: "\"production_form1_content\".\"id\""},
	IDProductionForm1:    whereHelpernull_Int64{field: "\"production_form1_content\".\"id_production_form1\""},
	ProductIddomain:      whereHelpernull_String{field: "\"production_form1_content\".\"product_iddomain\""},
	ProductInformF1RegID: whereHelpernull_String{field: "\"production_form1_content\".\"product_inform_f1_reg_id\""},
	ProductInformF2RegID: whereHelpernull_String{field: "\"production_form1_content\".\"product_inform_f2_reg_id\""},
}

// ProductionForm1ContentRels is where relationship names are stored.
var ProductionForm1ContentRels = struct {
}{}

// productionForm1ContentR is where relationships are stored.
type productionForm1ContentR struct {
}

// NewStruct creates a new relationship struct
func (*productionForm1ContentR) NewStruct() *productionForm1ContentR {
	return &productionForm1ContentR{}
}

// productionForm1ContentL is where Load methods for each relationship are stored.
type productionForm1ContentL struct{}

var (
	productionForm1ContentAllColumns            = []string{"id", "id_production_form1", "product_iddomain", "product_inform_f1_reg_id", "product_inform_f2_reg_id"}
	productionForm1ContentColumnsWithoutDefault = []string{}
	productionForm1ContentColumnsWithDefault    = []string{"id", "id_production_form1", "product_iddomain", "product_inform_f1_reg_id", "product_inform_f2_reg_id"}
	productionForm1ContentPrimaryKeyColumns     = []string{"id"}
	productionForm1ContentGeneratedColumns      = []string{"id"}
)

type (
	// ProductionForm1ContentSlice is an alias for a slice of pointers to ProductionForm1Content.
	// This should almost always be used instead of []ProductionForm1Content.
	ProductionForm1ContentSlice []*ProductionForm1Content
	// ProductionForm1ContentHook is the signature for custom ProductionForm1Content hook methods
	ProductionForm1ContentHook func(context.Context, boil.ContextExecutor, *ProductionForm1Content) error

	productionForm1ContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionForm1ContentType                 = reflect.TypeOf(&ProductionForm1Content{})
	productionForm1ContentMapping              = queries.MakeStructMapping(productionForm1ContentType)
	productionForm1ContentPrimaryKeyMapping, _ = queries.BindMapping(productionForm1ContentType, productionForm1ContentMapping, productionForm1ContentPrimaryKeyColumns)
	productionForm1ContentInsertCacheMut       sync.RWMutex
	productionForm1ContentInsertCache          = make(map[string]insertCache)
	productionForm1ContentUpdateCacheMut       sync.RWMutex
	productionForm1ContentUpdateCache          = make(map[string]updateCache)
	productionForm1ContentUpsertCacheMut       sync.RWMutex
	productionForm1ContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionForm1ContentAfterSelectMu sync.Mutex
var productionForm1ContentAfterSelectHooks []ProductionForm1ContentHook

var productionForm1ContentBeforeInsertMu sync.Mutex
var productionForm1ContentBeforeInsertHooks []ProductionForm1ContentHook
var productionForm1ContentAfterInsertMu sync.Mutex
var productionForm1ContentAfterInsertHooks []ProductionForm1ContentHook

var productionForm1ContentBeforeUpdateMu sync.Mutex
var productionForm1ContentBeforeUpdateHooks []ProductionForm1ContentHook
var productionForm1ContentAfterUpdateMu sync.Mutex
var productionForm1ContentAfterUpdateHooks []ProductionForm1ContentHook

var productionForm1ContentBeforeDeleteMu sync.Mutex
var productionForm1ContentBeforeDeleteHooks []ProductionForm1ContentHook
var productionForm1ContentAfterDeleteMu sync.Mutex
var productionForm1ContentAfterDeleteHooks []ProductionForm1ContentHook

var productionForm1ContentBeforeUpsertMu sync.Mutex
var productionForm1ContentBeforeUpsertHooks []ProductionForm1ContentHook
var productionForm1ContentAfterUpsertMu sync.Mutex
var productionForm1ContentAfterUpsertHooks []ProductionForm1ContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionForm1Content) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionForm1Content) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionForm1Content) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionForm1Content) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionForm1Content) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionForm1Content) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionForm1Content) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionForm1Content) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionForm1Content) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionForm1ContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionForm1ContentHook registers your hook function for all future operations.
func AddProductionForm1ContentHook(hookPoint boil.HookPoint, productionForm1ContentHook ProductionForm1ContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionForm1ContentAfterSelectMu.Lock()
		productionForm1ContentAfterSelectHooks = append(productionForm1ContentAfterSelectHooks, productionForm1ContentHook)
		productionForm1ContentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionForm1ContentBeforeInsertMu.Lock()
		productionForm1ContentBeforeInsertHooks = append(productionForm1ContentBeforeInsertHooks, productionForm1ContentHook)
		productionForm1ContentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionForm1ContentAfterInsertMu.Lock()
		productionForm1ContentAfterInsertHooks = append(productionForm1ContentAfterInsertHooks, productionForm1ContentHook)
		productionForm1ContentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionForm1ContentBeforeUpdateMu.Lock()
		productionForm1ContentBeforeUpdateHooks = append(productionForm1ContentBeforeUpdateHooks, productionForm1ContentHook)
		productionForm1ContentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionForm1ContentAfterUpdateMu.Lock()
		productionForm1ContentAfterUpdateHooks = append(productionForm1ContentAfterUpdateHooks, productionForm1ContentHook)
		productionForm1ContentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionForm1ContentBeforeDeleteMu.Lock()
		productionForm1ContentBeforeDeleteHooks = append(productionForm1ContentBeforeDeleteHooks, productionForm1ContentHook)
		productionForm1ContentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionForm1ContentAfterDeleteMu.Lock()
		productionForm1ContentAfterDeleteHooks = append(productionForm1ContentAfterDeleteHooks, productionForm1ContentHook)
		productionForm1ContentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionForm1ContentBeforeUpsertMu.Lock()
		productionForm1ContentBeforeUpsertHooks = append(productionForm1ContentBeforeUpsertHooks, productionForm1ContentHook)
		productionForm1ContentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionForm1ContentAfterUpsertMu.Lock()
		productionForm1ContentAfterUpsertHooks = append(productionForm1ContentAfterUpsertHooks, productionForm1ContentHook)
		productionForm1ContentAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionForm1Content record from the query using the global executor.
func (q productionForm1ContentQuery) OneG(ctx context.Context) (*ProductionForm1Content, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionForm1Content record from the query.
func (q productionForm1ContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionForm1Content, error) {
	o := &ProductionForm1Content{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_form1_content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionForm1Content records from the query using the global executor.
func (q productionForm1ContentQuery) AllG(ctx context.Context) (ProductionForm1ContentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionForm1Content records from the query.
func (q productionForm1ContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionForm1ContentSlice, error) {
	var o []*ProductionForm1Content

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionForm1Content slice")
	}

	if len(productionForm1ContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionForm1Content records in the query using the global executor
func (q productionForm1ContentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionForm1Content records in the query.
func (q productionForm1ContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_form1_content rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionForm1ContentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionForm1ContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_form1_content exists")
	}

	return count > 0, nil
}

// ProductionForm1Contents retrieves all the records using an executor.
func ProductionForm1Contents(mods ...qm.QueryMod) productionForm1ContentQuery {
	mods = append(mods, qm.From("\"production_form1_content\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"production_form1_content\".*"})
	}

	return productionForm1ContentQuery{q}
}

// FindProductionForm1ContentG retrieves a single record by ID.
func FindProductionForm1ContentG(ctx context.Context, iD int64, selectCols ...string) (*ProductionForm1Content, error) {
	return FindProductionForm1Content(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionForm1Content retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionForm1Content(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductionForm1Content, error) {
	productionForm1ContentObj := &ProductionForm1Content{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"production_form1_content\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionForm1ContentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_form1_content")
	}

	if err = productionForm1ContentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionForm1ContentObj, err
	}

	return productionForm1ContentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionForm1Content) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionForm1Content) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_form1_content provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionForm1ContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionForm1ContentInsertCacheMut.RLock()
	cache, cached := productionForm1ContentInsertCache[key]
	productionForm1ContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionForm1ContentAllColumns,
			productionForm1ContentColumnsWithDefault,
			productionForm1ContentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionForm1ContentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionForm1ContentType, productionForm1ContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionForm1ContentType, productionForm1ContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"production_form1_content\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"production_form1_content\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_form1_content")
	}

	if !cached {
		productionForm1ContentInsertCacheMut.Lock()
		productionForm1ContentInsertCache[key] = cache
		productionForm1ContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionForm1Content record using the global executor.
// See Update for more documentation.
func (o *ProductionForm1Content) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionForm1Content.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionForm1Content) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionForm1ContentUpdateCacheMut.RLock()
	cache, cached := productionForm1ContentUpdateCache[key]
	productionForm1ContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionForm1ContentAllColumns,
			productionForm1ContentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionForm1ContentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_form1_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"production_form1_content\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productionForm1ContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionForm1ContentType, productionForm1ContentMapping, append(wl, productionForm1ContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_form1_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_form1_content")
	}

	if !cached {
		productionForm1ContentUpdateCacheMut.Lock()
		productionForm1ContentUpdateCache[key] = cache
		productionForm1ContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionForm1ContentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionForm1ContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_form1_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_form1_content")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionForm1ContentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionForm1ContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionForm1ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"production_form1_content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionForm1ContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionForm1Content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionForm1Content")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionForm1Content) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductionForm1Content) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_form1_content provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionForm1ContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionForm1ContentUpsertCacheMut.RLock()
	cache, cached := productionForm1ContentUpsertCache[key]
	productionForm1ContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productionForm1ContentAllColumns,
			productionForm1ContentColumnsWithDefault,
			productionForm1ContentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productionForm1ContentAllColumns,
			productionForm1ContentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_form1_content, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productionForm1ContentPrimaryKeyColumns))
			copy(conflict, productionForm1ContentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"production_form1_content\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productionForm1ContentType, productionForm1ContentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionForm1ContentType, productionForm1ContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_form1_content")
	}

	if !cached {
		productionForm1ContentUpsertCacheMut.Lock()
		productionForm1ContentUpsertCache[key] = cache
		productionForm1ContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionForm1Content record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionForm1Content) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionForm1Content record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionForm1Content) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionForm1Content provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionForm1ContentPrimaryKeyMapping)
	sql := "DELETE FROM \"production_form1_content\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_form1_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_form1_content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionForm1ContentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionForm1ContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionForm1ContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_form1_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_form1_content")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionForm1ContentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionForm1ContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionForm1ContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionForm1ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"production_form1_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionForm1ContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionForm1Content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_form1_content")
	}

	if len(productionForm1ContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionForm1Content) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionForm1Content provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionForm1Content) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionForm1Content(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionForm1ContentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionForm1ContentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionForm1ContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionForm1ContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionForm1ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"production_form1_content\".* FROM \"production_form1_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionForm1ContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionForm1ContentSlice")
	}

	*o = slice

	return nil
}

// ProductionForm1ContentExistsG checks if the ProductionForm1Content row exists.
func ProductionForm1ContentExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductionForm1ContentExists(ctx, boil.GetContextDB(), iD)
}

// ProductionForm1ContentExists checks if the ProductionForm1Content row exists.
func ProductionForm1ContentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"production_form1_content\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_form1_content exists")
	}

	return exists, nil
}

// Exists checks if the ProductionForm1Content row exists.
func (o *ProductionForm1Content) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionForm1ContentExists(ctx, exec, o.ID)
}
