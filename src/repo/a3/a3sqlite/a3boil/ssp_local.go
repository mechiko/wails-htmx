// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SSPLocal is an object representing the database table.
type SSPLocal struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductFullName     null.String `boil:"product_full_name" json:"product_full_name,omitempty" toml:"product_full_name" yaml:"product_full_name,omitempty"`
	ProductCapacity     null.String `boil:"product_capacity" json:"product_capacity,omitempty" toml:"product_capacity" yaml:"product_capacity,omitempty"`
	ProductAlcVolume    null.String `boil:"product_alc_volume" json:"product_alc_volume,omitempty" toml:"product_alc_volume" yaml:"product_alc_volume,omitempty"`
	ProductAlcCode      null.String `boil:"product_alc_code" json:"product_alc_code,omitempty" toml:"product_alc_code" yaml:"product_alc_code,omitempty"`
	ProductCode         null.String `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ProductUnitType     null.String `boil:"product_unit_type" json:"product_unit_type,omitempty" toml:"product_unit_type" yaml:"product_unit_type,omitempty"`
	ProducerType        null.String `boil:"producer_type" json:"producer_type,omitempty" toml:"producer_type" yaml:"producer_type,omitempty"`
	ProducerClientRegID null.String `boil:"producer_client_reg_id" json:"producer_client_reg_id,omitempty" toml:"producer_client_reg_id" yaml:"producer_client_reg_id,omitempty"`
	ProducerInn         null.String `boil:"producer_inn" json:"producer_inn,omitempty" toml:"producer_inn" yaml:"producer_inn,omitempty"`
	ProducerKPP         null.String `boil:"producer_kpp" json:"producer_kpp,omitempty" toml:"producer_kpp" yaml:"producer_kpp,omitempty"`
	ProducerFullName    null.String `boil:"producer_full_name" json:"producer_full_name,omitempty" toml:"producer_full_name" yaml:"producer_full_name,omitempty"`
	ProducerShortName   null.String `boil:"producer_short_name" json:"producer_short_name,omitempty" toml:"producer_short_name" yaml:"producer_short_name,omitempty"`
	ProducerCountryCode null.String `boil:"producer_country_code" json:"producer_country_code,omitempty" toml:"producer_country_code" yaml:"producer_country_code,omitempty"`
	ProducerRegionCode  null.String `boil:"producer_region_code" json:"producer_region_code,omitempty" toml:"producer_region_code" yaml:"producer_region_code,omitempty"`
	ProducerDescription null.String `boil:"producer_description" json:"producer_description,omitempty" toml:"producer_description" yaml:"producer_description,omitempty"`

	R *sspLocalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sspLocalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SSPLocalColumns = struct {
	ID                  string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "id",
	ProductFullName:     "product_full_name",
	ProductCapacity:     "product_capacity",
	ProductAlcVolume:    "product_alc_volume",
	ProductAlcCode:      "product_alc_code",
	ProductCode:         "product_code",
	ProductUnitType:     "product_unit_type",
	ProducerType:        "producer_type",
	ProducerClientRegID: "producer_client_reg_id",
	ProducerInn:         "producer_inn",
	ProducerKPP:         "producer_kpp",
	ProducerFullName:    "producer_full_name",
	ProducerShortName:   "producer_short_name",
	ProducerCountryCode: "producer_country_code",
	ProducerRegionCode:  "producer_region_code",
	ProducerDescription: "producer_description",
}

var SSPLocalTableColumns = struct {
	ID                  string
	ProductFullName     string
	ProductCapacity     string
	ProductAlcVolume    string
	ProductAlcCode      string
	ProductCode         string
	ProductUnitType     string
	ProducerType        string
	ProducerClientRegID string
	ProducerInn         string
	ProducerKPP         string
	ProducerFullName    string
	ProducerShortName   string
	ProducerCountryCode string
	ProducerRegionCode  string
	ProducerDescription string
}{
	ID:                  "ssp_local.id",
	ProductFullName:     "ssp_local.product_full_name",
	ProductCapacity:     "ssp_local.product_capacity",
	ProductAlcVolume:    "ssp_local.product_alc_volume",
	ProductAlcCode:      "ssp_local.product_alc_code",
	ProductCode:         "ssp_local.product_code",
	ProductUnitType:     "ssp_local.product_unit_type",
	ProducerType:        "ssp_local.producer_type",
	ProducerClientRegID: "ssp_local.producer_client_reg_id",
	ProducerInn:         "ssp_local.producer_inn",
	ProducerKPP:         "ssp_local.producer_kpp",
	ProducerFullName:    "ssp_local.producer_full_name",
	ProducerShortName:   "ssp_local.producer_short_name",
	ProducerCountryCode: "ssp_local.producer_country_code",
	ProducerRegionCode:  "ssp_local.producer_region_code",
	ProducerDescription: "ssp_local.producer_description",
}

// Generated where

var SSPLocalWhere = struct {
	ID                  whereHelperint64
	ProductFullName     whereHelpernull_String
	ProductCapacity     whereHelpernull_String
	ProductAlcVolume    whereHelpernull_String
	ProductAlcCode      whereHelpernull_String
	ProductCode         whereHelpernull_String
	ProductUnitType     whereHelpernull_String
	ProducerType        whereHelpernull_String
	ProducerClientRegID whereHelpernull_String
	ProducerInn         whereHelpernull_String
	ProducerKPP         whereHelpernull_String
	ProducerFullName    whereHelpernull_String
	ProducerShortName   whereHelpernull_String
	ProducerCountryCode whereHelpernull_String
	ProducerRegionCode  whereHelpernull_String
	ProducerDescription whereHelpernull_String
}{
	ID:                  whereHelperint64{field: "\"ssp_local\".\"id\""},
	ProductFullName:     whereHelpernull_String{field: "\"ssp_local\".\"product_full_name\""},
	ProductCapacity:     whereHelpernull_String{field: "\"ssp_local\".\"product_capacity\""},
	ProductAlcVolume:    whereHelpernull_String{field: "\"ssp_local\".\"product_alc_volume\""},
	ProductAlcCode:      whereHelpernull_String{field: "\"ssp_local\".\"product_alc_code\""},
	ProductCode:         whereHelpernull_String{field: "\"ssp_local\".\"product_code\""},
	ProductUnitType:     whereHelpernull_String{field: "\"ssp_local\".\"product_unit_type\""},
	ProducerType:        whereHelpernull_String{field: "\"ssp_local\".\"producer_type\""},
	ProducerClientRegID: whereHelpernull_String{field: "\"ssp_local\".\"producer_client_reg_id\""},
	ProducerInn:         whereHelpernull_String{field: "\"ssp_local\".\"producer_inn\""},
	ProducerKPP:         whereHelpernull_String{field: "\"ssp_local\".\"producer_kpp\""},
	ProducerFullName:    whereHelpernull_String{field: "\"ssp_local\".\"producer_full_name\""},
	ProducerShortName:   whereHelpernull_String{field: "\"ssp_local\".\"producer_short_name\""},
	ProducerCountryCode: whereHelpernull_String{field: "\"ssp_local\".\"producer_country_code\""},
	ProducerRegionCode:  whereHelpernull_String{field: "\"ssp_local\".\"producer_region_code\""},
	ProducerDescription: whereHelpernull_String{field: "\"ssp_local\".\"producer_description\""},
}

// SSPLocalRels is where relationship names are stored.
var SSPLocalRels = struct {
}{}

// sspLocalR is where relationships are stored.
type sspLocalR struct {
}

// NewStruct creates a new relationship struct
func (*sspLocalR) NewStruct() *sspLocalR {
	return &sspLocalR{}
}

// sspLocalL is where Load methods for each relationship are stored.
type sspLocalL struct{}

var (
	sspLocalAllColumns            = []string{"id", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	sspLocalColumnsWithoutDefault = []string{}
	sspLocalColumnsWithDefault    = []string{"id", "product_full_name", "product_capacity", "product_alc_volume", "product_alc_code", "product_code", "product_unit_type", "producer_type", "producer_client_reg_id", "producer_inn", "producer_kpp", "producer_full_name", "producer_short_name", "producer_country_code", "producer_region_code", "producer_description"}
	sspLocalPrimaryKeyColumns     = []string{"id"}
	sspLocalGeneratedColumns      = []string{"id"}
)

type (
	// SSPLocalSlice is an alias for a slice of pointers to SSPLocal.
	// This should almost always be used instead of []SSPLocal.
	SSPLocalSlice []*SSPLocal
	// SSPLocalHook is the signature for custom SSPLocal hook methods
	SSPLocalHook func(context.Context, boil.ContextExecutor, *SSPLocal) error

	sspLocalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sspLocalType                 = reflect.TypeOf(&SSPLocal{})
	sspLocalMapping              = queries.MakeStructMapping(sspLocalType)
	sspLocalPrimaryKeyMapping, _ = queries.BindMapping(sspLocalType, sspLocalMapping, sspLocalPrimaryKeyColumns)
	sspLocalInsertCacheMut       sync.RWMutex
	sspLocalInsertCache          = make(map[string]insertCache)
	sspLocalUpdateCacheMut       sync.RWMutex
	sspLocalUpdateCache          = make(map[string]updateCache)
	sspLocalUpsertCacheMut       sync.RWMutex
	sspLocalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sspLocalAfterSelectMu sync.Mutex
var sspLocalAfterSelectHooks []SSPLocalHook

var sspLocalBeforeInsertMu sync.Mutex
var sspLocalBeforeInsertHooks []SSPLocalHook
var sspLocalAfterInsertMu sync.Mutex
var sspLocalAfterInsertHooks []SSPLocalHook

var sspLocalBeforeUpdateMu sync.Mutex
var sspLocalBeforeUpdateHooks []SSPLocalHook
var sspLocalAfterUpdateMu sync.Mutex
var sspLocalAfterUpdateHooks []SSPLocalHook

var sspLocalBeforeDeleteMu sync.Mutex
var sspLocalBeforeDeleteHooks []SSPLocalHook
var sspLocalAfterDeleteMu sync.Mutex
var sspLocalAfterDeleteHooks []SSPLocalHook

var sspLocalBeforeUpsertMu sync.Mutex
var sspLocalBeforeUpsertHooks []SSPLocalHook
var sspLocalAfterUpsertMu sync.Mutex
var sspLocalAfterUpsertHooks []SSPLocalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SSPLocal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SSPLocal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SSPLocal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SSPLocal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SSPLocal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SSPLocal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SSPLocal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SSPLocal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SSPLocal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sspLocalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSSPLocalHook registers your hook function for all future operations.
func AddSSPLocalHook(hookPoint boil.HookPoint, sspLocalHook SSPLocalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sspLocalAfterSelectMu.Lock()
		sspLocalAfterSelectHooks = append(sspLocalAfterSelectHooks, sspLocalHook)
		sspLocalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sspLocalBeforeInsertMu.Lock()
		sspLocalBeforeInsertHooks = append(sspLocalBeforeInsertHooks, sspLocalHook)
		sspLocalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sspLocalAfterInsertMu.Lock()
		sspLocalAfterInsertHooks = append(sspLocalAfterInsertHooks, sspLocalHook)
		sspLocalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sspLocalBeforeUpdateMu.Lock()
		sspLocalBeforeUpdateHooks = append(sspLocalBeforeUpdateHooks, sspLocalHook)
		sspLocalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sspLocalAfterUpdateMu.Lock()
		sspLocalAfterUpdateHooks = append(sspLocalAfterUpdateHooks, sspLocalHook)
		sspLocalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sspLocalBeforeDeleteMu.Lock()
		sspLocalBeforeDeleteHooks = append(sspLocalBeforeDeleteHooks, sspLocalHook)
		sspLocalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sspLocalAfterDeleteMu.Lock()
		sspLocalAfterDeleteHooks = append(sspLocalAfterDeleteHooks, sspLocalHook)
		sspLocalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sspLocalBeforeUpsertMu.Lock()
		sspLocalBeforeUpsertHooks = append(sspLocalBeforeUpsertHooks, sspLocalHook)
		sspLocalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sspLocalAfterUpsertMu.Lock()
		sspLocalAfterUpsertHooks = append(sspLocalAfterUpsertHooks, sspLocalHook)
		sspLocalAfterUpsertMu.Unlock()
	}
}

// OneG returns a single sspLocal record from the query using the global executor.
func (q sspLocalQuery) OneG(ctx context.Context) (*SSPLocal, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single sspLocal record from the query.
func (q sspLocalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SSPLocal, error) {
	o := &SSPLocal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ssp_local")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SSPLocal records from the query using the global executor.
func (q sspLocalQuery) AllG(ctx context.Context) (SSPLocalSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SSPLocal records from the query.
func (q sspLocalQuery) All(ctx context.Context, exec boil.ContextExecutor) (SSPLocalSlice, error) {
	var o []*SSPLocal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to SSPLocal slice")
	}

	if len(sspLocalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SSPLocal records in the query using the global executor
func (q sspLocalQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SSPLocal records in the query.
func (q sspLocalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ssp_local rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q sspLocalQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q sspLocalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ssp_local exists")
	}

	return count > 0, nil
}

// SSPLocals retrieves all the records using an executor.
func SSPLocals(mods ...qm.QueryMod) sspLocalQuery {
	mods = append(mods, qm.From("\"ssp_local\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ssp_local\".*"})
	}

	return sspLocalQuery{q}
}

// FindSSPLocalG retrieves a single record by ID.
func FindSSPLocalG(ctx context.Context, iD int64, selectCols ...string) (*SSPLocal, error) {
	return FindSSPLocal(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSSPLocal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSSPLocal(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SSPLocal, error) {
	sspLocalObj := &SSPLocal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ssp_local\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sspLocalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ssp_local")
	}

	if err = sspLocalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sspLocalObj, err
	}

	return sspLocalObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SSPLocal) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SSPLocal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ssp_local provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sspLocalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sspLocalInsertCacheMut.RLock()
	cache, cached := sspLocalInsertCache[key]
	sspLocalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sspLocalAllColumns,
			sspLocalColumnsWithDefault,
			sspLocalColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, sspLocalGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(sspLocalType, sspLocalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sspLocalType, sspLocalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ssp_local\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ssp_local\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ssp_local")
	}

	if !cached {
		sspLocalInsertCacheMut.Lock()
		sspLocalInsertCache[key] = cache
		sspLocalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SSPLocal record using the global executor.
// See Update for more documentation.
func (o *SSPLocal) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SSPLocal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SSPLocal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sspLocalUpdateCacheMut.RLock()
	cache, cached := sspLocalUpdateCache[key]
	sspLocalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sspLocalAllColumns,
			sspLocalPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sspLocalGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ssp_local, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ssp_local\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sspLocalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sspLocalType, sspLocalMapping, append(wl, sspLocalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ssp_local row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ssp_local")
	}

	if !cached {
		sspLocalUpdateCacheMut.Lock()
		sspLocalUpdateCache[key] = cache
		sspLocalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q sspLocalQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q sspLocalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ssp_local")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ssp_local")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SSPLocalSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SSPLocalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sspLocalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ssp_local\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sspLocalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in sspLocal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all sspLocal")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SSPLocal) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SSPLocal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ssp_local provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sspLocalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sspLocalUpsertCacheMut.RLock()
	cache, cached := sspLocalUpsertCache[key]
	sspLocalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sspLocalAllColumns,
			sspLocalColumnsWithDefault,
			sspLocalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sspLocalAllColumns,
			sspLocalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ssp_local, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sspLocalPrimaryKeyColumns))
			copy(conflict, sspLocalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ssp_local\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sspLocalType, sspLocalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sspLocalType, sspLocalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ssp_local")
	}

	if !cached {
		sspLocalUpsertCacheMut.Lock()
		sspLocalUpsertCache[key] = cache
		sspLocalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SSPLocal record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SSPLocal) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SSPLocal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SSPLocal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no SSPLocal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sspLocalPrimaryKeyMapping)
	sql := "DELETE FROM \"ssp_local\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ssp_local")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ssp_local")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q sspLocalQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q sspLocalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no sspLocalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ssp_local")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ssp_local")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SSPLocalSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SSPLocalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sspLocalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sspLocalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ssp_local\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sspLocalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from sspLocal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ssp_local")
	}

	if len(sspLocalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SSPLocal) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no SSPLocal provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SSPLocal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSSPLocal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SSPLocalSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty SSPLocalSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SSPLocalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SSPLocalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sspLocalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ssp_local\".* FROM \"ssp_local\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sspLocalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in SSPLocalSlice")
	}

	*o = slice

	return nil
}

// SSPLocalExistsG checks if the SSPLocal row exists.
func SSPLocalExistsG(ctx context.Context, iD int64) (bool, error) {
	return SSPLocalExists(ctx, boil.GetContextDB(), iD)
}

// SSPLocalExists checks if the SSPLocal row exists.
func SSPLocalExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ssp_local\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ssp_local exists")
	}

	return exists, nil
}

// Exists checks if the SSPLocal row exists.
func (o *SSPLocal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SSPLocalExists(ctx, exec, o.ID)
}
