// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RestsMarksEgais is an object representing the database table.
type RestsMarksEgais struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDRequests     null.Int64  `boil:"id_requests" json:"id_requests,omitempty" toml:"id_requests" yaml:"id_requests,omitempty"`
	Mark           null.String `boil:"mark" json:"mark,omitempty" toml:"mark" yaml:"mark,omitempty"`
	InformF2RegID  null.String `boil:"inform_f2_reg_id" json:"inform_f2_reg_id,omitempty" toml:"inform_f2_reg_id" yaml:"inform_f2_reg_id,omitempty"`
	RestsMarksDate null.String `boil:"rests_marks_date" json:"rests_marks_date,omitempty" toml:"rests_marks_date" yaml:"rests_marks_date,omitempty"`

	R *restsMarksEgaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restsMarksEgaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestsMarksEgaisColumns = struct {
	ID             string
	IDRequests     string
	Mark           string
	InformF2RegID  string
	RestsMarksDate string
}{
	ID:             "id",
	IDRequests:     "id_requests",
	Mark:           "mark",
	InformF2RegID:  "inform_f2_reg_id",
	RestsMarksDate: "rests_marks_date",
}

var RestsMarksEgaisTableColumns = struct {
	ID             string
	IDRequests     string
	Mark           string
	InformF2RegID  string
	RestsMarksDate string
}{
	ID:             "rests_marks_egais.id",
	IDRequests:     "rests_marks_egais.id_requests",
	Mark:           "rests_marks_egais.mark",
	InformF2RegID:  "rests_marks_egais.inform_f2_reg_id",
	RestsMarksDate: "rests_marks_egais.rests_marks_date",
}

// Generated where

var RestsMarksEgaisWhere = struct {
	ID             whereHelperint64
	IDRequests     whereHelpernull_Int64
	Mark           whereHelpernull_String
	InformF2RegID  whereHelpernull_String
	RestsMarksDate whereHelpernull_String
}{
	ID:             whereHelperint64{field: "\"rests_marks_egais\".\"id\""},
	IDRequests:     whereHelpernull_Int64{field: "\"rests_marks_egais\".\"id_requests\""},
	Mark:           whereHelpernull_String{field: "\"rests_marks_egais\".\"mark\""},
	InformF2RegID:  whereHelpernull_String{field: "\"rests_marks_egais\".\"inform_f2_reg_id\""},
	RestsMarksDate: whereHelpernull_String{field: "\"rests_marks_egais\".\"rests_marks_date\""},
}

// RestsMarksEgaisRels is where relationship names are stored.
var RestsMarksEgaisRels = struct {
}{}

// restsMarksEgaisR is where relationships are stored.
type restsMarksEgaisR struct {
}

// NewStruct creates a new relationship struct
func (*restsMarksEgaisR) NewStruct() *restsMarksEgaisR {
	return &restsMarksEgaisR{}
}

// restsMarksEgaisL is where Load methods for each relationship are stored.
type restsMarksEgaisL struct{}

var (
	restsMarksEgaisAllColumns            = []string{"id", "id_requests", "mark", "inform_f2_reg_id", "rests_marks_date"}
	restsMarksEgaisColumnsWithoutDefault = []string{}
	restsMarksEgaisColumnsWithDefault    = []string{"id", "id_requests", "mark", "inform_f2_reg_id", "rests_marks_date"}
	restsMarksEgaisPrimaryKeyColumns     = []string{"id"}
	restsMarksEgaisGeneratedColumns      = []string{"id"}
)

type (
	// RestsMarksEgaisSlice is an alias for a slice of pointers to RestsMarksEgais.
	// This should almost always be used instead of []RestsMarksEgais.
	RestsMarksEgaisSlice []*RestsMarksEgais
	// RestsMarksEgaisHook is the signature for custom RestsMarksEgais hook methods
	RestsMarksEgaisHook func(context.Context, boil.ContextExecutor, *RestsMarksEgais) error

	restsMarksEgaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restsMarksEgaisType                 = reflect.TypeOf(&RestsMarksEgais{})
	restsMarksEgaisMapping              = queries.MakeStructMapping(restsMarksEgaisType)
	restsMarksEgaisPrimaryKeyMapping, _ = queries.BindMapping(restsMarksEgaisType, restsMarksEgaisMapping, restsMarksEgaisPrimaryKeyColumns)
	restsMarksEgaisInsertCacheMut       sync.RWMutex
	restsMarksEgaisInsertCache          = make(map[string]insertCache)
	restsMarksEgaisUpdateCacheMut       sync.RWMutex
	restsMarksEgaisUpdateCache          = make(map[string]updateCache)
	restsMarksEgaisUpsertCacheMut       sync.RWMutex
	restsMarksEgaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restsMarksEgaisAfterSelectMu sync.Mutex
var restsMarksEgaisAfterSelectHooks []RestsMarksEgaisHook

var restsMarksEgaisBeforeInsertMu sync.Mutex
var restsMarksEgaisBeforeInsertHooks []RestsMarksEgaisHook
var restsMarksEgaisAfterInsertMu sync.Mutex
var restsMarksEgaisAfterInsertHooks []RestsMarksEgaisHook

var restsMarksEgaisBeforeUpdateMu sync.Mutex
var restsMarksEgaisBeforeUpdateHooks []RestsMarksEgaisHook
var restsMarksEgaisAfterUpdateMu sync.Mutex
var restsMarksEgaisAfterUpdateHooks []RestsMarksEgaisHook

var restsMarksEgaisBeforeDeleteMu sync.Mutex
var restsMarksEgaisBeforeDeleteHooks []RestsMarksEgaisHook
var restsMarksEgaisAfterDeleteMu sync.Mutex
var restsMarksEgaisAfterDeleteHooks []RestsMarksEgaisHook

var restsMarksEgaisBeforeUpsertMu sync.Mutex
var restsMarksEgaisBeforeUpsertHooks []RestsMarksEgaisHook
var restsMarksEgaisAfterUpsertMu sync.Mutex
var restsMarksEgaisAfterUpsertHooks []RestsMarksEgaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RestsMarksEgais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RestsMarksEgais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RestsMarksEgais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RestsMarksEgais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RestsMarksEgais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RestsMarksEgais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RestsMarksEgais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RestsMarksEgais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RestsMarksEgais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restsMarksEgaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestsMarksEgaisHook registers your hook function for all future operations.
func AddRestsMarksEgaisHook(hookPoint boil.HookPoint, restsMarksEgaisHook RestsMarksEgaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		restsMarksEgaisAfterSelectMu.Lock()
		restsMarksEgaisAfterSelectHooks = append(restsMarksEgaisAfterSelectHooks, restsMarksEgaisHook)
		restsMarksEgaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		restsMarksEgaisBeforeInsertMu.Lock()
		restsMarksEgaisBeforeInsertHooks = append(restsMarksEgaisBeforeInsertHooks, restsMarksEgaisHook)
		restsMarksEgaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		restsMarksEgaisAfterInsertMu.Lock()
		restsMarksEgaisAfterInsertHooks = append(restsMarksEgaisAfterInsertHooks, restsMarksEgaisHook)
		restsMarksEgaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		restsMarksEgaisBeforeUpdateMu.Lock()
		restsMarksEgaisBeforeUpdateHooks = append(restsMarksEgaisBeforeUpdateHooks, restsMarksEgaisHook)
		restsMarksEgaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		restsMarksEgaisAfterUpdateMu.Lock()
		restsMarksEgaisAfterUpdateHooks = append(restsMarksEgaisAfterUpdateHooks, restsMarksEgaisHook)
		restsMarksEgaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		restsMarksEgaisBeforeDeleteMu.Lock()
		restsMarksEgaisBeforeDeleteHooks = append(restsMarksEgaisBeforeDeleteHooks, restsMarksEgaisHook)
		restsMarksEgaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		restsMarksEgaisAfterDeleteMu.Lock()
		restsMarksEgaisAfterDeleteHooks = append(restsMarksEgaisAfterDeleteHooks, restsMarksEgaisHook)
		restsMarksEgaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		restsMarksEgaisBeforeUpsertMu.Lock()
		restsMarksEgaisBeforeUpsertHooks = append(restsMarksEgaisBeforeUpsertHooks, restsMarksEgaisHook)
		restsMarksEgaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		restsMarksEgaisAfterUpsertMu.Lock()
		restsMarksEgaisAfterUpsertHooks = append(restsMarksEgaisAfterUpsertHooks, restsMarksEgaisHook)
		restsMarksEgaisAfterUpsertMu.Unlock()
	}
}

// OneG returns a single restsMarksEgais record from the query using the global executor.
func (q restsMarksEgaisQuery) OneG(ctx context.Context) (*RestsMarksEgais, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single restsMarksEgais record from the query.
func (q restsMarksEgaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RestsMarksEgais, error) {
	o := &RestsMarksEgais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for rests_marks_egais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RestsMarksEgais records from the query using the global executor.
func (q restsMarksEgaisQuery) AllG(ctx context.Context) (RestsMarksEgaisSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RestsMarksEgais records from the query.
func (q restsMarksEgaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestsMarksEgaisSlice, error) {
	var o []*RestsMarksEgais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to RestsMarksEgais slice")
	}

	if len(restsMarksEgaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RestsMarksEgais records in the query using the global executor
func (q restsMarksEgaisQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RestsMarksEgais records in the query.
func (q restsMarksEgaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count rests_marks_egais rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q restsMarksEgaisQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q restsMarksEgaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if rests_marks_egais exists")
	}

	return count > 0, nil
}

// RestsMarksEgaiss retrieves all the records using an executor.
func RestsMarksEgaiss(mods ...qm.QueryMod) restsMarksEgaisQuery {
	mods = append(mods, qm.From("\"rests_marks_egais\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rests_marks_egais\".*"})
	}

	return restsMarksEgaisQuery{q}
}

// FindRestsMarksEgaisG retrieves a single record by ID.
func FindRestsMarksEgaisG(ctx context.Context, iD int64, selectCols ...string) (*RestsMarksEgais, error) {
	return FindRestsMarksEgais(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRestsMarksEgais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestsMarksEgais(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RestsMarksEgais, error) {
	restsMarksEgaisObj := &RestsMarksEgais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rests_marks_egais\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restsMarksEgaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from rests_marks_egais")
	}

	if err = restsMarksEgaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restsMarksEgaisObj, err
	}

	return restsMarksEgaisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RestsMarksEgais) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RestsMarksEgais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no rests_marks_egais provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restsMarksEgaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restsMarksEgaisInsertCacheMut.RLock()
	cache, cached := restsMarksEgaisInsertCache[key]
	restsMarksEgaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restsMarksEgaisAllColumns,
			restsMarksEgaisColumnsWithDefault,
			restsMarksEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, restsMarksEgaisGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(restsMarksEgaisType, restsMarksEgaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restsMarksEgaisType, restsMarksEgaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rests_marks_egais\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rests_marks_egais\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into rests_marks_egais")
	}

	if !cached {
		restsMarksEgaisInsertCacheMut.Lock()
		restsMarksEgaisInsertCache[key] = cache
		restsMarksEgaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RestsMarksEgais record using the global executor.
// See Update for more documentation.
func (o *RestsMarksEgais) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RestsMarksEgais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RestsMarksEgais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restsMarksEgaisUpdateCacheMut.RLock()
	cache, cached := restsMarksEgaisUpdateCache[key]
	restsMarksEgaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restsMarksEgaisAllColumns,
			restsMarksEgaisPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, restsMarksEgaisGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update rests_marks_egais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rests_marks_egais\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, restsMarksEgaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restsMarksEgaisType, restsMarksEgaisMapping, append(wl, restsMarksEgaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update rests_marks_egais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for rests_marks_egais")
	}

	if !cached {
		restsMarksEgaisUpdateCacheMut.Lock()
		restsMarksEgaisUpdateCache[key] = cache
		restsMarksEgaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q restsMarksEgaisQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q restsMarksEgaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for rests_marks_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for rests_marks_egais")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RestsMarksEgaisSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestsMarksEgaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsMarksEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rests_marks_egais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restsMarksEgaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in restsMarksEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all restsMarksEgais")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RestsMarksEgais) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RestsMarksEgais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no rests_marks_egais provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restsMarksEgaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restsMarksEgaisUpsertCacheMut.RLock()
	cache, cached := restsMarksEgaisUpsertCache[key]
	restsMarksEgaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restsMarksEgaisAllColumns,
			restsMarksEgaisColumnsWithDefault,
			restsMarksEgaisColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restsMarksEgaisAllColumns,
			restsMarksEgaisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert rests_marks_egais, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restsMarksEgaisPrimaryKeyColumns))
			copy(conflict, restsMarksEgaisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"rests_marks_egais\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restsMarksEgaisType, restsMarksEgaisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restsMarksEgaisType, restsMarksEgaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert rests_marks_egais")
	}

	if !cached {
		restsMarksEgaisUpsertCacheMut.Lock()
		restsMarksEgaisUpsertCache[key] = cache
		restsMarksEgaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RestsMarksEgais record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RestsMarksEgais) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RestsMarksEgais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RestsMarksEgais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no RestsMarksEgais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restsMarksEgaisPrimaryKeyMapping)
	sql := "DELETE FROM \"rests_marks_egais\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from rests_marks_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for rests_marks_egais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q restsMarksEgaisQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q restsMarksEgaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no restsMarksEgaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from rests_marks_egais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for rests_marks_egais")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RestsMarksEgaisSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestsMarksEgaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restsMarksEgaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsMarksEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rests_marks_egais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restsMarksEgaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from restsMarksEgais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for rests_marks_egais")
	}

	if len(restsMarksEgaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RestsMarksEgais) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no RestsMarksEgais provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RestsMarksEgais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestsMarksEgais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestsMarksEgaisSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty RestsMarksEgaisSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestsMarksEgaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestsMarksEgaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restsMarksEgaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rests_marks_egais\".* FROM \"rests_marks_egais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restsMarksEgaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in RestsMarksEgaisSlice")
	}

	*o = slice

	return nil
}

// RestsMarksEgaisExistsG checks if the RestsMarksEgais row exists.
func RestsMarksEgaisExistsG(ctx context.Context, iD int64) (bool, error) {
	return RestsMarksEgaisExists(ctx, boil.GetContextDB(), iD)
}

// RestsMarksEgaisExists checks if the RestsMarksEgais row exists.
func RestsMarksEgaisExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rests_marks_egais\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if rests_marks_egais exists")
	}

	return exists, nil
}

// Exists checks if the RestsMarksEgais row exists.
func (o *RestsMarksEgais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RestsMarksEgaisExists(ctx, exec, o.ID)
}
