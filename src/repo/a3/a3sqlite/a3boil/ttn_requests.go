// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNRequest is an object representing the database table.
type TTNRequest struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTN         null.Int64  `boil:"id_ttn" json:"id_ttn,omitempty" toml:"id_ttn" yaml:"id_ttn,omitempty"`
	ClientRegID   null.String `boil:"client_reg_id" json:"client_reg_id,omitempty" toml:"client_reg_id" yaml:"client_reg_id,omitempty"`
	RequestNumber null.String `boil:"request_number" json:"request_number,omitempty" toml:"request_number" yaml:"request_number,omitempty"`
	RequestDate   null.String `boil:"request_date" json:"request_date,omitempty" toml:"request_date" yaml:"request_date,omitempty"`
	RequestRegID  null.String `boil:"request_reg_id" json:"request_reg_id,omitempty" toml:"request_reg_id" yaml:"request_reg_id,omitempty"`
	Status        null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ReplyID       null.String `boil:"reply_id" json:"reply_id,omitempty" toml:"reply_id" yaml:"reply_id,omitempty"`

	R *ttnRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNRequestColumns = struct {
	ID            string
	IDTTN         string
	ClientRegID   string
	RequestNumber string
	RequestDate   string
	RequestRegID  string
	Status        string
	ReplyID       string
}{
	ID:            "id",
	IDTTN:         "id_ttn",
	ClientRegID:   "client_reg_id",
	RequestNumber: "request_number",
	RequestDate:   "request_date",
	RequestRegID:  "request_reg_id",
	Status:        "status",
	ReplyID:       "reply_id",
}

var TTNRequestTableColumns = struct {
	ID            string
	IDTTN         string
	ClientRegID   string
	RequestNumber string
	RequestDate   string
	RequestRegID  string
	Status        string
	ReplyID       string
}{
	ID:            "ttn_requests.id",
	IDTTN:         "ttn_requests.id_ttn",
	ClientRegID:   "ttn_requests.client_reg_id",
	RequestNumber: "ttn_requests.request_number",
	RequestDate:   "ttn_requests.request_date",
	RequestRegID:  "ttn_requests.request_reg_id",
	Status:        "ttn_requests.status",
	ReplyID:       "ttn_requests.reply_id",
}

// Generated where

var TTNRequestWhere = struct {
	ID            whereHelperint64
	IDTTN         whereHelpernull_Int64
	ClientRegID   whereHelpernull_String
	RequestNumber whereHelpernull_String
	RequestDate   whereHelpernull_String
	RequestRegID  whereHelpernull_String
	Status        whereHelpernull_String
	ReplyID       whereHelpernull_String
}{
	ID:            whereHelperint64{field: "\"ttn_requests\".\"id\""},
	IDTTN:         whereHelpernull_Int64{field: "\"ttn_requests\".\"id_ttn\""},
	ClientRegID:   whereHelpernull_String{field: "\"ttn_requests\".\"client_reg_id\""},
	RequestNumber: whereHelpernull_String{field: "\"ttn_requests\".\"request_number\""},
	RequestDate:   whereHelpernull_String{field: "\"ttn_requests\".\"request_date\""},
	RequestRegID:  whereHelpernull_String{field: "\"ttn_requests\".\"request_reg_id\""},
	Status:        whereHelpernull_String{field: "\"ttn_requests\".\"status\""},
	ReplyID:       whereHelpernull_String{field: "\"ttn_requests\".\"reply_id\""},
}

// TTNRequestRels is where relationship names are stored.
var TTNRequestRels = struct {
}{}

// ttnRequestR is where relationships are stored.
type ttnRequestR struct {
}

// NewStruct creates a new relationship struct
func (*ttnRequestR) NewStruct() *ttnRequestR {
	return &ttnRequestR{}
}

// ttnRequestL is where Load methods for each relationship are stored.
type ttnRequestL struct{}

var (
	ttnRequestAllColumns            = []string{"id", "id_ttn", "client_reg_id", "request_number", "request_date", "request_reg_id", "status", "reply_id"}
	ttnRequestColumnsWithoutDefault = []string{}
	ttnRequestColumnsWithDefault    = []string{"id", "id_ttn", "client_reg_id", "request_number", "request_date", "request_reg_id", "status", "reply_id"}
	ttnRequestPrimaryKeyColumns     = []string{"id"}
	ttnRequestGeneratedColumns      = []string{"id"}
)

type (
	// TTNRequestSlice is an alias for a slice of pointers to TTNRequest.
	// This should almost always be used instead of []TTNRequest.
	TTNRequestSlice []*TTNRequest
	// TTNRequestHook is the signature for custom TTNRequest hook methods
	TTNRequestHook func(context.Context, boil.ContextExecutor, *TTNRequest) error

	ttnRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnRequestType                 = reflect.TypeOf(&TTNRequest{})
	ttnRequestMapping              = queries.MakeStructMapping(ttnRequestType)
	ttnRequestPrimaryKeyMapping, _ = queries.BindMapping(ttnRequestType, ttnRequestMapping, ttnRequestPrimaryKeyColumns)
	ttnRequestInsertCacheMut       sync.RWMutex
	ttnRequestInsertCache          = make(map[string]insertCache)
	ttnRequestUpdateCacheMut       sync.RWMutex
	ttnRequestUpdateCache          = make(map[string]updateCache)
	ttnRequestUpsertCacheMut       sync.RWMutex
	ttnRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnRequestAfterSelectMu sync.Mutex
var ttnRequestAfterSelectHooks []TTNRequestHook

var ttnRequestBeforeInsertMu sync.Mutex
var ttnRequestBeforeInsertHooks []TTNRequestHook
var ttnRequestAfterInsertMu sync.Mutex
var ttnRequestAfterInsertHooks []TTNRequestHook

var ttnRequestBeforeUpdateMu sync.Mutex
var ttnRequestBeforeUpdateHooks []TTNRequestHook
var ttnRequestAfterUpdateMu sync.Mutex
var ttnRequestAfterUpdateHooks []TTNRequestHook

var ttnRequestBeforeDeleteMu sync.Mutex
var ttnRequestBeforeDeleteHooks []TTNRequestHook
var ttnRequestAfterDeleteMu sync.Mutex
var ttnRequestAfterDeleteHooks []TTNRequestHook

var ttnRequestBeforeUpsertMu sync.Mutex
var ttnRequestBeforeUpsertHooks []TTNRequestHook
var ttnRequestAfterUpsertMu sync.Mutex
var ttnRequestAfterUpsertHooks []TTNRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNRequestHook registers your hook function for all future operations.
func AddTTNRequestHook(hookPoint boil.HookPoint, ttnRequestHook TTNRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnRequestAfterSelectMu.Lock()
		ttnRequestAfterSelectHooks = append(ttnRequestAfterSelectHooks, ttnRequestHook)
		ttnRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnRequestBeforeInsertMu.Lock()
		ttnRequestBeforeInsertHooks = append(ttnRequestBeforeInsertHooks, ttnRequestHook)
		ttnRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnRequestAfterInsertMu.Lock()
		ttnRequestAfterInsertHooks = append(ttnRequestAfterInsertHooks, ttnRequestHook)
		ttnRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnRequestBeforeUpdateMu.Lock()
		ttnRequestBeforeUpdateHooks = append(ttnRequestBeforeUpdateHooks, ttnRequestHook)
		ttnRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnRequestAfterUpdateMu.Lock()
		ttnRequestAfterUpdateHooks = append(ttnRequestAfterUpdateHooks, ttnRequestHook)
		ttnRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnRequestBeforeDeleteMu.Lock()
		ttnRequestBeforeDeleteHooks = append(ttnRequestBeforeDeleteHooks, ttnRequestHook)
		ttnRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnRequestAfterDeleteMu.Lock()
		ttnRequestAfterDeleteHooks = append(ttnRequestAfterDeleteHooks, ttnRequestHook)
		ttnRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnRequestBeforeUpsertMu.Lock()
		ttnRequestBeforeUpsertHooks = append(ttnRequestBeforeUpsertHooks, ttnRequestHook)
		ttnRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnRequestAfterUpsertMu.Lock()
		ttnRequestAfterUpsertHooks = append(ttnRequestAfterUpsertHooks, ttnRequestHook)
		ttnRequestAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnRequest record from the query using the global executor.
func (q ttnRequestQuery) OneG(ctx context.Context) (*TTNRequest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnRequest record from the query.
func (q ttnRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNRequest, error) {
	o := &TTNRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNRequest records from the query using the global executor.
func (q ttnRequestQuery) AllG(ctx context.Context) (TTNRequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNRequest records from the query.
func (q ttnRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNRequestSlice, error) {
	var o []*TTNRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNRequest slice")
	}

	if len(ttnRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNRequest records in the query using the global executor
func (q ttnRequestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNRequest records in the query.
func (q ttnRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_requests rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnRequestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_requests exists")
	}

	return count > 0, nil
}

// TTNRequests retrieves all the records using an executor.
func TTNRequests(mods ...qm.QueryMod) ttnRequestQuery {
	mods = append(mods, qm.From("\"ttn_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ttn_requests\".*"})
	}

	return ttnRequestQuery{q}
}

// FindTTNRequestG retrieves a single record by ID.
func FindTTNRequestG(ctx context.Context, iD int64, selectCols ...string) (*TTNRequest, error) {
	return FindTTNRequest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TTNRequest, error) {
	ttnRequestObj := &TTNRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ttn_requests\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_requests")
	}

	if err = ttnRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnRequestObj, err
	}

	return ttnRequestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNRequest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_requests provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnRequestInsertCacheMut.RLock()
	cache, cached := ttnRequestInsertCache[key]
	ttnRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnRequestAllColumns,
			ttnRequestColumnsWithDefault,
			ttnRequestColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnRequestGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnRequestType, ttnRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnRequestType, ttnRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ttn_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ttn_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_requests")
	}

	if !cached {
		ttnRequestInsertCacheMut.Lock()
		ttnRequestInsertCache[key] = cache
		ttnRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNRequest record using the global executor.
// See Update for more documentation.
func (o *TTNRequest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnRequestUpdateCacheMut.RLock()
	cache, cached := ttnRequestUpdateCache[key]
	ttnRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnRequestAllColumns,
			ttnRequestPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnRequestGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ttn_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ttnRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnRequestType, ttnRequestMapping, append(wl, ttnRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_requests")
	}

	if !cached {
		ttnRequestUpdateCacheMut.Lock()
		ttnRequestUpdateCache[key] = cache
		ttnRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnRequestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_requests")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNRequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ttn_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnRequest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNRequest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TTNRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_requests provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnRequestUpsertCacheMut.RLock()
	cache, cached := ttnRequestUpsertCache[key]
	ttnRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ttnRequestAllColumns,
			ttnRequestColumnsWithDefault,
			ttnRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ttnRequestAllColumns,
			ttnRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ttnRequestPrimaryKeyColumns))
			copy(conflict, ttnRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ttn_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ttnRequestType, ttnRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnRequestType, ttnRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_requests")
	}

	if !cached {
		ttnRequestUpsertCacheMut.Lock()
		ttnRequestUpsertCache[key] = cache
		ttnRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNRequest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNRequest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"ttn_requests\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnRequestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_requests")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNRequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ttn_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_requests")
	}

	if len(ttnRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNRequest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNRequest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNRequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNRequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ttn_requests\".* FROM \"ttn_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNRequestSlice")
	}

	*o = slice

	return nil
}

// TTNRequestExistsG checks if the TTNRequest row exists.
func TTNRequestExistsG(ctx context.Context, iD int64) (bool, error) {
	return TTNRequestExists(ctx, boil.GetContextDB(), iD)
}

// TTNRequestExists checks if the TTNRequest row exists.
func TTNRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ttn_requests\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_requests exists")
	}

	return exists, nil
}

// Exists checks if the TTNRequest row exists.
func (o *TTNRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNRequestExists(ctx, exec, o.ID)
}
