// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionProductsPallet is an object representing the database table.
type ProductionProductsPallet struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionProducts null.Int64  `boil:"id_production_products" json:"id_production_products,omitempty" toml:"id_production_products" yaml:"id_production_products,omitempty"`
	PalletNumber         null.String `boil:"pallet_number" json:"pallet_number,omitempty" toml:"pallet_number" yaml:"pallet_number,omitempty"`

	R *productionProductsPalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionProductsPalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionProductsPalletColumns = struct {
	ID                   string
	IDProductionProducts string
	PalletNumber         string
}{
	ID:                   "id",
	IDProductionProducts: "id_production_products",
	PalletNumber:         "pallet_number",
}

var ProductionProductsPalletTableColumns = struct {
	ID                   string
	IDProductionProducts string
	PalletNumber         string
}{
	ID:                   "production_products_pallets.id",
	IDProductionProducts: "production_products_pallets.id_production_products",
	PalletNumber:         "production_products_pallets.pallet_number",
}

// Generated where

var ProductionProductsPalletWhere = struct {
	ID                   whereHelperint64
	IDProductionProducts whereHelpernull_Int64
	PalletNumber         whereHelpernull_String
}{
	ID:                   whereHelperint64{field: "\"production_products_pallets\".\"id\""},
	IDProductionProducts: whereHelpernull_Int64{field: "\"production_products_pallets\".\"id_production_products\""},
	PalletNumber:         whereHelpernull_String{field: "\"production_products_pallets\".\"pallet_number\""},
}

// ProductionProductsPalletRels is where relationship names are stored.
var ProductionProductsPalletRels = struct {
}{}

// productionProductsPalletR is where relationships are stored.
type productionProductsPalletR struct {
}

// NewStruct creates a new relationship struct
func (*productionProductsPalletR) NewStruct() *productionProductsPalletR {
	return &productionProductsPalletR{}
}

// productionProductsPalletL is where Load methods for each relationship are stored.
type productionProductsPalletL struct{}

var (
	productionProductsPalletAllColumns            = []string{"id", "id_production_products", "pallet_number"}
	productionProductsPalletColumnsWithoutDefault = []string{}
	productionProductsPalletColumnsWithDefault    = []string{"id", "id_production_products", "pallet_number"}
	productionProductsPalletPrimaryKeyColumns     = []string{"id"}
	productionProductsPalletGeneratedColumns      = []string{"id"}
)

type (
	// ProductionProductsPalletSlice is an alias for a slice of pointers to ProductionProductsPallet.
	// This should almost always be used instead of []ProductionProductsPallet.
	ProductionProductsPalletSlice []*ProductionProductsPallet
	// ProductionProductsPalletHook is the signature for custom ProductionProductsPallet hook methods
	ProductionProductsPalletHook func(context.Context, boil.ContextExecutor, *ProductionProductsPallet) error

	productionProductsPalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionProductsPalletType                 = reflect.TypeOf(&ProductionProductsPallet{})
	productionProductsPalletMapping              = queries.MakeStructMapping(productionProductsPalletType)
	productionProductsPalletPrimaryKeyMapping, _ = queries.BindMapping(productionProductsPalletType, productionProductsPalletMapping, productionProductsPalletPrimaryKeyColumns)
	productionProductsPalletInsertCacheMut       sync.RWMutex
	productionProductsPalletInsertCache          = make(map[string]insertCache)
	productionProductsPalletUpdateCacheMut       sync.RWMutex
	productionProductsPalletUpdateCache          = make(map[string]updateCache)
	productionProductsPalletUpsertCacheMut       sync.RWMutex
	productionProductsPalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionProductsPalletAfterSelectMu sync.Mutex
var productionProductsPalletAfterSelectHooks []ProductionProductsPalletHook

var productionProductsPalletBeforeInsertMu sync.Mutex
var productionProductsPalletBeforeInsertHooks []ProductionProductsPalletHook
var productionProductsPalletAfterInsertMu sync.Mutex
var productionProductsPalletAfterInsertHooks []ProductionProductsPalletHook

var productionProductsPalletBeforeUpdateMu sync.Mutex
var productionProductsPalletBeforeUpdateHooks []ProductionProductsPalletHook
var productionProductsPalletAfterUpdateMu sync.Mutex
var productionProductsPalletAfterUpdateHooks []ProductionProductsPalletHook

var productionProductsPalletBeforeDeleteMu sync.Mutex
var productionProductsPalletBeforeDeleteHooks []ProductionProductsPalletHook
var productionProductsPalletAfterDeleteMu sync.Mutex
var productionProductsPalletAfterDeleteHooks []ProductionProductsPalletHook

var productionProductsPalletBeforeUpsertMu sync.Mutex
var productionProductsPalletBeforeUpsertHooks []ProductionProductsPalletHook
var productionProductsPalletAfterUpsertMu sync.Mutex
var productionProductsPalletAfterUpsertHooks []ProductionProductsPalletHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionProductsPallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionProductsPallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionProductsPallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionProductsPallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionProductsPallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionProductsPallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionProductsPallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionProductsPallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionProductsPallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionProductsPalletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionProductsPalletHook registers your hook function for all future operations.
func AddProductionProductsPalletHook(hookPoint boil.HookPoint, productionProductsPalletHook ProductionProductsPalletHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionProductsPalletAfterSelectMu.Lock()
		productionProductsPalletAfterSelectHooks = append(productionProductsPalletAfterSelectHooks, productionProductsPalletHook)
		productionProductsPalletAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionProductsPalletBeforeInsertMu.Lock()
		productionProductsPalletBeforeInsertHooks = append(productionProductsPalletBeforeInsertHooks, productionProductsPalletHook)
		productionProductsPalletBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionProductsPalletAfterInsertMu.Lock()
		productionProductsPalletAfterInsertHooks = append(productionProductsPalletAfterInsertHooks, productionProductsPalletHook)
		productionProductsPalletAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionProductsPalletBeforeUpdateMu.Lock()
		productionProductsPalletBeforeUpdateHooks = append(productionProductsPalletBeforeUpdateHooks, productionProductsPalletHook)
		productionProductsPalletBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionProductsPalletAfterUpdateMu.Lock()
		productionProductsPalletAfterUpdateHooks = append(productionProductsPalletAfterUpdateHooks, productionProductsPalletHook)
		productionProductsPalletAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionProductsPalletBeforeDeleteMu.Lock()
		productionProductsPalletBeforeDeleteHooks = append(productionProductsPalletBeforeDeleteHooks, productionProductsPalletHook)
		productionProductsPalletBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionProductsPalletAfterDeleteMu.Lock()
		productionProductsPalletAfterDeleteHooks = append(productionProductsPalletAfterDeleteHooks, productionProductsPalletHook)
		productionProductsPalletAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionProductsPalletBeforeUpsertMu.Lock()
		productionProductsPalletBeforeUpsertHooks = append(productionProductsPalletBeforeUpsertHooks, productionProductsPalletHook)
		productionProductsPalletBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionProductsPalletAfterUpsertMu.Lock()
		productionProductsPalletAfterUpsertHooks = append(productionProductsPalletAfterUpsertHooks, productionProductsPalletHook)
		productionProductsPalletAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionProductsPallet record from the query using the global executor.
func (q productionProductsPalletQuery) OneG(ctx context.Context) (*ProductionProductsPallet, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionProductsPallet record from the query.
func (q productionProductsPalletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionProductsPallet, error) {
	o := &ProductionProductsPallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_products_pallets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionProductsPallet records from the query using the global executor.
func (q productionProductsPalletQuery) AllG(ctx context.Context) (ProductionProductsPalletSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionProductsPallet records from the query.
func (q productionProductsPalletQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionProductsPalletSlice, error) {
	var o []*ProductionProductsPallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionProductsPallet slice")
	}

	if len(productionProductsPalletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionProductsPallet records in the query using the global executor
func (q productionProductsPalletQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionProductsPallet records in the query.
func (q productionProductsPalletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_products_pallets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionProductsPalletQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionProductsPalletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_products_pallets exists")
	}

	return count > 0, nil
}

// ProductionProductsPallets retrieves all the records using an executor.
func ProductionProductsPallets(mods ...qm.QueryMod) productionProductsPalletQuery {
	mods = append(mods, qm.From("\"production_products_pallets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"production_products_pallets\".*"})
	}

	return productionProductsPalletQuery{q}
}

// FindProductionProductsPalletG retrieves a single record by ID.
func FindProductionProductsPalletG(ctx context.Context, iD int64, selectCols ...string) (*ProductionProductsPallet, error) {
	return FindProductionProductsPallet(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionProductsPallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionProductsPallet(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductionProductsPallet, error) {
	productionProductsPalletObj := &ProductionProductsPallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"production_products_pallets\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionProductsPalletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_products_pallets")
	}

	if err = productionProductsPalletObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionProductsPalletObj, err
	}

	return productionProductsPalletObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionProductsPallet) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionProductsPallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_products_pallets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionProductsPalletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionProductsPalletInsertCacheMut.RLock()
	cache, cached := productionProductsPalletInsertCache[key]
	productionProductsPalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionProductsPalletAllColumns,
			productionProductsPalletColumnsWithDefault,
			productionProductsPalletColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionProductsPalletGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionProductsPalletType, productionProductsPalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionProductsPalletType, productionProductsPalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"production_products_pallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"production_products_pallets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_products_pallets")
	}

	if !cached {
		productionProductsPalletInsertCacheMut.Lock()
		productionProductsPalletInsertCache[key] = cache
		productionProductsPalletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionProductsPallet record using the global executor.
// See Update for more documentation.
func (o *ProductionProductsPallet) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionProductsPallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionProductsPallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionProductsPalletUpdateCacheMut.RLock()
	cache, cached := productionProductsPalletUpdateCache[key]
	productionProductsPalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionProductsPalletAllColumns,
			productionProductsPalletPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionProductsPalletGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_products_pallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"production_products_pallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productionProductsPalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionProductsPalletType, productionProductsPalletMapping, append(wl, productionProductsPalletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_products_pallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_products_pallets")
	}

	if !cached {
		productionProductsPalletUpdateCacheMut.Lock()
		productionProductsPalletUpdateCache[key] = cache
		productionProductsPalletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionProductsPalletQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionProductsPalletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_products_pallets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionProductsPalletSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionProductsPalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"production_products_pallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionProductsPalletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionProductsPallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionProductsPallet")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionProductsPallet) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductionProductsPallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_products_pallets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionProductsPalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionProductsPalletUpsertCacheMut.RLock()
	cache, cached := productionProductsPalletUpsertCache[key]
	productionProductsPalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productionProductsPalletAllColumns,
			productionProductsPalletColumnsWithDefault,
			productionProductsPalletColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productionProductsPalletAllColumns,
			productionProductsPalletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_products_pallets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productionProductsPalletPrimaryKeyColumns))
			copy(conflict, productionProductsPalletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"production_products_pallets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productionProductsPalletType, productionProductsPalletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionProductsPalletType, productionProductsPalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_products_pallets")
	}

	if !cached {
		productionProductsPalletUpsertCacheMut.Lock()
		productionProductsPalletUpsertCache[key] = cache
		productionProductsPalletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionProductsPallet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionProductsPallet) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionProductsPallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionProductsPallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionProductsPallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionProductsPalletPrimaryKeyMapping)
	sql := "DELETE FROM \"production_products_pallets\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_products_pallets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionProductsPalletQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionProductsPalletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionProductsPalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_products_pallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_products_pallets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionProductsPalletSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionProductsPalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionProductsPalletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"production_products_pallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionProductsPalletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionProductsPallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_products_pallets")
	}

	if len(productionProductsPalletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionProductsPallet) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionProductsPallet provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionProductsPallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionProductsPallet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionProductsPalletSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionProductsPalletSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionProductsPalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionProductsPalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionProductsPalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"production_products_pallets\".* FROM \"production_products_pallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionProductsPalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionProductsPalletSlice")
	}

	*o = slice

	return nil
}

// ProductionProductsPalletExistsG checks if the ProductionProductsPallet row exists.
func ProductionProductsPalletExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductionProductsPalletExists(ctx, boil.GetContextDB(), iD)
}

// ProductionProductsPalletExists checks if the ProductionProductsPallet row exists.
func ProductionProductsPalletExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"production_products_pallets\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_products_pallets exists")
	}

	return exists, nil
}

// Exists checks if the ProductionProductsPallet row exists.
func (o *ProductionProductsPallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionProductsPalletExists(ctx, exec, o.ID)
}
