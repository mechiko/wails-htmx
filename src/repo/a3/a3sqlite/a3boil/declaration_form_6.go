// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeclarationForm6 is an object representing the database table.
type DeclarationForm6 struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateDate           null.String `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	Type                 null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	ReportingQuarter     null.String `boil:"reporting_quarter" json:"reporting_quarter,omitempty" toml:"reporting_quarter" yaml:"reporting_quarter,omitempty"`
	ReportingYear        null.String `boil:"reporting_year" json:"reporting_year,omitempty" toml:"reporting_year" yaml:"reporting_year,omitempty"`
	CorrectionNumber     null.String `boil:"correction_number" json:"correction_number,omitempty" toml:"correction_number" yaml:"correction_number,omitempty"`
	DirectorSurname      null.String `boil:"director_surname" json:"director_surname,omitempty" toml:"director_surname" yaml:"director_surname,omitempty"`
	DirectorName         null.String `boil:"director_name" json:"director_name,omitempty" toml:"director_name" yaml:"director_name,omitempty"`
	DirectorMiddleName   null.String `boil:"director_middle_name" json:"director_middle_name,omitempty" toml:"director_middle_name" yaml:"director_middle_name,omitempty"`
	AccountantSurname    null.String `boil:"accountant_surname" json:"accountant_surname,omitempty" toml:"accountant_surname" yaml:"accountant_surname,omitempty"`
	AccountantName       null.String `boil:"accountant_name" json:"accountant_name,omitempty" toml:"accountant_name" yaml:"accountant_name,omitempty"`
	AccountantMiddleName null.String `boil:"accountant_middle_name" json:"accountant_middle_name,omitempty" toml:"accountant_middle_name" yaml:"accountant_middle_name,omitempty"`
	GUID                 null.String `boil:"guid" json:"guid,omitempty" toml:"guid" yaml:"guid,omitempty"`

	R *declarationForm6R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L declarationForm6L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeclarationForm6Columns = struct {
	ID                   string
	CreateDate           string
	Type                 string
	ReportingQuarter     string
	ReportingYear        string
	CorrectionNumber     string
	DirectorSurname      string
	DirectorName         string
	DirectorMiddleName   string
	AccountantSurname    string
	AccountantName       string
	AccountantMiddleName string
	GUID                 string
}{
	ID:                   "id",
	CreateDate:           "create_date",
	Type:                 "type",
	ReportingQuarter:     "reporting_quarter",
	ReportingYear:        "reporting_year",
	CorrectionNumber:     "correction_number",
	DirectorSurname:      "director_surname",
	DirectorName:         "director_name",
	DirectorMiddleName:   "director_middle_name",
	AccountantSurname:    "accountant_surname",
	AccountantName:       "accountant_name",
	AccountantMiddleName: "accountant_middle_name",
	GUID:                 "guid",
}

var DeclarationForm6TableColumns = struct {
	ID                   string
	CreateDate           string
	Type                 string
	ReportingQuarter     string
	ReportingYear        string
	CorrectionNumber     string
	DirectorSurname      string
	DirectorName         string
	DirectorMiddleName   string
	AccountantSurname    string
	AccountantName       string
	AccountantMiddleName string
	GUID                 string
}{
	ID:                   "declaration_form_6.id",
	CreateDate:           "declaration_form_6.create_date",
	Type:                 "declaration_form_6.type",
	ReportingQuarter:     "declaration_form_6.reporting_quarter",
	ReportingYear:        "declaration_form_6.reporting_year",
	CorrectionNumber:     "declaration_form_6.correction_number",
	DirectorSurname:      "declaration_form_6.director_surname",
	DirectorName:         "declaration_form_6.director_name",
	DirectorMiddleName:   "declaration_form_6.director_middle_name",
	AccountantSurname:    "declaration_form_6.accountant_surname",
	AccountantName:       "declaration_form_6.accountant_name",
	AccountantMiddleName: "declaration_form_6.accountant_middle_name",
	GUID:                 "declaration_form_6.guid",
}

// Generated where

var DeclarationForm6Where = struct {
	ID                   whereHelperint64
	CreateDate           whereHelpernull_String
	Type                 whereHelpernull_String
	ReportingQuarter     whereHelpernull_String
	ReportingYear        whereHelpernull_String
	CorrectionNumber     whereHelpernull_String
	DirectorSurname      whereHelpernull_String
	DirectorName         whereHelpernull_String
	DirectorMiddleName   whereHelpernull_String
	AccountantSurname    whereHelpernull_String
	AccountantName       whereHelpernull_String
	AccountantMiddleName whereHelpernull_String
	GUID                 whereHelpernull_String
}{
	ID:                   whereHelperint64{field: "\"declaration_form_6\".\"id\""},
	CreateDate:           whereHelpernull_String{field: "\"declaration_form_6\".\"create_date\""},
	Type:                 whereHelpernull_String{field: "\"declaration_form_6\".\"type\""},
	ReportingQuarter:     whereHelpernull_String{field: "\"declaration_form_6\".\"reporting_quarter\""},
	ReportingYear:        whereHelpernull_String{field: "\"declaration_form_6\".\"reporting_year\""},
	CorrectionNumber:     whereHelpernull_String{field: "\"declaration_form_6\".\"correction_number\""},
	DirectorSurname:      whereHelpernull_String{field: "\"declaration_form_6\".\"director_surname\""},
	DirectorName:         whereHelpernull_String{field: "\"declaration_form_6\".\"director_name\""},
	DirectorMiddleName:   whereHelpernull_String{field: "\"declaration_form_6\".\"director_middle_name\""},
	AccountantSurname:    whereHelpernull_String{field: "\"declaration_form_6\".\"accountant_surname\""},
	AccountantName:       whereHelpernull_String{field: "\"declaration_form_6\".\"accountant_name\""},
	AccountantMiddleName: whereHelpernull_String{field: "\"declaration_form_6\".\"accountant_middle_name\""},
	GUID:                 whereHelpernull_String{field: "\"declaration_form_6\".\"guid\""},
}

// DeclarationForm6Rels is where relationship names are stored.
var DeclarationForm6Rels = struct {
}{}

// declarationForm6R is where relationships are stored.
type declarationForm6R struct {
}

// NewStruct creates a new relationship struct
func (*declarationForm6R) NewStruct() *declarationForm6R {
	return &declarationForm6R{}
}

// declarationForm6L is where Load methods for each relationship are stored.
type declarationForm6L struct{}

var (
	declarationForm6AllColumns            = []string{"id", "create_date", "type", "reporting_quarter", "reporting_year", "correction_number", "director_surname", "director_name", "director_middle_name", "accountant_surname", "accountant_name", "accountant_middle_name", "guid"}
	declarationForm6ColumnsWithoutDefault = []string{}
	declarationForm6ColumnsWithDefault    = []string{"id", "create_date", "type", "reporting_quarter", "reporting_year", "correction_number", "director_surname", "director_name", "director_middle_name", "accountant_surname", "accountant_name", "accountant_middle_name", "guid"}
	declarationForm6PrimaryKeyColumns     = []string{"id"}
	declarationForm6GeneratedColumns      = []string{"id"}
)

type (
	// DeclarationForm6Slice is an alias for a slice of pointers to DeclarationForm6.
	// This should almost always be used instead of []DeclarationForm6.
	DeclarationForm6Slice []*DeclarationForm6
	// DeclarationForm6Hook is the signature for custom DeclarationForm6 hook methods
	DeclarationForm6Hook func(context.Context, boil.ContextExecutor, *DeclarationForm6) error

	declarationForm6Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	declarationForm6Type                 = reflect.TypeOf(&DeclarationForm6{})
	declarationForm6Mapping              = queries.MakeStructMapping(declarationForm6Type)
	declarationForm6PrimaryKeyMapping, _ = queries.BindMapping(declarationForm6Type, declarationForm6Mapping, declarationForm6PrimaryKeyColumns)
	declarationForm6InsertCacheMut       sync.RWMutex
	declarationForm6InsertCache          = make(map[string]insertCache)
	declarationForm6UpdateCacheMut       sync.RWMutex
	declarationForm6UpdateCache          = make(map[string]updateCache)
	declarationForm6UpsertCacheMut       sync.RWMutex
	declarationForm6UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var declarationForm6AfterSelectMu sync.Mutex
var declarationForm6AfterSelectHooks []DeclarationForm6Hook

var declarationForm6BeforeInsertMu sync.Mutex
var declarationForm6BeforeInsertHooks []DeclarationForm6Hook
var declarationForm6AfterInsertMu sync.Mutex
var declarationForm6AfterInsertHooks []DeclarationForm6Hook

var declarationForm6BeforeUpdateMu sync.Mutex
var declarationForm6BeforeUpdateHooks []DeclarationForm6Hook
var declarationForm6AfterUpdateMu sync.Mutex
var declarationForm6AfterUpdateHooks []DeclarationForm6Hook

var declarationForm6BeforeDeleteMu sync.Mutex
var declarationForm6BeforeDeleteHooks []DeclarationForm6Hook
var declarationForm6AfterDeleteMu sync.Mutex
var declarationForm6AfterDeleteHooks []DeclarationForm6Hook

var declarationForm6BeforeUpsertMu sync.Mutex
var declarationForm6BeforeUpsertHooks []DeclarationForm6Hook
var declarationForm6AfterUpsertMu sync.Mutex
var declarationForm6AfterUpsertHooks []DeclarationForm6Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeclarationForm6) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeclarationForm6) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeclarationForm6) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeclarationForm6) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeclarationForm6) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeclarationForm6) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeclarationForm6) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeclarationForm6) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeclarationForm6) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range declarationForm6AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeclarationForm6Hook registers your hook function for all future operations.
func AddDeclarationForm6Hook(hookPoint boil.HookPoint, declarationForm6Hook DeclarationForm6Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		declarationForm6AfterSelectMu.Lock()
		declarationForm6AfterSelectHooks = append(declarationForm6AfterSelectHooks, declarationForm6Hook)
		declarationForm6AfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		declarationForm6BeforeInsertMu.Lock()
		declarationForm6BeforeInsertHooks = append(declarationForm6BeforeInsertHooks, declarationForm6Hook)
		declarationForm6BeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		declarationForm6AfterInsertMu.Lock()
		declarationForm6AfterInsertHooks = append(declarationForm6AfterInsertHooks, declarationForm6Hook)
		declarationForm6AfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		declarationForm6BeforeUpdateMu.Lock()
		declarationForm6BeforeUpdateHooks = append(declarationForm6BeforeUpdateHooks, declarationForm6Hook)
		declarationForm6BeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		declarationForm6AfterUpdateMu.Lock()
		declarationForm6AfterUpdateHooks = append(declarationForm6AfterUpdateHooks, declarationForm6Hook)
		declarationForm6AfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		declarationForm6BeforeDeleteMu.Lock()
		declarationForm6BeforeDeleteHooks = append(declarationForm6BeforeDeleteHooks, declarationForm6Hook)
		declarationForm6BeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		declarationForm6AfterDeleteMu.Lock()
		declarationForm6AfterDeleteHooks = append(declarationForm6AfterDeleteHooks, declarationForm6Hook)
		declarationForm6AfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		declarationForm6BeforeUpsertMu.Lock()
		declarationForm6BeforeUpsertHooks = append(declarationForm6BeforeUpsertHooks, declarationForm6Hook)
		declarationForm6BeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		declarationForm6AfterUpsertMu.Lock()
		declarationForm6AfterUpsertHooks = append(declarationForm6AfterUpsertHooks, declarationForm6Hook)
		declarationForm6AfterUpsertMu.Unlock()
	}
}

// OneG returns a single declarationForm6 record from the query using the global executor.
func (q declarationForm6Query) OneG(ctx context.Context) (*DeclarationForm6, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single declarationForm6 record from the query.
func (q declarationForm6Query) One(ctx context.Context, exec boil.ContextExecutor) (*DeclarationForm6, error) {
	o := &DeclarationForm6{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for declaration_form_6")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DeclarationForm6 records from the query using the global executor.
func (q declarationForm6Query) AllG(ctx context.Context) (DeclarationForm6Slice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeclarationForm6 records from the query.
func (q declarationForm6Query) All(ctx context.Context, exec boil.ContextExecutor) (DeclarationForm6Slice, error) {
	var o []*DeclarationForm6

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to DeclarationForm6 slice")
	}

	if len(declarationForm6AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DeclarationForm6 records in the query using the global executor
func (q declarationForm6Query) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeclarationForm6 records in the query.
func (q declarationForm6Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count declaration_form_6 rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q declarationForm6Query) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q declarationForm6Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if declaration_form_6 exists")
	}

	return count > 0, nil
}

// DeclarationForm6S retrieves all the records using an executor.
func DeclarationForm6S(mods ...qm.QueryMod) declarationForm6Query {
	mods = append(mods, qm.From("\"declaration_form_6\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"declaration_form_6\".*"})
	}

	return declarationForm6Query{q}
}

// FindDeclarationForm6G retrieves a single record by ID.
func FindDeclarationForm6G(ctx context.Context, iD int64, selectCols ...string) (*DeclarationForm6, error) {
	return FindDeclarationForm6(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeclarationForm6 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeclarationForm6(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DeclarationForm6, error) {
	declarationForm6Obj := &DeclarationForm6{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"declaration_form_6\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, declarationForm6Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from declaration_form_6")
	}

	if err = declarationForm6Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return declarationForm6Obj, err
	}

	return declarationForm6Obj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeclarationForm6) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeclarationForm6) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no declaration_form_6 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(declarationForm6ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	declarationForm6InsertCacheMut.RLock()
	cache, cached := declarationForm6InsertCache[key]
	declarationForm6InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			declarationForm6AllColumns,
			declarationForm6ColumnsWithDefault,
			declarationForm6ColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, declarationForm6GeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(declarationForm6Type, declarationForm6Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(declarationForm6Type, declarationForm6Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"declaration_form_6\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"declaration_form_6\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into declaration_form_6")
	}

	if !cached {
		declarationForm6InsertCacheMut.Lock()
		declarationForm6InsertCache[key] = cache
		declarationForm6InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DeclarationForm6 record using the global executor.
// See Update for more documentation.
func (o *DeclarationForm6) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeclarationForm6.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeclarationForm6) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	declarationForm6UpdateCacheMut.RLock()
	cache, cached := declarationForm6UpdateCache[key]
	declarationForm6UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			declarationForm6AllColumns,
			declarationForm6PrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, declarationForm6GeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update declaration_form_6, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"declaration_form_6\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, declarationForm6PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(declarationForm6Type, declarationForm6Mapping, append(wl, declarationForm6PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update declaration_form_6 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for declaration_form_6")
	}

	if !cached {
		declarationForm6UpdateCacheMut.Lock()
		declarationForm6UpdateCache[key] = cache
		declarationForm6UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q declarationForm6Query) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q declarationForm6Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for declaration_form_6")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for declaration_form_6")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeclarationForm6Slice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeclarationForm6Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationForm6PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"declaration_form_6\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, declarationForm6PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in declarationForm6 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all declarationForm6")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeclarationForm6) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeclarationForm6) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no declaration_form_6 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(declarationForm6ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	declarationForm6UpsertCacheMut.RLock()
	cache, cached := declarationForm6UpsertCache[key]
	declarationForm6UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			declarationForm6AllColumns,
			declarationForm6ColumnsWithDefault,
			declarationForm6ColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			declarationForm6AllColumns,
			declarationForm6PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert declaration_form_6, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(declarationForm6PrimaryKeyColumns))
			copy(conflict, declarationForm6PrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"declaration_form_6\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(declarationForm6Type, declarationForm6Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(declarationForm6Type, declarationForm6Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert declaration_form_6")
	}

	if !cached {
		declarationForm6UpsertCacheMut.Lock()
		declarationForm6UpsertCache[key] = cache
		declarationForm6UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DeclarationForm6 record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeclarationForm6) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeclarationForm6 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeclarationForm6) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no DeclarationForm6 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), declarationForm6PrimaryKeyMapping)
	sql := "DELETE FROM \"declaration_form_6\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from declaration_form_6")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for declaration_form_6")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q declarationForm6Query) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q declarationForm6Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no declarationForm6Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from declaration_form_6")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for declaration_form_6")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeclarationForm6Slice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeclarationForm6Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(declarationForm6BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationForm6PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"declaration_form_6\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, declarationForm6PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from declarationForm6 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for declaration_form_6")
	}

	if len(declarationForm6AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeclarationForm6) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no DeclarationForm6 provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeclarationForm6) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeclarationForm6(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeclarationForm6Slice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty DeclarationForm6Slice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeclarationForm6Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeclarationForm6Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), declarationForm6PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"declaration_form_6\".* FROM \"declaration_form_6\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, declarationForm6PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in DeclarationForm6Slice")
	}

	*o = slice

	return nil
}

// DeclarationForm6ExistsG checks if the DeclarationForm6 row exists.
func DeclarationForm6ExistsG(ctx context.Context, iD int64) (bool, error) {
	return DeclarationForm6Exists(ctx, boil.GetContextDB(), iD)
}

// DeclarationForm6Exists checks if the DeclarationForm6 row exists.
func DeclarationForm6Exists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"declaration_form_6\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if declaration_form_6 exists")
	}

	return exists, nil
}

// Exists checks if the DeclarationForm6 row exists.
func (o *DeclarationForm6) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeclarationForm6Exists(ctx, exec, o.ID)
}
