// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImportProductsMark is an object representing the database table.
type ImportProductsMark struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDImportProducts      null.Int64  `boil:"id_import_products" json:"id_import_products,omitempty" toml:"id_import_products" yaml:"id_import_products,omitempty"`
	IDImportProductsBoxes null.Int64  `boil:"id_import_products_boxes" json:"id_import_products_boxes,omitempty" toml:"id_import_products_boxes" yaml:"id_import_products_boxes,omitempty"`
	Mark                  null.String `boil:"mark" json:"mark,omitempty" toml:"mark" yaml:"mark,omitempty"`

	R *importProductsMarkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L importProductsMarkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImportProductsMarkColumns = struct {
	ID                    string
	IDImportProducts      string
	IDImportProductsBoxes string
	Mark                  string
}{
	ID:                    "id",
	IDImportProducts:      "id_import_products",
	IDImportProductsBoxes: "id_import_products_boxes",
	Mark:                  "mark",
}

var ImportProductsMarkTableColumns = struct {
	ID                    string
	IDImportProducts      string
	IDImportProductsBoxes string
	Mark                  string
}{
	ID:                    "import_products_marks.id",
	IDImportProducts:      "import_products_marks.id_import_products",
	IDImportProductsBoxes: "import_products_marks.id_import_products_boxes",
	Mark:                  "import_products_marks.mark",
}

// Generated where

var ImportProductsMarkWhere = struct {
	ID                    whereHelperint64
	IDImportProducts      whereHelpernull_Int64
	IDImportProductsBoxes whereHelpernull_Int64
	Mark                  whereHelpernull_String
}{
	ID:                    whereHelperint64{field: "\"import_products_marks\".\"id\""},
	IDImportProducts:      whereHelpernull_Int64{field: "\"import_products_marks\".\"id_import_products\""},
	IDImportProductsBoxes: whereHelpernull_Int64{field: "\"import_products_marks\".\"id_import_products_boxes\""},
	Mark:                  whereHelpernull_String{field: "\"import_products_marks\".\"mark\""},
}

// ImportProductsMarkRels is where relationship names are stored.
var ImportProductsMarkRels = struct {
}{}

// importProductsMarkR is where relationships are stored.
type importProductsMarkR struct {
}

// NewStruct creates a new relationship struct
func (*importProductsMarkR) NewStruct() *importProductsMarkR {
	return &importProductsMarkR{}
}

// importProductsMarkL is where Load methods for each relationship are stored.
type importProductsMarkL struct{}

var (
	importProductsMarkAllColumns            = []string{"id", "id_import_products", "id_import_products_boxes", "mark"}
	importProductsMarkColumnsWithoutDefault = []string{}
	importProductsMarkColumnsWithDefault    = []string{"id", "id_import_products", "id_import_products_boxes", "mark"}
	importProductsMarkPrimaryKeyColumns     = []string{"id"}
	importProductsMarkGeneratedColumns      = []string{"id"}
)

type (
	// ImportProductsMarkSlice is an alias for a slice of pointers to ImportProductsMark.
	// This should almost always be used instead of []ImportProductsMark.
	ImportProductsMarkSlice []*ImportProductsMark
	// ImportProductsMarkHook is the signature for custom ImportProductsMark hook methods
	ImportProductsMarkHook func(context.Context, boil.ContextExecutor, *ImportProductsMark) error

	importProductsMarkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	importProductsMarkType                 = reflect.TypeOf(&ImportProductsMark{})
	importProductsMarkMapping              = queries.MakeStructMapping(importProductsMarkType)
	importProductsMarkPrimaryKeyMapping, _ = queries.BindMapping(importProductsMarkType, importProductsMarkMapping, importProductsMarkPrimaryKeyColumns)
	importProductsMarkInsertCacheMut       sync.RWMutex
	importProductsMarkInsertCache          = make(map[string]insertCache)
	importProductsMarkUpdateCacheMut       sync.RWMutex
	importProductsMarkUpdateCache          = make(map[string]updateCache)
	importProductsMarkUpsertCacheMut       sync.RWMutex
	importProductsMarkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var importProductsMarkAfterSelectMu sync.Mutex
var importProductsMarkAfterSelectHooks []ImportProductsMarkHook

var importProductsMarkBeforeInsertMu sync.Mutex
var importProductsMarkBeforeInsertHooks []ImportProductsMarkHook
var importProductsMarkAfterInsertMu sync.Mutex
var importProductsMarkAfterInsertHooks []ImportProductsMarkHook

var importProductsMarkBeforeUpdateMu sync.Mutex
var importProductsMarkBeforeUpdateHooks []ImportProductsMarkHook
var importProductsMarkAfterUpdateMu sync.Mutex
var importProductsMarkAfterUpdateHooks []ImportProductsMarkHook

var importProductsMarkBeforeDeleteMu sync.Mutex
var importProductsMarkBeforeDeleteHooks []ImportProductsMarkHook
var importProductsMarkAfterDeleteMu sync.Mutex
var importProductsMarkAfterDeleteHooks []ImportProductsMarkHook

var importProductsMarkBeforeUpsertMu sync.Mutex
var importProductsMarkBeforeUpsertHooks []ImportProductsMarkHook
var importProductsMarkAfterUpsertMu sync.Mutex
var importProductsMarkAfterUpsertHooks []ImportProductsMarkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImportProductsMark) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImportProductsMark) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImportProductsMark) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImportProductsMark) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImportProductsMark) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImportProductsMark) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImportProductsMark) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImportProductsMark) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImportProductsMark) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importProductsMarkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImportProductsMarkHook registers your hook function for all future operations.
func AddImportProductsMarkHook(hookPoint boil.HookPoint, importProductsMarkHook ImportProductsMarkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		importProductsMarkAfterSelectMu.Lock()
		importProductsMarkAfterSelectHooks = append(importProductsMarkAfterSelectHooks, importProductsMarkHook)
		importProductsMarkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		importProductsMarkBeforeInsertMu.Lock()
		importProductsMarkBeforeInsertHooks = append(importProductsMarkBeforeInsertHooks, importProductsMarkHook)
		importProductsMarkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		importProductsMarkAfterInsertMu.Lock()
		importProductsMarkAfterInsertHooks = append(importProductsMarkAfterInsertHooks, importProductsMarkHook)
		importProductsMarkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		importProductsMarkBeforeUpdateMu.Lock()
		importProductsMarkBeforeUpdateHooks = append(importProductsMarkBeforeUpdateHooks, importProductsMarkHook)
		importProductsMarkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		importProductsMarkAfterUpdateMu.Lock()
		importProductsMarkAfterUpdateHooks = append(importProductsMarkAfterUpdateHooks, importProductsMarkHook)
		importProductsMarkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		importProductsMarkBeforeDeleteMu.Lock()
		importProductsMarkBeforeDeleteHooks = append(importProductsMarkBeforeDeleteHooks, importProductsMarkHook)
		importProductsMarkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		importProductsMarkAfterDeleteMu.Lock()
		importProductsMarkAfterDeleteHooks = append(importProductsMarkAfterDeleteHooks, importProductsMarkHook)
		importProductsMarkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		importProductsMarkBeforeUpsertMu.Lock()
		importProductsMarkBeforeUpsertHooks = append(importProductsMarkBeforeUpsertHooks, importProductsMarkHook)
		importProductsMarkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		importProductsMarkAfterUpsertMu.Lock()
		importProductsMarkAfterUpsertHooks = append(importProductsMarkAfterUpsertHooks, importProductsMarkHook)
		importProductsMarkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single importProductsMark record from the query using the global executor.
func (q importProductsMarkQuery) OneG(ctx context.Context) (*ImportProductsMark, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single importProductsMark record from the query.
func (q importProductsMarkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ImportProductsMark, error) {
	o := &ImportProductsMark{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for import_products_marks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ImportProductsMark records from the query using the global executor.
func (q importProductsMarkQuery) AllG(ctx context.Context) (ImportProductsMarkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ImportProductsMark records from the query.
func (q importProductsMarkQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImportProductsMarkSlice, error) {
	var o []*ImportProductsMark

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ImportProductsMark slice")
	}

	if len(importProductsMarkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ImportProductsMark records in the query using the global executor
func (q importProductsMarkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ImportProductsMark records in the query.
func (q importProductsMarkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count import_products_marks rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q importProductsMarkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q importProductsMarkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if import_products_marks exists")
	}

	return count > 0, nil
}

// ImportProductsMarks retrieves all the records using an executor.
func ImportProductsMarks(mods ...qm.QueryMod) importProductsMarkQuery {
	mods = append(mods, qm.From("\"import_products_marks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"import_products_marks\".*"})
	}

	return importProductsMarkQuery{q}
}

// FindImportProductsMarkG retrieves a single record by ID.
func FindImportProductsMarkG(ctx context.Context, iD int64, selectCols ...string) (*ImportProductsMark, error) {
	return FindImportProductsMark(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindImportProductsMark retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImportProductsMark(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ImportProductsMark, error) {
	importProductsMarkObj := &ImportProductsMark{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"import_products_marks\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, importProductsMarkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from import_products_marks")
	}

	if err = importProductsMarkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return importProductsMarkObj, err
	}

	return importProductsMarkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ImportProductsMark) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImportProductsMark) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_products_marks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importProductsMarkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	importProductsMarkInsertCacheMut.RLock()
	cache, cached := importProductsMarkInsertCache[key]
	importProductsMarkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			importProductsMarkAllColumns,
			importProductsMarkColumnsWithDefault,
			importProductsMarkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, importProductsMarkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(importProductsMarkType, importProductsMarkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(importProductsMarkType, importProductsMarkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"import_products_marks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"import_products_marks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into import_products_marks")
	}

	if !cached {
		importProductsMarkInsertCacheMut.Lock()
		importProductsMarkInsertCache[key] = cache
		importProductsMarkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ImportProductsMark record using the global executor.
// See Update for more documentation.
func (o *ImportProductsMark) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ImportProductsMark.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImportProductsMark) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	importProductsMarkUpdateCacheMut.RLock()
	cache, cached := importProductsMarkUpdateCache[key]
	importProductsMarkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			importProductsMarkAllColumns,
			importProductsMarkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, importProductsMarkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update import_products_marks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"import_products_marks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, importProductsMarkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(importProductsMarkType, importProductsMarkMapping, append(wl, importProductsMarkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update import_products_marks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for import_products_marks")
	}

	if !cached {
		importProductsMarkUpdateCacheMut.Lock()
		importProductsMarkUpdateCache[key] = cache
		importProductsMarkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q importProductsMarkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q importProductsMarkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for import_products_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for import_products_marks")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ImportProductsMarkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImportProductsMarkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importProductsMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"import_products_marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importProductsMarkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in importProductsMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all importProductsMark")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ImportProductsMark) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImportProductsMark) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no import_products_marks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importProductsMarkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	importProductsMarkUpsertCacheMut.RLock()
	cache, cached := importProductsMarkUpsertCache[key]
	importProductsMarkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			importProductsMarkAllColumns,
			importProductsMarkColumnsWithDefault,
			importProductsMarkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			importProductsMarkAllColumns,
			importProductsMarkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert import_products_marks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(importProductsMarkPrimaryKeyColumns))
			copy(conflict, importProductsMarkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"import_products_marks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(importProductsMarkType, importProductsMarkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(importProductsMarkType, importProductsMarkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert import_products_marks")
	}

	if !cached {
		importProductsMarkUpsertCacheMut.Lock()
		importProductsMarkUpsertCache[key] = cache
		importProductsMarkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ImportProductsMark record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ImportProductsMark) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ImportProductsMark record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImportProductsMark) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ImportProductsMark provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), importProductsMarkPrimaryKeyMapping)
	sql := "DELETE FROM \"import_products_marks\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from import_products_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for import_products_marks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q importProductsMarkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q importProductsMarkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no importProductsMarkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from import_products_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_products_marks")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ImportProductsMarkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImportProductsMarkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(importProductsMarkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importProductsMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"import_products_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importProductsMarkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from importProductsMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for import_products_marks")
	}

	if len(importProductsMarkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ImportProductsMark) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ImportProductsMark provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImportProductsMark) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImportProductsMark(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportProductsMarkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ImportProductsMarkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportProductsMarkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImportProductsMarkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importProductsMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"import_products_marks\".* FROM \"import_products_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, importProductsMarkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ImportProductsMarkSlice")
	}

	*o = slice

	return nil
}

// ImportProductsMarkExistsG checks if the ImportProductsMark row exists.
func ImportProductsMarkExistsG(ctx context.Context, iD int64) (bool, error) {
	return ImportProductsMarkExists(ctx, boil.GetContextDB(), iD)
}

// ImportProductsMarkExists checks if the ImportProductsMark row exists.
func ImportProductsMarkExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"import_products_marks\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if import_products_marks exists")
	}

	return exists, nil
}

// Exists checks if the ImportProductsMark row exists.
func (o *ImportProductsMark) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImportProductsMarkExists(ctx, exec, o.ID)
}
