// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTNForm2Content is an object representing the database table.
type TTNForm2Content struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTTNForm2           null.Int64  `boil:"id_ttn_form2" json:"id_ttn_form2,omitempty" toml:"id_ttn_form2" yaml:"id_ttn_form2,omitempty"`
	ProductIddomain      null.String `boil:"product_iddomain" json:"product_iddomain,omitempty" toml:"product_iddomain" yaml:"product_iddomain,omitempty"`
	ProductInformF2RegID null.String `boil:"product_inform_f2_reg_id" json:"product_inform_f2_reg_id,omitempty" toml:"product_inform_f2_reg_id" yaml:"product_inform_f2_reg_id,omitempty"`
	BottlingDate         null.String `boil:"bottling_date" json:"bottling_date,omitempty" toml:"bottling_date" yaml:"bottling_date,omitempty"`

	R *ttnForm2ContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ttnForm2ContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTNForm2ContentColumns = struct {
	ID                   string
	IDTTNForm2           string
	ProductIddomain      string
	ProductInformF2RegID string
	BottlingDate         string
}{
	ID:                   "id",
	IDTTNForm2:           "id_ttn_form2",
	ProductIddomain:      "product_iddomain",
	ProductInformF2RegID: "product_inform_f2_reg_id",
	BottlingDate:         "bottling_date",
}

var TTNForm2ContentTableColumns = struct {
	ID                   string
	IDTTNForm2           string
	ProductIddomain      string
	ProductInformF2RegID string
	BottlingDate         string
}{
	ID:                   "ttn_form2_content.id",
	IDTTNForm2:           "ttn_form2_content.id_ttn_form2",
	ProductIddomain:      "ttn_form2_content.product_iddomain",
	ProductInformF2RegID: "ttn_form2_content.product_inform_f2_reg_id",
	BottlingDate:         "ttn_form2_content.bottling_date",
}

// Generated where

var TTNForm2ContentWhere = struct {
	ID                   whereHelperint64
	IDTTNForm2           whereHelpernull_Int64
	ProductIddomain      whereHelpernull_String
	ProductInformF2RegID whereHelpernull_String
	BottlingDate         whereHelpernull_String
}{
	ID:                   whereHelperint64{field: "\"ttn_form2_content\".\"id\""},
	IDTTNForm2:           whereHelpernull_Int64{field: "\"ttn_form2_content\".\"id_ttn_form2\""},
	ProductIddomain:      whereHelpernull_String{field: "\"ttn_form2_content\".\"product_iddomain\""},
	ProductInformF2RegID: whereHelpernull_String{field: "\"ttn_form2_content\".\"product_inform_f2_reg_id\""},
	BottlingDate:         whereHelpernull_String{field: "\"ttn_form2_content\".\"bottling_date\""},
}

// TTNForm2ContentRels is where relationship names are stored.
var TTNForm2ContentRels = struct {
}{}

// ttnForm2ContentR is where relationships are stored.
type ttnForm2ContentR struct {
}

// NewStruct creates a new relationship struct
func (*ttnForm2ContentR) NewStruct() *ttnForm2ContentR {
	return &ttnForm2ContentR{}
}

// ttnForm2ContentL is where Load methods for each relationship are stored.
type ttnForm2ContentL struct{}

var (
	ttnForm2ContentAllColumns            = []string{"id", "id_ttn_form2", "product_iddomain", "product_inform_f2_reg_id", "bottling_date"}
	ttnForm2ContentColumnsWithoutDefault = []string{}
	ttnForm2ContentColumnsWithDefault    = []string{"id", "id_ttn_form2", "product_iddomain", "product_inform_f2_reg_id", "bottling_date"}
	ttnForm2ContentPrimaryKeyColumns     = []string{"id"}
	ttnForm2ContentGeneratedColumns      = []string{"id"}
)

type (
	// TTNForm2ContentSlice is an alias for a slice of pointers to TTNForm2Content.
	// This should almost always be used instead of []TTNForm2Content.
	TTNForm2ContentSlice []*TTNForm2Content
	// TTNForm2ContentHook is the signature for custom TTNForm2Content hook methods
	TTNForm2ContentHook func(context.Context, boil.ContextExecutor, *TTNForm2Content) error

	ttnForm2ContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ttnForm2ContentType                 = reflect.TypeOf(&TTNForm2Content{})
	ttnForm2ContentMapping              = queries.MakeStructMapping(ttnForm2ContentType)
	ttnForm2ContentPrimaryKeyMapping, _ = queries.BindMapping(ttnForm2ContentType, ttnForm2ContentMapping, ttnForm2ContentPrimaryKeyColumns)
	ttnForm2ContentInsertCacheMut       sync.RWMutex
	ttnForm2ContentInsertCache          = make(map[string]insertCache)
	ttnForm2ContentUpdateCacheMut       sync.RWMutex
	ttnForm2ContentUpdateCache          = make(map[string]updateCache)
	ttnForm2ContentUpsertCacheMut       sync.RWMutex
	ttnForm2ContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ttnForm2ContentAfterSelectMu sync.Mutex
var ttnForm2ContentAfterSelectHooks []TTNForm2ContentHook

var ttnForm2ContentBeforeInsertMu sync.Mutex
var ttnForm2ContentBeforeInsertHooks []TTNForm2ContentHook
var ttnForm2ContentAfterInsertMu sync.Mutex
var ttnForm2ContentAfterInsertHooks []TTNForm2ContentHook

var ttnForm2ContentBeforeUpdateMu sync.Mutex
var ttnForm2ContentBeforeUpdateHooks []TTNForm2ContentHook
var ttnForm2ContentAfterUpdateMu sync.Mutex
var ttnForm2ContentAfterUpdateHooks []TTNForm2ContentHook

var ttnForm2ContentBeforeDeleteMu sync.Mutex
var ttnForm2ContentBeforeDeleteHooks []TTNForm2ContentHook
var ttnForm2ContentAfterDeleteMu sync.Mutex
var ttnForm2ContentAfterDeleteHooks []TTNForm2ContentHook

var ttnForm2ContentBeforeUpsertMu sync.Mutex
var ttnForm2ContentBeforeUpsertHooks []TTNForm2ContentHook
var ttnForm2ContentAfterUpsertMu sync.Mutex
var ttnForm2ContentAfterUpsertHooks []TTNForm2ContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTNForm2Content) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTNForm2Content) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTNForm2Content) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTNForm2Content) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTNForm2Content) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTNForm2Content) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTNForm2Content) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTNForm2Content) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTNForm2Content) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ttnForm2ContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTNForm2ContentHook registers your hook function for all future operations.
func AddTTNForm2ContentHook(hookPoint boil.HookPoint, ttnForm2ContentHook TTNForm2ContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ttnForm2ContentAfterSelectMu.Lock()
		ttnForm2ContentAfterSelectHooks = append(ttnForm2ContentAfterSelectHooks, ttnForm2ContentHook)
		ttnForm2ContentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ttnForm2ContentBeforeInsertMu.Lock()
		ttnForm2ContentBeforeInsertHooks = append(ttnForm2ContentBeforeInsertHooks, ttnForm2ContentHook)
		ttnForm2ContentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ttnForm2ContentAfterInsertMu.Lock()
		ttnForm2ContentAfterInsertHooks = append(ttnForm2ContentAfterInsertHooks, ttnForm2ContentHook)
		ttnForm2ContentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ttnForm2ContentBeforeUpdateMu.Lock()
		ttnForm2ContentBeforeUpdateHooks = append(ttnForm2ContentBeforeUpdateHooks, ttnForm2ContentHook)
		ttnForm2ContentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ttnForm2ContentAfterUpdateMu.Lock()
		ttnForm2ContentAfterUpdateHooks = append(ttnForm2ContentAfterUpdateHooks, ttnForm2ContentHook)
		ttnForm2ContentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ttnForm2ContentBeforeDeleteMu.Lock()
		ttnForm2ContentBeforeDeleteHooks = append(ttnForm2ContentBeforeDeleteHooks, ttnForm2ContentHook)
		ttnForm2ContentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ttnForm2ContentAfterDeleteMu.Lock()
		ttnForm2ContentAfterDeleteHooks = append(ttnForm2ContentAfterDeleteHooks, ttnForm2ContentHook)
		ttnForm2ContentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ttnForm2ContentBeforeUpsertMu.Lock()
		ttnForm2ContentBeforeUpsertHooks = append(ttnForm2ContentBeforeUpsertHooks, ttnForm2ContentHook)
		ttnForm2ContentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ttnForm2ContentAfterUpsertMu.Lock()
		ttnForm2ContentAfterUpsertHooks = append(ttnForm2ContentAfterUpsertHooks, ttnForm2ContentHook)
		ttnForm2ContentAfterUpsertMu.Unlock()
	}
}

// OneG returns a single ttnForm2Content record from the query using the global executor.
func (q ttnForm2ContentQuery) OneG(ctx context.Context) (*TTNForm2Content, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single ttnForm2Content record from the query.
func (q ttnForm2ContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTNForm2Content, error) {
	o := &TTNForm2Content{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for ttn_form2_content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTNForm2Content records from the query using the global executor.
func (q ttnForm2ContentQuery) AllG(ctx context.Context) (TTNForm2ContentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTNForm2Content records from the query.
func (q ttnForm2ContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTNForm2ContentSlice, error) {
	var o []*TTNForm2Content

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to TTNForm2Content slice")
	}

	if len(ttnForm2ContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTNForm2Content records in the query using the global executor
func (q ttnForm2ContentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTNForm2Content records in the query.
func (q ttnForm2ContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count ttn_form2_content rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ttnForm2ContentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ttnForm2ContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if ttn_form2_content exists")
	}

	return count > 0, nil
}

// TTNForm2Contents retrieves all the records using an executor.
func TTNForm2Contents(mods ...qm.QueryMod) ttnForm2ContentQuery {
	mods = append(mods, qm.From("\"ttn_form2_content\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ttn_form2_content\".*"})
	}

	return ttnForm2ContentQuery{q}
}

// FindTTNForm2ContentG retrieves a single record by ID.
func FindTTNForm2ContentG(ctx context.Context, iD int64, selectCols ...string) (*TTNForm2Content, error) {
	return FindTTNForm2Content(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTTNForm2Content retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTNForm2Content(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TTNForm2Content, error) {
	ttnForm2ContentObj := &TTNForm2Content{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ttn_form2_content\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ttnForm2ContentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from ttn_form2_content")
	}

	if err = ttnForm2ContentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ttnForm2ContentObj, err
	}

	return ttnForm2ContentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTNForm2Content) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTNForm2Content) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_form2_content provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnForm2ContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ttnForm2ContentInsertCacheMut.RLock()
	cache, cached := ttnForm2ContentInsertCache[key]
	ttnForm2ContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ttnForm2ContentAllColumns,
			ttnForm2ContentColumnsWithDefault,
			ttnForm2ContentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ttnForm2ContentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ttnForm2ContentType, ttnForm2ContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ttnForm2ContentType, ttnForm2ContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ttn_form2_content\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ttn_form2_content\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into ttn_form2_content")
	}

	if !cached {
		ttnForm2ContentInsertCacheMut.Lock()
		ttnForm2ContentInsertCache[key] = cache
		ttnForm2ContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTNForm2Content record using the global executor.
// See Update for more documentation.
func (o *TTNForm2Content) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTNForm2Content.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTNForm2Content) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ttnForm2ContentUpdateCacheMut.RLock()
	cache, cached := ttnForm2ContentUpdateCache[key]
	ttnForm2ContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ttnForm2ContentAllColumns,
			ttnForm2ContentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ttnForm2ContentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update ttn_form2_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ttn_form2_content\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ttnForm2ContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ttnForm2ContentType, ttnForm2ContentMapping, append(wl, ttnForm2ContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update ttn_form2_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for ttn_form2_content")
	}

	if !cached {
		ttnForm2ContentUpdateCacheMut.Lock()
		ttnForm2ContentUpdateCache[key] = cache
		ttnForm2ContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ttnForm2ContentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ttnForm2ContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for ttn_form2_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for ttn_form2_content")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTNForm2ContentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTNForm2ContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnForm2ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ttn_form2_content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnForm2ContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in ttnForm2Content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all ttnForm2Content")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTNForm2Content) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TTNForm2Content) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no ttn_form2_content provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ttnForm2ContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ttnForm2ContentUpsertCacheMut.RLock()
	cache, cached := ttnForm2ContentUpsertCache[key]
	ttnForm2ContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ttnForm2ContentAllColumns,
			ttnForm2ContentColumnsWithDefault,
			ttnForm2ContentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ttnForm2ContentAllColumns,
			ttnForm2ContentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert ttn_form2_content, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ttnForm2ContentPrimaryKeyColumns))
			copy(conflict, ttnForm2ContentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ttn_form2_content\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ttnForm2ContentType, ttnForm2ContentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ttnForm2ContentType, ttnForm2ContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert ttn_form2_content")
	}

	if !cached {
		ttnForm2ContentUpsertCacheMut.Lock()
		ttnForm2ContentUpsertCache[key] = cache
		ttnForm2ContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTNForm2Content record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTNForm2Content) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTNForm2Content record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTNForm2Content) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no TTNForm2Content provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ttnForm2ContentPrimaryKeyMapping)
	sql := "DELETE FROM \"ttn_form2_content\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from ttn_form2_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for ttn_form2_content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ttnForm2ContentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ttnForm2ContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no ttnForm2ContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttn_form2_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_form2_content")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTNForm2ContentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTNForm2ContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ttnForm2ContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnForm2ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ttn_form2_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnForm2ContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from ttnForm2Content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for ttn_form2_content")
	}

	if len(ttnForm2ContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTNForm2Content) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no TTNForm2Content provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTNForm2Content) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTNForm2Content(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNForm2ContentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty TTNForm2ContentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTNForm2ContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTNForm2ContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ttnForm2ContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ttn_form2_content\".* FROM \"ttn_form2_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ttnForm2ContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in TTNForm2ContentSlice")
	}

	*o = slice

	return nil
}

// TTNForm2ContentExistsG checks if the TTNForm2Content row exists.
func TTNForm2ContentExistsG(ctx context.Context, iD int64) (bool, error) {
	return TTNForm2ContentExists(ctx, boil.GetContextDB(), iD)
}

// TTNForm2ContentExists checks if the TTNForm2Content row exists.
func TTNForm2ContentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ttn_form2_content\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if ttn_form2_content exists")
	}

	return exists, nil
}

// Exists checks if the TTNForm2Content row exists.
func (o *TTNForm2Content) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTNForm2ContentExists(ctx, exec, o.ID)
}
