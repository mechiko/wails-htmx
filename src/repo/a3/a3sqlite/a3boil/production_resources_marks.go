// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package a3boil

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductionResourcesMark is an object representing the database table.
type ProductionResourcesMark struct {
	ID                         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProductionResources      null.Int64  `boil:"id_production_resources" json:"id_production_resources,omitempty" toml:"id_production_resources" yaml:"id_production_resources,omitempty"`
	IDProductionResourcesBoxes null.Int64  `boil:"id_production_resources_boxes" json:"id_production_resources_boxes,omitempty" toml:"id_production_resources_boxes" yaml:"id_production_resources_boxes,omitempty"`
	Mark                       null.String `boil:"mark" json:"mark,omitempty" toml:"mark" yaml:"mark,omitempty"`

	R *productionResourcesMarkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productionResourcesMarkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductionResourcesMarkColumns = struct {
	ID                         string
	IDProductionResources      string
	IDProductionResourcesBoxes string
	Mark                       string
}{
	ID:                         "id",
	IDProductionResources:      "id_production_resources",
	IDProductionResourcesBoxes: "id_production_resources_boxes",
	Mark:                       "mark",
}

var ProductionResourcesMarkTableColumns = struct {
	ID                         string
	IDProductionResources      string
	IDProductionResourcesBoxes string
	Mark                       string
}{
	ID:                         "production_resources_marks.id",
	IDProductionResources:      "production_resources_marks.id_production_resources",
	IDProductionResourcesBoxes: "production_resources_marks.id_production_resources_boxes",
	Mark:                       "production_resources_marks.mark",
}

// Generated where

var ProductionResourcesMarkWhere = struct {
	ID                         whereHelperint64
	IDProductionResources      whereHelpernull_Int64
	IDProductionResourcesBoxes whereHelpernull_Int64
	Mark                       whereHelpernull_String
}{
	ID:                         whereHelperint64{field: "\"production_resources_marks\".\"id\""},
	IDProductionResources:      whereHelpernull_Int64{field: "\"production_resources_marks\".\"id_production_resources\""},
	IDProductionResourcesBoxes: whereHelpernull_Int64{field: "\"production_resources_marks\".\"id_production_resources_boxes\""},
	Mark:                       whereHelpernull_String{field: "\"production_resources_marks\".\"mark\""},
}

// ProductionResourcesMarkRels is where relationship names are stored.
var ProductionResourcesMarkRels = struct {
}{}

// productionResourcesMarkR is where relationships are stored.
type productionResourcesMarkR struct {
}

// NewStruct creates a new relationship struct
func (*productionResourcesMarkR) NewStruct() *productionResourcesMarkR {
	return &productionResourcesMarkR{}
}

// productionResourcesMarkL is where Load methods for each relationship are stored.
type productionResourcesMarkL struct{}

var (
	productionResourcesMarkAllColumns            = []string{"id", "id_production_resources", "id_production_resources_boxes", "mark"}
	productionResourcesMarkColumnsWithoutDefault = []string{}
	productionResourcesMarkColumnsWithDefault    = []string{"id", "id_production_resources", "id_production_resources_boxes", "mark"}
	productionResourcesMarkPrimaryKeyColumns     = []string{"id"}
	productionResourcesMarkGeneratedColumns      = []string{"id"}
)

type (
	// ProductionResourcesMarkSlice is an alias for a slice of pointers to ProductionResourcesMark.
	// This should almost always be used instead of []ProductionResourcesMark.
	ProductionResourcesMarkSlice []*ProductionResourcesMark
	// ProductionResourcesMarkHook is the signature for custom ProductionResourcesMark hook methods
	ProductionResourcesMarkHook func(context.Context, boil.ContextExecutor, *ProductionResourcesMark) error

	productionResourcesMarkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productionResourcesMarkType                 = reflect.TypeOf(&ProductionResourcesMark{})
	productionResourcesMarkMapping              = queries.MakeStructMapping(productionResourcesMarkType)
	productionResourcesMarkPrimaryKeyMapping, _ = queries.BindMapping(productionResourcesMarkType, productionResourcesMarkMapping, productionResourcesMarkPrimaryKeyColumns)
	productionResourcesMarkInsertCacheMut       sync.RWMutex
	productionResourcesMarkInsertCache          = make(map[string]insertCache)
	productionResourcesMarkUpdateCacheMut       sync.RWMutex
	productionResourcesMarkUpdateCache          = make(map[string]updateCache)
	productionResourcesMarkUpsertCacheMut       sync.RWMutex
	productionResourcesMarkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productionResourcesMarkAfterSelectMu sync.Mutex
var productionResourcesMarkAfterSelectHooks []ProductionResourcesMarkHook

var productionResourcesMarkBeforeInsertMu sync.Mutex
var productionResourcesMarkBeforeInsertHooks []ProductionResourcesMarkHook
var productionResourcesMarkAfterInsertMu sync.Mutex
var productionResourcesMarkAfterInsertHooks []ProductionResourcesMarkHook

var productionResourcesMarkBeforeUpdateMu sync.Mutex
var productionResourcesMarkBeforeUpdateHooks []ProductionResourcesMarkHook
var productionResourcesMarkAfterUpdateMu sync.Mutex
var productionResourcesMarkAfterUpdateHooks []ProductionResourcesMarkHook

var productionResourcesMarkBeforeDeleteMu sync.Mutex
var productionResourcesMarkBeforeDeleteHooks []ProductionResourcesMarkHook
var productionResourcesMarkAfterDeleteMu sync.Mutex
var productionResourcesMarkAfterDeleteHooks []ProductionResourcesMarkHook

var productionResourcesMarkBeforeUpsertMu sync.Mutex
var productionResourcesMarkBeforeUpsertHooks []ProductionResourcesMarkHook
var productionResourcesMarkAfterUpsertMu sync.Mutex
var productionResourcesMarkAfterUpsertHooks []ProductionResourcesMarkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductionResourcesMark) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductionResourcesMark) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductionResourcesMark) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductionResourcesMark) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductionResourcesMark) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductionResourcesMark) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductionResourcesMark) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductionResourcesMark) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductionResourcesMark) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productionResourcesMarkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductionResourcesMarkHook registers your hook function for all future operations.
func AddProductionResourcesMarkHook(hookPoint boil.HookPoint, productionResourcesMarkHook ProductionResourcesMarkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productionResourcesMarkAfterSelectMu.Lock()
		productionResourcesMarkAfterSelectHooks = append(productionResourcesMarkAfterSelectHooks, productionResourcesMarkHook)
		productionResourcesMarkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productionResourcesMarkBeforeInsertMu.Lock()
		productionResourcesMarkBeforeInsertHooks = append(productionResourcesMarkBeforeInsertHooks, productionResourcesMarkHook)
		productionResourcesMarkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productionResourcesMarkAfterInsertMu.Lock()
		productionResourcesMarkAfterInsertHooks = append(productionResourcesMarkAfterInsertHooks, productionResourcesMarkHook)
		productionResourcesMarkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productionResourcesMarkBeforeUpdateMu.Lock()
		productionResourcesMarkBeforeUpdateHooks = append(productionResourcesMarkBeforeUpdateHooks, productionResourcesMarkHook)
		productionResourcesMarkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productionResourcesMarkAfterUpdateMu.Lock()
		productionResourcesMarkAfterUpdateHooks = append(productionResourcesMarkAfterUpdateHooks, productionResourcesMarkHook)
		productionResourcesMarkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productionResourcesMarkBeforeDeleteMu.Lock()
		productionResourcesMarkBeforeDeleteHooks = append(productionResourcesMarkBeforeDeleteHooks, productionResourcesMarkHook)
		productionResourcesMarkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productionResourcesMarkAfterDeleteMu.Lock()
		productionResourcesMarkAfterDeleteHooks = append(productionResourcesMarkAfterDeleteHooks, productionResourcesMarkHook)
		productionResourcesMarkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productionResourcesMarkBeforeUpsertMu.Lock()
		productionResourcesMarkBeforeUpsertHooks = append(productionResourcesMarkBeforeUpsertHooks, productionResourcesMarkHook)
		productionResourcesMarkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productionResourcesMarkAfterUpsertMu.Lock()
		productionResourcesMarkAfterUpsertHooks = append(productionResourcesMarkAfterUpsertHooks, productionResourcesMarkHook)
		productionResourcesMarkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single productionResourcesMark record from the query using the global executor.
func (q productionResourcesMarkQuery) OneG(ctx context.Context) (*ProductionResourcesMark, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single productionResourcesMark record from the query.
func (q productionResourcesMarkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductionResourcesMark, error) {
	o := &ProductionResourcesMark{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: failed to execute a one query for production_resources_marks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProductionResourcesMark records from the query using the global executor.
func (q productionResourcesMarkQuery) AllG(ctx context.Context) (ProductionResourcesMarkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProductionResourcesMark records from the query.
func (q productionResourcesMarkQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductionResourcesMarkSlice, error) {
	var o []*ProductionResourcesMark

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "a3boil: failed to assign all query results to ProductionResourcesMark slice")
	}

	if len(productionResourcesMarkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProductionResourcesMark records in the query using the global executor
func (q productionResourcesMarkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProductionResourcesMark records in the query.
func (q productionResourcesMarkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to count production_resources_marks rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q productionResourcesMarkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q productionResourcesMarkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: failed to check if production_resources_marks exists")
	}

	return count > 0, nil
}

// ProductionResourcesMarks retrieves all the records using an executor.
func ProductionResourcesMarks(mods ...qm.QueryMod) productionResourcesMarkQuery {
	mods = append(mods, qm.From("\"production_resources_marks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"production_resources_marks\".*"})
	}

	return productionResourcesMarkQuery{q}
}

// FindProductionResourcesMarkG retrieves a single record by ID.
func FindProductionResourcesMarkG(ctx context.Context, iD int64, selectCols ...string) (*ProductionResourcesMark, error) {
	return FindProductionResourcesMark(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProductionResourcesMark retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductionResourcesMark(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductionResourcesMark, error) {
	productionResourcesMarkObj := &ProductionResourcesMark{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"production_resources_marks\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productionResourcesMarkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "a3boil: unable to select from production_resources_marks")
	}

	if err = productionResourcesMarkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productionResourcesMarkObj, err
	}

	return productionResourcesMarkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProductionResourcesMark) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductionResourcesMark) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_resources_marks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionResourcesMarkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productionResourcesMarkInsertCacheMut.RLock()
	cache, cached := productionResourcesMarkInsertCache[key]
	productionResourcesMarkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productionResourcesMarkAllColumns,
			productionResourcesMarkColumnsWithDefault,
			productionResourcesMarkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productionResourcesMarkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productionResourcesMarkType, productionResourcesMarkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productionResourcesMarkType, productionResourcesMarkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"production_resources_marks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"production_resources_marks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "a3boil: unable to insert into production_resources_marks")
	}

	if !cached {
		productionResourcesMarkInsertCacheMut.Lock()
		productionResourcesMarkInsertCache[key] = cache
		productionResourcesMarkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProductionResourcesMark record using the global executor.
// See Update for more documentation.
func (o *ProductionResourcesMark) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProductionResourcesMark.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductionResourcesMark) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productionResourcesMarkUpdateCacheMut.RLock()
	cache, cached := productionResourcesMarkUpdateCache[key]
	productionResourcesMarkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productionResourcesMarkAllColumns,
			productionResourcesMarkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productionResourcesMarkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("a3boil: unable to update production_resources_marks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"production_resources_marks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productionResourcesMarkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productionResourcesMarkType, productionResourcesMarkMapping, append(wl, productionResourcesMarkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update production_resources_marks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by update for production_resources_marks")
	}

	if !cached {
		productionResourcesMarkUpdateCacheMut.Lock()
		productionResourcesMarkUpdateCache[key] = cache
		productionResourcesMarkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q productionResourcesMarkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q productionResourcesMarkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all for production_resources_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected for production_resources_marks")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductionResourcesMarkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductionResourcesMarkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("a3boil: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionResourcesMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"production_resources_marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionResourcesMarkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to update all in productionResourcesMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to retrieve rows affected all in update all productionResourcesMark")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProductionResourcesMark) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductionResourcesMark) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("a3boil: no production_resources_marks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productionResourcesMarkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productionResourcesMarkUpsertCacheMut.RLock()
	cache, cached := productionResourcesMarkUpsertCache[key]
	productionResourcesMarkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productionResourcesMarkAllColumns,
			productionResourcesMarkColumnsWithDefault,
			productionResourcesMarkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productionResourcesMarkAllColumns,
			productionResourcesMarkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("a3boil: unable to upsert production_resources_marks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productionResourcesMarkPrimaryKeyColumns))
			copy(conflict, productionResourcesMarkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"production_resources_marks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productionResourcesMarkType, productionResourcesMarkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productionResourcesMarkType, productionResourcesMarkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to upsert production_resources_marks")
	}

	if !cached {
		productionResourcesMarkUpsertCacheMut.Lock()
		productionResourcesMarkUpsertCache[key] = cache
		productionResourcesMarkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProductionResourcesMark record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProductionResourcesMark) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProductionResourcesMark record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductionResourcesMark) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("a3boil: no ProductionResourcesMark provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productionResourcesMarkPrimaryKeyMapping)
	sql := "DELETE FROM \"production_resources_marks\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete from production_resources_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by delete for production_resources_marks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q productionResourcesMarkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q productionResourcesMarkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("a3boil: no productionResourcesMarkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from production_resources_marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_resources_marks")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProductionResourcesMarkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductionResourcesMarkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productionResourcesMarkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionResourcesMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"production_resources_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionResourcesMarkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: unable to delete all from productionResourcesMark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "a3boil: failed to get rows affected by deleteall for production_resources_marks")
	}

	if len(productionResourcesMarkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProductionResourcesMark) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: no ProductionResourcesMark provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductionResourcesMark) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductionResourcesMark(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionResourcesMarkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("a3boil: empty ProductionResourcesMarkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductionResourcesMarkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductionResourcesMarkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productionResourcesMarkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"production_resources_marks\".* FROM \"production_resources_marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productionResourcesMarkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "a3boil: unable to reload all in ProductionResourcesMarkSlice")
	}

	*o = slice

	return nil
}

// ProductionResourcesMarkExistsG checks if the ProductionResourcesMark row exists.
func ProductionResourcesMarkExistsG(ctx context.Context, iD int64) (bool, error) {
	return ProductionResourcesMarkExists(ctx, boil.GetContextDB(), iD)
}

// ProductionResourcesMarkExists checks if the ProductionResourcesMark row exists.
func ProductionResourcesMarkExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"production_resources_marks\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "a3boil: unable to check if production_resources_marks exists")
	}

	return exists, nil
}

// Exists checks if the ProductionResourcesMark row exists.
func (o *ProductionResourcesMark) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductionResourcesMarkExists(ctx, exec, o.ID)
}
